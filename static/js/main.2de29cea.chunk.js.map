{"version":3,"sources":["state/actions/recording.js","state/actions/server.js","state/actions/peers.js","state/actions/cascade.js","state/reducer.js","components/Store.jsx","components/FileList.jsx","components/Navigation.jsx","components/VideoSquare/AudioVideoSetup.jsx","components/VideoSquare/Countdown.jsx","state/use-previous.js","components/VideoSquare/Video.jsx","components/VideoSquare/index.jsx","components/VideoGrid.jsx","components/Welcome.jsx","components/GreenRoom.jsx","components/ServerProvider.jsx","components/App.js","serviceWorker.js","index.js"],"names":["recorder","blipRecorder","_audioCtx","makeRecorder","stream","dispatch","MediaRecorder","mimeType","addEventListener","data","server","getState","console","log","send","stop","audioCtx","AudioContext","window","webkitAudioContext","blipCount","listenToBlips","blipSourceNode","blipStream","createMediaStreamDestination","connect","myId","order","peers","iAmLast","length","analyzer","createAnalyser","fftSize","destination","freqResolution","sampleRate","timeResolution","Math","floor","freqBins","Uint8Array","frequencyBinCount","blipBin","doubleBlipBin","blipFreq","firstBlip","blippin","analyzerIntervalId","setInterval","countdown","mode","getByteFrequencyData","maxEnergyIndex","reduce","currentMaxIndex","energy","index","currentMaxEnergy","initiatorId","JSON","stringify","type","blipBinDistance","abs","CASCADE_STANDBY","initialState","start","changeMode","CASCADE_RECORDING","clearInterval","disconnect","serverSend","sendAction","makeServer","serverURL","WebSocket","action","parse","newOrder","oldOrder","streams","forEach","id","makeNewPeer","accumulator","includes","concat","cleanStream","destroy","handleOrderSet","fromId","signal","handlePeerSignal","initiator","peerId","myStream","sendStream","clone","peer","Peer","_sendStreams","on","forId","theirStream","nextPeer","getNextPeer","hasBlips","getUpstreamIds","slice","reverse","find","upstreamId","addStream","createMediaStreamSource","connectBlipListener","myIndex","indexOf","prevId","prevStream","addCascadedStream","CASCADE_DONE","toString","error","push","popStream","pop","removeStream","READY","nextIndex","getTracks","track","newMode","getDownstreamIds","setupCascade","cascadeModeSet","resetStreams","startCascade","blipDest","osc","createOscillator","frequency","value","blipper","createGain","gain","blipIntervalId","setValueAtTime","currentTime","sendBlips","audioOutput","files","iAmInitiator","evilBoogiemanGlobalState","reduceAndSave","state","newState","deviceId","fileName","blobURL","justPrevStream","newStreams","findIndex","otherId","newPeers","reducer","Context","createContext","Store","children","useReducer","Provider","FileList","useContext","map","key","download","href","Navigation","className","onClick","stopCascade","AudioVideoSetup","style","useState","devices","setDevices","showSetup","setShowSetup","audioInput","setAudioInput","videoInput","setVideoInput","useEffect","a","navigator","mediaDevices","enumerateDevices","deviceList","findDevices","getUserMedia","audio","exact","autoGainControl","echoCancellation","noiseSuppression","video","Object","values","setStream","kinds","kindLabels","selectedDevices","devicesSorted","device","kind","deviceMap","devicesOfType","label","selectedDeviceId","setSelectedDeviceId","onChange","event","target","Countdown","usePrevious","prevRef","useRef","current","Video","isMe","setVideoAspectRatio","prevAudioOutput","videoRef","useCallback","node","videoWidth","videoHeight","srcObject","src","URL","createObjectURL","setSinkId","autoPlay","ref","VideoSquare","col","orderNumber","numColumns","row","dndRef","useDrag","item","canDrag","collect","monitor","isDragging","connectDrag","useDrop","accept","drop","hover","hoveredOverId","theirIndex","connectDrop","gridColumn","gridRow","opacity","videoAspectRatio","left","setLeft","top","setTop","element","videoResizeObserver","ResizeObserver","entries","entry","contentRect","width","height","observe","showOrderNumber","orderNumberStyle","backgroundColor","settingsButtonStyle","right","VideoGrid","numParticipants","cols","ceil","sqrt","rows","colPct","rowPct","gridStyles","gridTemplateColumns","gridTemplateRows","getOrderProps","Welcome","GreenRoom","showWelcome","setShowWelcome","ServerProvider","prevMyStream","URLSearchParams","location","search","get","App","DndProvider","backend","HTML5Backend","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2de29cea.chunk.js","sourcesContent":["import {\n    CASCADE_DONE,\n    CASCADE_RECORDING,\n    CASCADE_STANDBY,\n    changeMode,\n    getNextPeer\n} from './cascade';\nimport { addStream } from './peers';\nimport { getState, initialState } from '../reducer';\n\nlet recorder;\nlet blipRecorder;\n\nexport function makeRecorder(stream, dispatch) {\n    // TODO: use specific codecs. check browser compatibility.\n    recorder = new MediaRecorder(stream, { mimeType : 'video/webm' });\n    recorder.addEventListener('dataavailable', ({ data }) => {\n        const { server } = getState();\n        console.log('SENDING VIDEO FILE TO SERVER');\n        server.send(data);\n        blipRecorder.stop();\n        // dispatch({\n        //     type     : 'FILES_ADD',\n        //     blobURL  : URL.createObjectURL(data),\n        //     fileName : `cascade${files.length + 1}_video${order.indexOf(myId) + 1}.webm`\n        // });\n    });\n}\n\nfunction makeBlipRecorder(stream) {\n    blipRecorder = new MediaRecorder(stream, { mimeType : 'audio/webm' });\n    blipRecorder.addEventListener('dataavailable', ({ data }) => {\n        const { server } = getState();\n        console.log('SENDING METRONOME AUDIO TO SERVER');\n        server.send(data);\n    });\n}\n\nexport function startRecording() {\n    recorder.start();\n    blipRecorder.start();\n}\n\nexport function stopRecording() {\n    recorder.stop();\n}\n\n// All the Web Audio API stuff below is to help match signals later.\n// When the initiator starts the cascade, it sends a series of blips.\n// Each peer in the cascade analyzes the incoming audio\n// and records when it detects a blip.\n\nlet _audioCtx;\nfunction audioCtx() {\n    if (!_audioCtx) {\n        // Safari, what the hell.\n        const AudioContext = window.AudioContext || window.webkitAudioContext;\n        _audioCtx = new AudioContext();\n    }\n    return _audioCtx;\n}\n\nconst blipFreq = 440;\nconst doubleBlipFreq = blipFreq * 4;\nlet blipCount = -1;\nexport function sendBlips(dispatch) {\n    console.log(\"SENDING BLIPS\");\n    const blipDest = audioCtx().createMediaStreamDestination();\n    const blipStream = blipDest.stream;\n    const nextPeer = getNextPeer();\n    addStream(nextPeer, blipStream);\n\n    const gainValue = 0.1;\n    const blipLength = 0.1; // seconds\n    const osc = audioCtx().createOscillator();\n    osc.frequency.value = blipFreq;\n    // Connect oscillator to gain node\n    const blipper = audioCtx().createGain();\n    blipper.gain.value = 0;\n    osc.connect(blipper);\n    // Send blips to the analyzer for blip tracking\n    listenToBlips(blipper, dispatch);\n    // And send blips down the cascade\n    blipper.connect(blipDest);\n    osc.start();\n\n    // How to make a blip: turn the oscillator gain on and off\n    const makeBlip = () => {\n        const { mode } = getState();\n        if (mode === CASCADE_DONE) {\n            osc.stop();\n            window.clearInterval(blipIntervalId);\n            blipCount = -1;\n            return;\n        }\n        if (blipCount !== -1) {\n            // Send out a blip an octave higher every 4 blips\n            // to signal record start\n            if (blipCount % 4 === 0) {\n                osc.frequency.setValueAtTime(doubleBlipFreq, audioCtx().currentTime);\n                osc.frequency.setValueAtTime(blipFreq, audioCtx().currentTime + blipLength);\n            }\n            blipCount += 1;\n        }\n        blipper.gain.setValueAtTime(gainValue, audioCtx().currentTime);\n        blipper.gain.setValueAtTime(0, audioCtx().currentTime + blipLength);\n    };\n\n    const bpm = 100;\n    const bps = bpm / 60; // beats per second\n    const beatInterval = 1000 / bps; // ms between beats\n    const blipIntervalId = window.setInterval(makeBlip, beatInterval);\n}\n\nexport function sendRecordSignal() {\n    console.log(\"SENDING RECORD SIGNAL\");\n    // This signals to the makeBlip() function\n    // to start sending high blips every 4th blip\n    blipCount = 0;\n}\n\nexport function connectBlipListener(blipStream, dispatch) {\n    const blipSource = audioCtx().createMediaStreamSource(blipStream);\n    listenToBlips(blipSource, dispatch);\n}\n\nexport function listenToBlips(blipSourceNode, dispatch) {\n    console.log(\"LISTENING TO BLIPS\");\n\n    // Record blips, for experiments\n    const blipStream = audioCtx().createMediaStreamDestination();\n    blipSourceNode.connect(blipStream);\n    makeBlipRecorder(blipStream.stream);\n\n    const { myId, order, peers } = getState();\n    const iAmLast = order[order.length - 1] === myId;\n    const analyzer = audioCtx().createAnalyser();\n    analyzer.fftSize = 512;\n    blipSourceNode.connect(analyzer);\n    // Send blips to the speakers\n    analyzer.connect(audioCtx().destination);\n\n    const freqResolution = audioCtx().sampleRate / analyzer.fftSize;\n    const timeResolution = Math.floor(1 / freqResolution * 1000); // ms\n    const freqBins = new Uint8Array(analyzer.frequencyBinCount);\n    const blipBin = Math.floor(blipFreq / freqResolution);\n    const doubleBlipBin = Math.floor(doubleBlipFreq / freqResolution);\n\n    let firstBlip = true;\n    let blippin = false;\n    const analyzerIntervalId = setInterval(() => {\n        const { countdown, mode } = getState();\n        analyzer.getByteFrequencyData(freqBins);\n\n        // Get the index of the frequency bin with the highest energy\n        // maxEnergyIndex === -1 means silence, no energy\n        const maxEnergyIndex = freqBins.reduce(\n            (currentMaxIndex, energy, index) => {\n                const currentMaxEnergy = freqBins[currentMaxIndex] || 0;\n                if (energy > 0 && energy > currentMaxEnergy) {\n                    return index;\n                }\n                return currentMaxIndex;\n            },\n            -1\n        );\n\n        // We heard silence\n        if (maxEnergyIndex === -1 && blippin) {\n            blippin = false;\n        }\n\n        // We heard a blip!\n        if (maxEnergyIndex !== -1 && !blippin) {\n            blippin = true;\n\n            // The last peer, on receiving the first blip,\n            // signals to the initiator that everything's good to go.\n            if (firstBlip && iAmLast) {\n                firstBlip = false;\n                const initiatorId = order[0];\n                const initiator = peers[initiatorId];\n                initiator.send(JSON.stringify({\n                    type : 'SEND_RECORD_SIGNAL'\n                }));\n            }\n\n            // const binLow = Math.floor(maxEnergyIndex * freqResolution);\n            // const binHigh = Math.floor((maxEnergyIndex + 1) * freqResolution);\n            // console.log(`HEARD BLIP @ ${binLow}-${binHigh}Hz (bin ${maxEnergyIndex}, waiting for ${expectedFreqIndex})`);\n\n            const blipBinDistance = Math.abs(blipBin - maxEnergyIndex);\n            const doubleBlipBinDistance = Math.abs(doubleBlipBin - maxEnergyIndex)\n            if (doubleBlipBinDistance < blipBinDistance) {\n                console.log(`HEARD HIGH BLIP NEAR ${doubleBlipFreq}Hz`);\n                if (mode === CASCADE_STANDBY) {\n                    if (countdown === initialState.countdown) {\n                        // On the first high blip of the countdown, start recording\n                        startRecording();\n                    }\n                    if (countdown === 1) {\n                        // On the last high blip of the countdown,\n                        // change the UI to show recording\n                        // (even though recording already started)\n                        changeMode(CASCADE_RECORDING, dispatch);\n                        // And reset countdown for next cascade\n                        dispatch({\n                            type      : 'COUNTDOWN_SET',\n                            countdown : initialState.countdown\n                        });\n                        // And stop listening for blips\n                        clearInterval(analyzerIntervalId);\n                        blipSourceNode.disconnect(analyzer);\n                    } else {\n                        dispatch({\n                            type      : 'COUNTDOWN_SET',\n                            countdown : countdown - 1\n                        });\n                    }\n                }\n            } else {\n                console.log(`HEARD LOW BLIP NEAR ${blipFreq}Hz`);\n            }\n        }\n    }, timeResolution);\n}\n","import { changeMode } from './cascade';\nimport { handleOrderSet, handlePeerSignal } from './peers';\nimport { getState } from '../reducer';\n\nexport function serverSend(sendAction) {\n    const { server } = getState();\n    server.send(JSON.stringify(sendAction));\n}\n\nexport function makeServer(serverURL, dispatch) {\n    // We set the server connection here because\n    // we need access to dispatch in the event listeners.\n    const server = new WebSocket(serverURL);\n    server.addEventListener('open', () => console.log('opening socket'));\n    // TODO: handle failed connection\n    server.addEventListener('close', () => console.log('closing socket'));\n    server.addEventListener('error', () => console.log('socket error'));\n    server.addEventListener('message', ({ data }) => {\n        const action = JSON.parse(data);\n        console.log('ACTION (from server):', action);\n        // Some actions have side effects and should only happen once.\n        // (a single dispatch can call the reducer multiple times)\n        switch (action.type) {\n            case 'MODE_SET':\n                changeMode(action.mode, dispatch);\n                break;\n            case 'ORDER_SET':\n                handleOrderSet(action, dispatch);\n                break;\n            case 'PEER_SIGNAL':\n                handlePeerSignal(action, dispatch);\n                break;\n            case 'pong':\n                break;\n            default:\n                // Otherwise, messages from the server\n                // are simply actions for the reducer.\n                dispatch(action);\n        }\n    });\n    setInterval(() => {\n        // Keep the connection alive\n        serverSend({ type : 'ping' });\n    }, 30000);\n    dispatch({\n        type : 'SERVER_SET',\n        server\n    });\n}\n","import Peer from 'simple-peer';\nimport {\n    CASCADE_DONE,\n    CASCADE_STANDBY,\n    addCascadedStream,\n    changeMode,\n    cleanStream\n} from './cascade';\nimport { sendRecordSignal } from './recording';\nimport { serverSend } from './server';\nimport { getState } from '../reducer';\n\nexport function handleOrderSet(action, dispatch) {\n    const { order : newOrder } = action;\n    const { myId, order : oldOrder, peers, streams } = getState();\n    dispatch(action);\n\n    // If receiving order for the first time,\n    // initialize a new peer for everyone else waiting\n    if (oldOrder.length === 0) {\n        newOrder.forEach((id) => {\n            if (id !== myId && !peers[id]) {\n                makeNewPeer(true, id, dispatch);\n            }\n        });\n    }\n\n    // If peers have been removed, clean up the connections\n    const removedPeers = oldOrder.reduce((accumulator, id) => {\n        if (newOrder.includes(id)) return accumulator;\n        return accumulator.concat(id);\n    }, []);\n    removedPeers.forEach((id) => {\n        cleanStream(streams[id]);\n        peers[id].destroy();\n    });\n}\n\nfunction makeNewPeer(initiator, peerId, dispatch) {\n    const { myId, myStream } = getState();\n    // Clone this because we'll stop the tracks during cascade,\n    // which would stop our view of ourself\n    const sendStream = myStream.clone();\n    const peer = new Peer({\n        initiator,\n        stream : sendStream\n    });\n    // Peer doesn't keep track of the sending streams.\n    // We're doing a bunch of stream cloning\n    // (because you can't send the same stream more than once :shrug:)\n    // so we need to keep track of the streams that were sent.\n    peer._sendStreams = [sendStream];\n\n    peer.on('signal', (signal) => {\n        serverSend({\n            type   : 'PEER_SIGNAL',\n            forId  : peerId,\n            fromId : myId,\n            signal\n        });\n    });\n\n    peer.on('stream', (theirStream) => {\n        const { mode } = getState();\n        if (mode === CASCADE_STANDBY) {\n            addCascadedStream(theirStream, dispatch);\n        } else {\n            dispatch({\n                type   : 'STREAMS_ADD',\n                id     : peerId,\n                stream : theirStream\n            });\n            // After cascading, if this is sent from downstream,\n            // we need to reciprocate and reopen our stream as well\n            // (except for the next peer, which we're already streaming to)\n            if (mode === CASCADE_DONE && peer._sendStreams.length === 0) {\n                addStream(peer, myStream.clone());\n            }\n        }\n    });\n\n    // The peer data channel is currently only used\n    // for propagating mode changes down the cascade\n    peer.on('data', (data) => {\n        const { mode, type } = JSON.parse(data.toString());\n        if (type === 'MODE_SET') {\n            changeMode(mode, dispatch);\n        } else if (type === 'SEND_RECORD_SIGNAL') {\n            sendRecordSignal();\n        } else {\n            console.error(`Unknown action \"${type}\" sent thru peer`);\n        }\n    });\n\n    dispatch({\n        type : 'PEERS_ADD',\n        id   : peerId,\n        peer\n    });\n    return peer;\n}\n\nexport function handlePeerSignal(action, dispatch) {\n    const { peers } = getState();\n    const { fromId, signal } = action;\n    const existingPeer = peers[fromId];\n    const peer = existingPeer || makeNewPeer(false, fromId, dispatch);\n    peer.signal(signal);\n}\n\nexport function addStream(peer, stream) {\n    peer.addStream(stream);\n    peer._sendStreams.push(stream);\n}\n\nexport function popStream(peer) {\n    const stream = peer._sendStreams.pop();\n    cleanStream(stream);\n    peer.removeStream(stream);\n    return stream;\n}\n","import { addStream, popStream } from './peers';\nimport {\n    connectBlipListener,\n    sendBlips,\n    stopRecording\n} from './recording';\nimport { serverSend } from './server';\nimport { getState } from '../reducer';\n\n// User is connecting audio/video, hasn't connected to server\nexport const SETUP = 0;\n// Connected to server, waiting for initiator to press GO\nexport const READY = 1;\n// Cascade has started but recording hasn't started yet.\n// For initiator, there's a short countdown.\n// For everyone else, it's just waiting on the stream to arrive.\nexport const CASCADE_STANDBY = 2;\n// Cascade in progress!\n// This will end for the initiator when they press the DONE button\n// and for everyone else when the stream ends.\nexport const CASCADE_RECORDING = 3;\n// After the cascade is finished, restarting connections needs to be handled differently.\n// Upstream peers should only send their video downstream after the downstream peers have finished.\nexport const CASCADE_DONE = 4;\n\n\nexport function getNextPeer() {\n    const { myId, order, peers } = getState();\n    const nextIndex = order.indexOf(myId) + 1;\n    const nextId = order[nextIndex];\n    return peers[nextId];\n}\n\nexport function cleanStream(stream) {\n    stream.getTracks().forEach((track) => track.stop());\n}\n\nfunction cascadeModeSet(mode) {\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        nextPeer.send(JSON.stringify({\n            type : 'MODE_SET',\n            mode\n        }));\n    }\n}\n\nexport function changeMode(newMode, dispatch) {\n    dispatch({\n        type : 'MODE_SET',\n        mode : newMode\n    });\n\n    switch (newMode) {\n        case CASCADE_STANDBY:\n            setupCascade();\n            break;\n        case CASCADE_DONE:\n            cascadeModeSet(CASCADE_DONE);\n            resetStreams();\n            stopRecording();\n            break;\n        default:\n    }\n}\n\nexport function startCascade(dispatch) {\n    const { myId } = getState();\n    // dispatch MODE_SET and broadcast via server\n    // (server will set lock on new participants)\n    const mode = CASCADE_STANDBY;\n    const action = {\n        type   : 'MODE_SET',\n        fromId : myId,\n        mode\n    };\n    serverSend(action);\n    changeMode(mode, dispatch);\n    sendBlips(dispatch);\n}\n\nexport function getDownstreamIds() {\n    const { myId, order } = getState();\n    const myIndex = order.indexOf(myId);\n    return order.slice(myIndex + 1);\n}\n\nexport function getUpstreamIds() {\n    const { myId, order } = getState();\n    const myIndex = order.indexOf(myId);\n    return order.slice(0, myIndex);\n}\n\nfunction setupCascade() {\n    const { peers } = getState();\n\n    // Disconnect stream from all upstream peers\n    // and all downstream peers except the one right after\n    const disconnectIds = [\n        ...getUpstreamIds(),\n        ...getDownstreamIds().slice(1)\n    ];\n    disconnectIds.forEach((id) => {\n        const peer = peers[id];\n        // There should only be one stream per peer in this stage\n        popStream(peer);\n    });\n}\n\nlet hasBlips = false;\nexport function addCascadedStream(stream, dispatch) {\n    console.log(\"RECEIVING CASCADED STREAM\");\n    const { myId, order, streams } = getState();\n    const nextPeer = getNextPeer();\n\n    // The first cascaded stream is a blip track for syncing later\n    if (!hasBlips) {\n        hasBlips = true;\n        connectBlipListener(stream, dispatch);\n        // After receiving the blip stream,\n        // cascade it and the stream from the previous peer\n        // to the next peer.\n        const myIndex = order.indexOf(myId);\n        const prevId = order[myIndex - 1];\n        const prevStream = streams[prevId];\n        if (nextPeer) {\n            addStream(nextPeer, stream);\n            addStream(nextPeer, prevStream.clone());\n        }\n    } else {\n        // Find the next upstream id from here that doesn't have a stream set\n        const upstreamIds = getUpstreamIds().slice(0, -1).reverse();\n        const id = upstreamIds.find((upstreamId) => !streams[upstreamId]);\n        dispatch({\n            type : 'STREAMS_ADD',\n            id,\n            stream,\n        });\n\n        if (nextPeer) {\n            addStream(nextPeer, stream);\n        }\n    }\n}\n\nexport function stopCascade(dispatch) {\n    // changeMode(CASCADE_DONE, dispatch);\n    const { order, peers } = getState();\n    const initiatorId = order[0];\n    peers[initiatorId].send(JSON.stringify({\n        type : 'MODE_SET',\n        mode : CASCADE_DONE\n    }));\n}\n\nfunction resetStreams() {\n    const { myStream, peers } = getState();\n\n    hasBlips = false;\n\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        // Remove the cascaded streams\n        while (nextPeer._sendStreams.length > 1) {\n            popStream(nextPeer);\n        }\n    }\n\n    // Send live video back to everyone upstream\n    // They will reciprocate if they're not already sending video\n    const beforeIds = getUpstreamIds();\n    beforeIds.forEach((id) => {\n        const peer = peers[id];\n        addStream(peer, myStream.clone());\n    });\n}\n","import { CASCADE_DONE, CASCADE_STANDBY, READY, SETUP } from './actions/cascade';\n\nexport const initialState = {\n    // This needs to be stored here so all video elements output sound to the same place.\n    audioOutput   : null,\n    countdown     : 4,\n    // Blob URLs of the recorded myStream (not combined with other peers)\n    files         : [],\n    // The initiator is whoever is in the first spot.\n    // They have all the power. They get to rearrange the order of the cascade.\n    // And they press the big GO button.\n    iAmInitiator  : false,\n    mode          : SETUP,\n    // UUID generated by the server\n    myId          : null,\n    // MediaStream object containing audio/video\n    myStream      : null,\n    // The order of the participants - how the audios cascades\n    order         : [],\n    // Direct connections to other participants via WebRTC that provide the streams\n    // Keys are the server-generated IDs\n    peers         : {},\n    // WebSocket server connection to send the initial WebRTC signals (and a biiiit more after)\n    server        : null,\n    // MediaStream objects for remote peers\n    // Keys are the server-generated IDs\n    streams       : {}\n};\n\nfunction reducer(state, action) {\n    console.log('ACTION', action);\n    const { files, mode, myId, myStream, order, peers, streams } = state;\n    switch (action.type) {\n        case 'AUDIO_OUTPUT_SET':\n            return {\n                ...state,\n                audioOutput : action.deviceId\n            };\n        case 'COUNTDOWN_SET':\n            return {\n                ...state,\n                countdown : action.countdown\n            };\n        case 'FILES_ADD':\n            return {\n                ...state,\n                files : [\n                    ...files,\n                    [action.fileName, action.blobURL]\n                ]\n            };\n        case 'MODE_SET': {\n            const { mode : newMode } = action;\n            // When starting or ending the cascade, remove all streams except\n            // the prev one (they will be stopped shortly)\n            const myIndex = order.indexOf(myId);\n            const prevId = order[myIndex - 1];\n            const justPrevStream = prevId ?\n                { [prevId] : streams[prevId] } :\n                {};\n            const newStreams = newMode === CASCADE_STANDBY || newMode === CASCADE_DONE ?\n                justPrevStream :\n                streams;\n            return {\n                ...state,\n                mode    : newMode,\n                streams : newStreams\n            };\n        }\n        case 'MY_ID_SET':\n            return {\n                ...state,\n                myId : action.id\n            };\n        case 'MY_STREAM_SET': {\n            // Move from setup mode when myStream is first set\n            const newMode = myStream ? mode : READY;\n            return {\n                ...state,\n                mode     : newMode,\n                myStream : action.stream,\n            };\n        }\n        case 'ORDER_SET': {\n            const { order : newOrder } = action;\n            const myOrderIndex = newOrder.findIndex((otherId) => myId === otherId);\n            const iAmInitiator = myOrderIndex === 0;\n            // If an id has been taken away from the order, remove the peers and streams\n            const [newPeers, newStreams] = newOrder.reduce((accumulator, id) => {\n                if (id === myId) return accumulator;\n                return [\n                    {\n                        ...accumulator[0],\n                        [id] : peers[id]\n                    },\n                    {\n                        ...accumulator[1],\n                        [id] : streams[id]\n                    }\n                ]\n            }, [{}, {}]);\n            return {\n                ...state,\n                iAmInitiator,\n                order   : newOrder,\n                peers   : newPeers,\n                streams : newStreams\n            };\n        }\n        case 'PEERS_ADD':\n            return {\n                ...state,\n                peers : {\n                    ...peers,\n                    [action.id] : action.peer\n                }\n            };\n        case 'SERVER_SET':\n            return {\n                ...state,\n                server : action.server\n            };\n        case 'STREAMS_ADD':\n            return {\n                ...state,\n                streams : {\n                    ...streams,\n                    [action.id] : action.stream\n                }\n            };\n        default: {\n            console.error('Unknown action:', action);\n            return state;\n        }\n    }\n};\n\nlet evilBoogiemanGlobalState = {};\nexport function getState() {\n    return evilBoogiemanGlobalState;\n}\n\nexport default function reduceAndSave(state, action) {\n    const newState = reducer(state, action);\n    evilBoogiemanGlobalState = newState;\n    return newState;\n}\n","import React, { createContext, useReducer } from 'react';\nimport reducer, { initialState } from '../state/reducer';\n\nconst Store = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    return (\n        <Context.Provider value={[state, dispatch]}>\n            {children}\n        </Context.Provider>\n    )\n};\n\nexport const Context = createContext(initialState);\nexport default Store;\n","import React, { useContext } from 'react';\nimport { Context } from './Store';\n\nconst FileList = () => {\n    const [state] = useContext(Context);\n    const { files } = state;\n    return (\n        <aside>\n            { files.map(([fileName, blobURL], index) =>\n                <a\n                    key={blobURL}\n                    download={fileName}\n                    href={blobURL}\n                >\n                    Download your video for cascade {index + 1}\n                </a>) }\n        </aside>\n    );\n};\n\nexport default FileList;\n","import React, { useContext } from 'react';\nimport { Context } from './Store';\nimport {\n    CASCADE_DONE,\n    CASCADE_RECORDING,\n    CASCADE_STANDBY,\n    READY,\n    startCascade,\n    stopCascade\n} from '../state/actions/cascade';\n\nconst Navigation = () => {\n    const [state, dispatch] = useContext(Context);\n    const { iAmInitiator, mode, myId, order } = state;\n    const lastId = order[order.length - 1];\n    const iAmLast = myId === lastId;\n    return (\n        <nav>\n            { [READY, CASCADE_DONE].includes(mode) && iAmInitiator && order.length > 1 &&\n                <button\n                    className=\"big-button\"\n                    onClick={() => startCascade(dispatch)}\n                >\n                    GO\n                </button> }\n            { mode === CASCADE_RECORDING && iAmLast &&\n                <button\n                    className=\"big-button\"\n                    onClick={() => stopCascade(dispatch)}\n                >\n                    STOP\n                </button> }\n        </nav>\n    );\n};\n\nexport default Navigation;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Context } from '../Store';\nimport { addStream, popStream } from '../../state/actions/peers';\nimport { makeRecorder } from '../../state/actions/recording';\n\nconst AudioVideoSetup = ({ style }) => {\n    const [state, dispatch] = useContext(Context);\n    const { audioOutput, myStream, peers } = state;\n    const [devices, setDevices] = useState([]);\n    const [showSetup, setShowSetup] = useState(false);\n    const [audioInput, setAudioInput] = useState(null);\n    const [videoInput, setVideoInput] = useState(null);\n    const setAudioOutput = (deviceId) => {\n        dispatch({\n            type : 'AUDIO_OUTPUT_SET',\n            deviceId\n        });\n    }\n\n    useEffect(() => {\n        // On Safari, enumerateDevices only works after getUserMedia is called.\n        // So wait for that to happen before populating the dropdowns.\n        // (Also, missing things even after it's called...)\n        if (myStream && showSetup) {\n            const findDevices = async () => {\n                const deviceList = await navigator.mediaDevices.enumerateDevices();\n                setDevices(deviceList);\n            };\n            findDevices();\n        }\n    }, [myStream, showSetup]);\n\n    useEffect(() => {\n        // Called on the first render\n        // (and any time audioInput or videoInput change)\n        const setStream = async () => {\n            const stream = await navigator.mediaDevices.getUserMedia({\n                audio : {\n                    deviceId         : audioInput && { exact : audioInput },\n                    // These cause latency\n                    autoGainControl  : { exact : false },\n                    echoCancellation : false,\n                    noiseSuppression : { exact : false },\n                },\n                video : {\n                    deviceId : videoInput && { exact : videoInput }\n                }\n            });\n\n            // Record the unprocessed input\n            makeRecorder(stream, dispatch);\n\n            if (myStream) {\n                Object.values(peers).forEach((peer) => {\n                    popStream(peer);\n                    addStream(peer, stream);\n                });\n            }\n\n            dispatch({\n                type   : 'MY_STREAM_SET',\n                stream\n            });\n        };\n        setStream();\n    }, [audioInput, videoInput]);\n\n    const kinds = ['audioinput', 'audiooutput', 'videoinput'];\n    const kindLabels = ['Audio Input', 'Audio Output', 'Video Input'];\n    const selectedDevices = [\n        [audioInput, setAudioInput],\n        [audioOutput, setAudioOutput],\n        [videoInput, setVideoInput]\n    ];\n    // Sort the available devices into the three buckets\n    const devicesSorted = devices.reduce((accumulator, device) => {\n        const { deviceId, kind } = device;\n        const index = kinds.indexOf(kind);\n        return [\n            ...accumulator.slice(0, index),\n            {\n                ...accumulator[index],\n                [deviceId] : device,\n            },\n            ...accumulator.slice(index + 1)\n        ]\n    }, [{}, {}, {}]);\n\n    return (\n        <section className=\"av-setup\" style={style}>\n            { showSetup ? <>\n                { devicesSorted.map((deviceMap, index) => {\n                    const devicesOfType = Object.values(deviceMap);\n                    if (devicesOfType.length === 0) return null;\n                    const label = kindLabels[index];\n                    const [selectedDeviceId, setSelectedDeviceId] = selectedDevices[index];\n                    return (\n                        <label key={label}>\n                            {label}\n                            <select\n                                onChange={(event) => setSelectedDeviceId(event.target.value)}\n                                value={selectedDeviceId || 'default'}\n                            >\n                                { devicesOfType.map(({ deviceId, label }) => (\n                                    <option key={deviceId} value={deviceId}>{label}</option>\n                                )) }\n                            </select>\n                        </label>\n                    );\n                }) }\n                <button onClick={() => setShowSetup(false)}>x</button>\n            </> :\n            <button onClick={() => setShowSetup(true)}>Audio/Video settings</button> }\n        </section>\n    );\n};\n\nexport default AudioVideoSetup;\n","import React, { useContext } from 'react';\nimport { Context } from '../Store';\n\nconst Countdown = () => {\n    const [state] = useContext(Context);\n    const { countdown } = state;\n    return <span className=\"countdown\">{countdown}</span>\n};\n\nexport default Countdown;\n","import { useEffect, useRef } from 'react';\n\nexport default function usePrevious(value) {\n    const prevRef = useRef();\n    useEffect(() => {\n        prevRef.current = value;\n    }, [value]);\n    return prevRef.current;\n}\n","import React, { useCallback, useContext } from 'react';\nimport { Context } from '../Store';\nimport usePrevious from '../../state/use-previous';\n\nconst Video = ({ id, isMe, setVideoAspectRatio, stream }) => {\n    const [state] = useContext(Context);\n    const { audioOutput } = state;\n\n    const prevStream = usePrevious(stream);\n    const prevAudioOutput = usePrevious(audioOutput);\n    const videoRef = useCallback((node) => {\n        if (node) {\n            if (stream !== prevStream) {\n                node.addEventListener('loadedmetadata', ({ target }) => {\n                    setVideoAspectRatio(target.videoWidth / target.videoHeight);\n                });\n                if ('srcObject' in node) {\n                    node.srcObject = stream;\n                } else {\n                    node.src = URL.createObjectURL(stream);\n                }\n            }\n\n            if (audioOutput && audioOutput !== prevAudioOutput) {\n                // TODO: check if available, alert user if not\n                // (Firefox needs setting enabled)\n                // (Safari is ?)\n                node.setSinkId(audioOutput);\n            }\n        }\n    }, [audioOutput, stream]);\n\n    return stream ?\n        <video autoPlay ref={videoRef} /> :\n        null;\n};\n\nexport default Video;\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport AudioVideoSetup from './AudioVideoSetup';\nimport Countdown from './Countdown';\nimport Video from './Video';\nimport { Context } from '../Store';\nimport {\n    CASCADE_DONE,\n    CASCADE_RECORDING,\n    CASCADE_STANDBY,\n    READY\n} from '../../state/actions/cascade';\nimport { serverSend } from '../../state/actions/server';\n\nconst VideoSquare = ({\n    col,\n    id,\n    isMe,\n    numColumns,\n    orderNumber,\n    row,\n    stream\n}) => {\n    const [state, dispatch] = useContext(Context);\n    const { iAmInitiator, mode, myId, order } = state;\n\n    const dndRef = useRef(null);\n    const [{ isDragging }, connectDrag] = useDrag({\n        item    : { id, type : 'participant' },\n        canDrag : () => iAmInitiator && [READY, CASCADE_DONE].includes(mode),\n        collect : (monitor) => ({ isDragging : monitor.isDragging() })\n    });\n    const [, connectDrop] = useDrop({\n        accept : 'participant',\n        drop   : (item) => {\n            serverSend({\n                type   : 'ORDER_SET',\n                fromId : myId,\n                order,\n            });\n        },\n        hover  : ({ id : hoveredOverId }) => {\n            if (hoveredOverId !== id) {\n                const myIndex = order.indexOf(id);\n                const theirIndex = order.indexOf(hoveredOverId);\n                const newOrder = [...order];\n                newOrder[myIndex] = hoveredOverId;\n                newOrder[theirIndex] = id;\n                dispatch({\n                    type  : 'ORDER_SET',\n                    order : newOrder\n                });\n            }\n        }\n    });\n    connectDrag(dndRef);\n    connectDrop(dndRef);\n\n    const style = {\n        gridColumn : `${col} / span 1`,\n        gridRow    : `${row} / span 1`,\n        opacity    : isDragging ? 0.5 : 1,\n    };\n\n    // This ridiculousness is to make the order number &\n    // settings button hover over the video\n    const [videoAspectRatio, setVideoAspectRatio] = useState(null);\n    const [left, setLeft] = useState(0);\n    const [top, setTop] = useState(0);\n    useEffect(() => {\n        const element = dndRef.current;\n        if (element && videoAspectRatio) {\n            const videoResizeObserver = new ResizeObserver((entries) => {\n                entries.forEach((entry) => {\n                    const { width, height } = entry.contentRect;\n                    // Try to fill height\n                    let videoHeight = height;\n                    let videoWidth = videoHeight * videoAspectRatio;\n                    // If width overflows, fill width\n                    if (videoWidth > width) {\n                        videoWidth = width;\n                        videoHeight = videoWidth / videoAspectRatio;\n                    }\n                    setLeft((width - videoWidth) / 2);\n                    setTop((height - videoHeight) / 2);\n                });\n            });\n            videoResizeObserver.observe(element);\n            return () => {\n                videoResizeObserver.disconnect();\n            };\n        }\n    }, [videoAspectRatio]);\n    const showOrderNumber = orderNumber > 0 && videoAspectRatio && dndRef.current;\n    const orderNumberStyle = {\n        backgroundColor : (\n            mode === CASCADE_STANDBY && 'yellow'\n        ) || (\n            mode === CASCADE_RECORDING && 'red'\n        ) || 'green',\n        left            : `calc(${left}px + 1%)`,\n        top             : `calc(${top}px + 1%)`\n    };\n    const settingsButtonStyle = {\n        right : orderNumberStyle.left,\n        top   : orderNumberStyle.top\n    };\n\n    return (\n        <div ref={dndRef} className=\"video-draggable\" style={style}>\n            <Video id={id} isMe={isMe} setVideoAspectRatio={setVideoAspectRatio} stream={stream} />\n            { isMe && <AudioVideoSetup style={settingsButtonStyle} /> }\n            { showOrderNumber &&\n                <span className=\"order-number\" style={orderNumberStyle}>{orderNumber}</span> }\n            { mode === CASCADE_STANDBY && isMe &&\n                <Countdown /> }\n        </div>\n    );\n};\n\nexport default VideoSquare;\n","import React, { useContext } from 'react';\nimport { Context } from './Store';\nimport VideoSquare from './VideoSquare';\n\nconst VideoGrid = () => {\n    const [state] = useContext(Context);\n    const { myId, myStream, order, streams } = state;\n\n    const numParticipants = Object.values(streams).length + 1;\n    // Add a new row when the number of participants exceeds the perfect square\n    // (2-4 partcipants have two columns, 5-9 have three columns, 10-16 have four columns, etc)\n    const cols = Math.ceil(Math.sqrt(numParticipants));\n    const rows = Math.ceil(numParticipants / cols);\n    const colPct = 100 / cols;\n    const rowPct = 100 / rows;\n    const gridStyles = {\n        gridTemplateColumns : `repeat(${cols}, ${colPct}%)`,\n        gridTemplateRows    : `repeat(${cols}, ${rowPct}%)`,\n    };\n\n    const getOrderProps = (id) => {\n        const orderNumber = order.indexOf(id) + 1;\n        const row = Math.ceil(orderNumber / cols);\n        const numBeforeRow = (row - 1) * cols;\n        const col = orderNumber - numBeforeRow;\n        return {\n            col,\n            orderNumber,\n            row\n        };\n    };\n\n    return (\n        <main className=\"video-grid\" style={gridStyles}>\n            <VideoSquare id={myId} isMe stream={myStream} {...getOrderProps(myId)} />\n            { Object.entries(streams).map(([id, stream]) =>\n                <VideoSquare key={id} id={id} stream={stream} {...getOrderProps(id)} />\n            ) }\n        </main>\n    );\n};\n\nexport default VideoGrid;\n","import React from 'react';\n\nconst Welcome = ({ onClick }) => {\n    return <>\n        <div>Welcome. Let's make the connections.</div>\n        <div>First, enable your audio and video. Before you click the button, put on headphones so there's no feedback!</div>\n        <button onClick={onClick}>\n            Let's go!\n        </button>\n    </>;\n};\n\nexport default Welcome;\n","import React, { useContext, useState } from 'react';\nimport FileList from './FileList';\nimport Navigation from './Navigation';\nimport { Context } from './Store';\nimport VideoGrid from './VideoGrid';\nimport Welcome from './Welcome';\n\nconst GreenRoom = () => {\n    const [state] = useContext(Context);\n    console.log('STATE', state);\n\n    const [showWelcome, setShowWelcome] = useState(true);\n    if (showWelcome) {\n        return <Welcome onClick={() => setShowWelcome(false)} />;\n    }\n\n    return <>\n        <VideoGrid />\n        <Navigation />\n        <FileList />\n    </>;\n};\n\nexport default GreenRoom;\n","import { useContext, useEffect } from 'react';\nimport { Context } from './Store';\nimport usePrevious from '../state/use-previous';\nimport { makeServer } from '../state/actions/server';\n\nconst ServerProvider = ({ children }) => {\n    const [state, dispatch] = useContext(Context);\n    const { myStream } = state;\n    const prevMyStream = usePrevious(myStream);\n    const params = new URLSearchParams(window.location.search);\n    const serverURL = params.get('server');\n    useEffect(() => {\n        // Start the server connection only when myStream is first initiated\n        if (myStream && !prevMyStream && serverURL) {\n            makeServer(serverURL, dispatch);\n        }\n    }, [myStream, prevMyStream, serverURL]);\n\n    if (!serverURL) {\n        return \"You have to have a server. Sorry, that's just the way it is.\";\n    }\n\n    return children;\n};\n\nexport default ServerProvider;\n","import React from 'react';\nimport { DndProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport GreenRoom from './GreenRoom';\nimport ServerProvider from './ServerProvider';\nimport Store from './Store';\nimport './App.css';\n\nconst App = () => {\n    // TODO: Splash to explain what it is, button to enter green room.\n    return (\n        <Store>\n            <ServerProvider>\n                <DndProvider backend={HTML5Backend}>\n                    <GreenRoom />\n                </DndProvider>\n            </ServerProvider>\n        </Store>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}