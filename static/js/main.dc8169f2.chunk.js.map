{"version":3,"sources":["state/modes.js","state/actions/server.js","state/actions/peers.js","state/actions/cascade.js","state/actions/recording.js","state/reducer.js","components/Store.jsx","components/VideoSquare/AudioVideoSetup.jsx","components/VideoSquare/Countdown.jsx","state/use-previous.js","components/VideoSquare/index.jsx","components/Welcome.jsx","components/GreenRoom.jsx","components/ServerProvider.jsx","components/App.js","serviceWorker.js","index.js"],"names":["READY","CASCADE_DONE","serverSend","sendAction","getState","server","send","JSON","stringify","makeServer","serverURL","dispatch","WebSocket","addEventListener","console","log","data","action","parse","type","changeMode","mode","newOrder","order","myId","oldOrder","peers","length","forEach","id","makeNewPeer","checkForNewPeers","fromId","signal","handlePeerSignal","setInterval","initiator","newId","myStream","peer","Peer","stream","on","forId","theirStream","cascade","audioTracks","getAudioTracks","videoTracks","getVideoTracks","myIndex","indexOf","slice","index","tracks","filter","Boolean","error","MediaStream","setStreamsFromCascade","streams","addStream","cloneMyStream","localTime","latency","toString","startTime","localLatencies","push","Date","now","roundTripLatency","latencies","pingPeer","getNextPeer","state","nextIndex","cloneTracks","getTracks","map","track","clone","newMode","recorder","cascadeStandbyTime","Object","values","removeStream","stopStreaming","nextPeer","gatherLatencyInfo","cascadeRecordingTime","myTracks","otherTracks","reduce","accumulator","cascadeStream","sendCascadeStream","start","stop","newMyStream","resetStreams","makeNewRecorder","MediaRecorder","mimeType","file","URL","createObjectURL","beforeRecordLatency","iAmInitiator","latencyInfo","numPongs","avgPongTime","avg","stdDevPongTime","stddev","numPings","avgPingTime","stdDevPingTime","signalingLatency","sendLatencyInfo","value","mean","sumOfSquares","Math","pow","sqrt","initialState","audioOutput","files","evilBoogiemanGlobalState","reduceAndSave","newState","deviceId","concat","newStreams","findIndex","otherId","newPeers","reducer","Context","createContext","Store","children","useReducer","Provider","audioCtx","window","AudioContext","webkitAudioContext","AudioVideoSetup","useContext","useState","devices","setDevices","showSetup","setShowSetup","audioInput","setAudioInput","videoInput","setVideoInput","setStream","a","navigator","mediaDevices","getUserMedia","audio","exact","autoGainControl","echoCancellation","noiseSuppression","video","createMediaStreamSource","connect","destination","useEffect","enumerateDevices","deviceList","findDevices","kinds","kindLabels","selectedDevices","devicesSorted","device","kind","className","deviceMap","devicesOfType","label","selectedDeviceId","setSelectedDeviceId","key","onChange","event","target","onClick","Countdown","number","setNumber","setTimeout","CASCADE_STANDBY_DURATION","usePrevious","prevRef","useRef","current","VideoSquare","numColumns","isMe","prevStream","prevAudioOutput","videoRef","useCallback","node","srcObject","src","setSinkId","dndRef","useDrag","item","canDrag","includes","collect","monitor","isDragging","connectDrag","useDrop","accept","drop","hover","hoveredOverId","theirIndex","connectDrop","orderNumber","row","ceil","gridStyle","gridColumn","gridRow","opacity","orderNumberStyle","backgroundColor","ref","style","autoPlay","muted","Welcome","GreenRoom","showWelcome","setShowWelcome","numParticipants","cols","rows","colPct","rowPct","gridStyles","gridTemplateColumns","gridTemplateRows","entries","startCascade","stopCascade","blobURL","download","href","ServerProvider","prevMyStream","URLSearchParams","location","search","get","App","DndProvider","backend","HTML5Backend","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dc8169f2.chunk.js","sourcesContent":["// User is connecting audio/video, hasn't connected to server\nexport const SETUP = 0;\n// Connected to server, waiting for initiator to press GO\nexport const READY = 1;\n// Cascade has started but recording hasn't started yet.\n// For initiator, there's a short countdown.\n// For everyone else, it's just waiting on the stream to arrive.\nexport const CASCADE_STANDBY = 2;\n// Cascade in progress!\n// This will end for the initiator when they press the DONE button\n// and for everyone else when the stream ends.\nexport const CASCADE_RECORDING = 3;\n// After the cascade is finished, restarting connections needs to be handled differently.\n// Upstream peers should only send their video downstream after the downstream peers have finished.\nexport const CASCADE_DONE = 4;\n","import { changeMode } from './cascade';\nimport { checkForNewPeers, handlePeerSignal } from './peers';\nimport { getState } from '../reducer';\n\nexport function serverSend(sendAction) {\n    const { server } = getState();\n    server.send(JSON.stringify(sendAction));\n}\n\nexport function makeServer(serverURL, dispatch) {\n    // We set the server connection here because\n    // we need access to dispatch in the event listeners.\n    const server = new WebSocket(serverURL);\n    server.addEventListener('open', () => console.log('opening socket'));\n    // TODO: handle failed connection\n    server.addEventListener('close', () => console.log('closing socket'));\n    server.addEventListener('error', () => console.log('socket error'));\n    server.addEventListener('message', ({ data }) => {\n        const action = JSON.parse(data);\n        console.log('ACTION (from server):', action);\n        // Some actions have side effects and should only happen once.\n        // (a single dispatch can call the reducer multiple times)\n        switch (action.type) {\n            case 'MODE_SET':\n                changeMode(action.mode, dispatch);\n                break;\n            case 'ORDER_SET':\n                checkForNewPeers(action, dispatch);\n                break;\n            case 'PEER_SIGNAL':\n                handlePeerSignal(action, dispatch);\n                break;\n            case 'pong':\n                break;\n            default:\n                // Otherwise, messages from the server\n                // are simply actions for the reducer.\n                dispatch(action);\n        }\n    });\n    setInterval(() => {\n        // Keep the connection alive\n        serverSend({ type : 'ping' });\n    }, 30000);\n    dispatch({\n        type : 'SERVER_SET',\n        server\n    });\n}\n","import Peer from 'simple-peer';\nimport { changeMode, cloneMyStream, setStreamsFromCascade } from './cascade';\nimport { addLatency, addLocalTimeDifference } from './recording';\nimport { serverSend } from './server';\nimport { CASCADE_DONE, CASCADE_RECORDING, CASCADE_STANDBY } from '../modes';\nimport { getState } from '../reducer';\n\nexport function checkForNewPeers(action, dispatch) {\n    const { order : newOrder } = action;\n    const { myId, order : oldOrder, peers } = getState();\n    dispatch(action);\n    // If receiving order for the first time,\n    // initialize a new peer for everyone else waiting\n    if (oldOrder.length === 0) {\n        newOrder.forEach((id) => {\n            if (id !== myId && !peers[id]) {\n                makeNewPeer(true, id, dispatch);\n            }\n        });\n    }\n}\n\nfunction makeNewPeer(initiator, newId, dispatch) {\n    const { myId, myStream } = getState();\n    const peer = new Peer({\n        initiator,\n        stream : myStream,\n    });\n\n    peer.on('signal', (signal) => {\n        serverSend({\n            type   : 'PEER_SIGNAL',\n            forId  : newId,\n            fromId : myId,\n            signal\n        });\n    });\n\n    peer.on('stream', (theirStream) => {\n        const { mode } = getState();\n        // In this mode, the stream is a cascade\n        // containing all the synchronized audio/video\n        // from all previous peers.\n        // Receiving it is a signal to start the cascade.\n        if (mode === CASCADE_STANDBY) {\n            setStreamsFromCascade(theirStream, dispatch);\n            changeMode(CASCADE_RECORDING, dispatch);\n        } else {\n            dispatch({\n                type   : 'STREAMS_ADD',\n                id     : newId,\n                stream : theirStream\n            });\n            // If a new stream is added while recording,\n            // that means the cascade is over\n            if (mode === CASCADE_RECORDING) {\n                changeMode(CASCADE_DONE, dispatch);\n            }\n            // After cascading, if this is sent from downstream,\n            // we need to reciprocate and reopen our stream as well\n            if (mode === CASCADE_DONE && peer.streams.length === 0) {\n                peer.addStream(cloneMyStream());\n            }\n        }\n    });\n\n    // The peer data channel is currently only used for sending\n    // pings to get an idea of the time it takes for a stream\n    // to reach the next person in the cascade\n    peer.on('data', (data) => {\n        const { mode } = getState();\n        const { startTime, type } = JSON.parse(data.toString());\n\n        // Send the ping right back\n        if (type === 'ping') {\n            addLocalTimeDifference(startTime)\n            peer.send(JSON.stringify({\n                type : 'pong',\n                startTime,\n            }));\n        }\n        // Keep pinging until recording starts\n        if (type === 'pong') {\n            const roundTripLatency = Date.now() - startTime;\n            addLatency(roundTripLatency)\n            if (mode === CASCADE_STANDBY) {\n                pingPeer(peer);\n            }\n        }\n    });\n\n    dispatch({\n        type : 'PEERS_ADD',\n        id   : newId,\n        peer\n    });\n    return peer;\n}\n\nexport function handlePeerSignal(action, dispatch) {\n    const { peers } = getState();\n    const { fromId, signal } = action;\n    const existingPeer = peers[fromId];\n    const peer = existingPeer || makeNewPeer(false, fromId, dispatch);\n    peer.signal(signal);\n}\n\nexport function getNextPeer(state) {\n    const { myId, order, peers } = getState();\n    const nextIndex = order.indexOf(myId) + 1;\n    const nextId = order[nextIndex];\n    return peers[nextId];\n}\n\nexport function pingPeer(peer) {\n    peer.send(JSON.stringify({\n        type      : 'ping',\n        startTime : Date.now()\n    }));\n}\n","import { getNextPeer } from './peers';\nimport { gatherLatencyInfo, setCascadeStandbyTime, setCascadeRecordingTime } from './recording';\nimport { serverSend } from './server';\nimport { CASCADE_DONE, CASCADE_RECORDING, CASCADE_STANDBY } from '../modes';\nimport { getState } from '../reducer';\n\nexport const CASCADE_STANDBY_DURATION = 6000; // milliseconds\n\nfunction cloneTracks(stream) {\n    return stream.getTracks().map((track) => track.clone());\n}\n\nexport function cloneMyStream() {\n    const { myStream } = getState();\n    const tracks = cloneTracks(myStream);\n    return new MediaStream(tracks);\n}\n\nexport function startCascade(dispatch) {\n    const { myId } = getState();\n    // dispatch MODE_SET and broadcast via server\n    // (server will set lock on new participants)\n    const mode = CASCADE_STANDBY;\n    const action = {\n        type   : 'MODE_SET',\n        fromId : myId,\n        mode\n    };\n    changeMode(mode, dispatch);\n    serverSend(action);\n}\n\nexport function changeMode(newMode, dispatch) {\n    dispatch({\n        type : 'MODE_SET',\n        mode : newMode\n    });\n\n    const { recorder } = getState();\n\n    switch (newMode) {\n        case CASCADE_STANDBY:\n            setCascadeStandbyTime();\n            stopStreaming();\n            gatherLatencyInfo();\n            break;\n        case CASCADE_RECORDING:\n            setCascadeRecordingTime();\n            sendCascadeStream();\n            recorder.start();\n            break;\n        case CASCADE_DONE:\n            recorder.stop();\n            resetStreams();\n            break;\n        default:\n    }\n}\n\nfunction stopStreaming() {\n    const { peers } = getState();\n    Object.values(peers).forEach((peer) => {\n        peer.removeStream(peer.streams[0]);\n    });\n}\n\nfunction sendCascadeStream() {\n    const { myId, myStream, order, streams } = getState();\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        const myIndex = order.indexOf(myId);\n        const myTracks = cloneTracks(myStream);\n        const otherTracks = order.slice(0, myIndex).reduce((accumulator, id) => {\n            return [\n                ...accumulator,\n                ...streams[id].getTracks()\n            ];\n        }, []);\n        const tracks = [\n            ...otherTracks,\n            ...myTracks\n        ];\n        // TODO: how to provide order?\n        // Maybe could peer.addTrack() one by one in order?\n        // Is that guaranteed to be received in the same order?\n        // Will there be A/V sync issues?\n        // Let's keep it TODO til we absolutely need do.\n        const cascadeStream = new MediaStream(tracks);\n        nextPeer.addStream(cascadeStream);\n    }\n}\n\nexport function setStreamsFromCascade(cascade, dispatch) {\n    const { myId, order } = getState();\n    const audioTracks = cascade.getAudioTracks();\n    const videoTracks = cascade.getVideoTracks();\n    const myIndex = order.indexOf(myId);\n    const beforeIds = order.slice(0, myIndex);\n    // For now, combine randomly\n    beforeIds.forEach((id, index) => {\n        const tracks = [\n            audioTracks[index],\n            videoTracks[index]\n        ].filter(Boolean);\n        if (tracks.length !== 2) {\n            console.error('Missing a track in the cascade');\n        }\n        dispatch({\n            type   : 'STREAMS_ADD',\n            id,\n            stream : new MediaStream(tracks)\n        });\n    });\n}\n\nfunction resetStreams() {\n    const { myId, order, peers } = getState();\n\n    // Adding the same MediaStream again causes an error\n    // so we have to clone the tracks\n    // and wrap them in a new MediaStream\n    const newMyStream = cloneMyStream();\n\n    // Signal to the next one it's done\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        nextPeer.removeStream(nextPeer.streams[0]);\n        nextPeer.addStream(newMyStream);\n    }\n\n    // Send live video back to everyone upstream\n    const myIndex = order.indexOf(myId);\n    const beforeIds = order.slice(0, myIndex);\n    beforeIds.forEach((id) => {\n        const peer = peers[id];\n        peer.addStream(newMyStream);\n    });\n}\n\nexport function stopCascade(dispatch) {\n    changeMode(CASCADE_DONE, dispatch);\n}\n","import { CASCADE_STANDBY_DURATION } from './cascade';\nimport { getNextPeer, pingPeer } from './peers';\nimport { serverSend } from './server';\nimport { getState } from '../reducer';\n\nexport function makeNewRecorder(stream, dispatch) {\n    // TODO: use specific codecs. check browser compatibility.\n    const recorder = new MediaRecorder(stream, { mimeType : 'video/webm' });\n    recorder.addEventListener('dataavailable', ({ data }) => {\n        dispatch({\n            type : 'FILES_ADD',\n            file : URL.createObjectURL(data),\n        });\n    });\n    recorder.addEventListener('start', () => {\n        beforeRecordLatency = Date.now() - cascadeRecordingTime;\n    });\n    recorder.addEventListener('stop', () => {\n        sendLatencyInfo();\n    })\n    return recorder;\n}\n\n// The time it takes for a ping to get back to its sender\nlet latencies = [];\nexport function addLatency(latency) {\n    latencies.push(latency);\n}\n\n// The difference between the time at the sender and the local time when it's received.\n// We can compare this value with an estimated one-way trip time\n// to see the time offset between the two machines (hopefully).\nlet localLatencies = [];\nexport function addLocalTimeDifference(localTime) {\n    localLatencies.push(Date.now() - localTime);\n}\n\n// The time CASCADE_STANDBY starts\nlet cascadeStandbyTime;\nexport function setCascadeStandbyTime() {\n    cascadeStandbyTime = Date.now();\n}\n\n// The time CASCADE_RECORDING starts\nlet cascadeRecordingTime;\nexport function setCascadeRecordingTime() {\n    cascadeRecordingTime = Date.now();\n}\n\nlet beforeRecordLatency;\n\n// This starts a series of pings that lasts from standby until recording starts\n// to get an idea of the latencies between each connection in the cascade.\n// We use it later to stitch together the video.\nexport function gatherLatencyInfo() {\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        pingPeer(nextPeer);\n    }\n}\n\nexport function sendLatencyInfo() {\n    const { iAmInitiator, myId } = getState();\n\n    let latencyInfo = {\n        type   : 'latency_info',\n        fromId : myId\n    };\n\n    // No pongs at the end of the cascade\n    if (getNextPeer()) {\n        const numPongs = latencies.length;\n        const avgPongTime = avg(latencies);\n        const stdDevPongTime = stddev(latencies, avgPongTime);\n        latencyInfo = {\n            ...latencyInfo,\n            avgPongTime,\n            numPongs,\n            stdDevPongTime\n        };\n    }\n\n    // No pings for initiator\n    if (!iAmInitiator) {\n        const numPings = localLatencies.length;\n        const avgPingTime = avg(localLatencies);\n        const stdDevPingTime = stddev(localLatencies, avgPingTime);\n        const signalingLatency = cascadeRecordingTime - cascadeStandbyTime - CASCADE_STANDBY_DURATION;\n        latencyInfo = {\n            ...latencyInfo,\n            avgPingTime,\n            beforeRecordLatency,\n            numPings,\n            signalingLatency,\n            stdDevPingTime,\n        };\n    }\n\n    serverSend(latencyInfo);\n    latencies = [];\n    localLatencies = [];\n}\n\nfunction avg(values) {\n    const sum = values.reduce((accumulator, value) => accumulator + value, 0);\n    return sum / values.length;\n}\n\nfunction stddev(values, mean) {\n    const sumOfSquares = values.reduce(\n        (accumulator, value) => accumulator + Math.pow(value - mean, 2),\n        0\n    );\n    return Math.sqrt(sumOfSquares / (values.length - 1));\n}\n","import { CASCADE_STANDBY, READY, SETUP } from './modes';\nimport { makeNewRecorder } from './actions/recording';\n\nexport const initialState = {\n    // This needs to be stored here so all video elements output sound to the same place.\n    audioOutput   : null,\n    // Blob URLs of the recorded myStream (not combined with other peers)\n    files         : [],\n    // The initiator is whoever is in the first spot.\n    // They have all the power. They get to rearrange the order of the cascade.\n    // And they press the big GO button.\n    iAmInitiator  : false,\n    mode          : SETUP,\n    // UUID generated by the server\n    myId          : null,\n    // MediaStream object containing audio/video\n    myStream      : null,\n    // The order of the participants - how the audios cascades\n    order         : [],\n    // Direct connections to other participants via WebRTC that provide the streams\n    // Keys are the server-generated IDs\n    peers         : {},\n    // Records myStream during cascade\n    recorder      : null,\n    // WebSocket server connection to send the initial WebRTC signals (and a biiiit more after)\n    server        : null,\n    // MediaStream objects for remote peers\n    // Keys are the server-generated IDs\n    streams       : {}\n};\n\nfunction reducer(state, action) {\n    console.log('ACTION', action);\n    const { files, mode, myId, myStream, peers, streams } = state;\n    switch (action.type) {\n        case 'AUDIO_OUTPUT_SET':\n            return {\n                ...state,\n                audioOutput : action.deviceId\n            };\n        case 'FILES_ADD':\n            return {\n                ...state,\n                files : files.concat(action.file)\n            };\n        case 'MODE_SET': {\n            const { mode : newMode } = action;\n            // When starting the cascade, remove the streams\n            // (which will be stopped shortly)\n            const newStreams = newMode === CASCADE_STANDBY ? {} : streams;\n            return {\n                ...state,\n                mode    : newMode,\n                streams : newStreams\n            };\n        }\n        case 'MY_ID_SET':\n            return {\n                ...state,\n                myId : action.id\n            };\n        case 'MY_STREAM_SET': {\n            // Move from setup mode when myStream is first set\n            const newMode = myStream ? mode : READY;\n            return {\n                ...state,\n                mode     : newMode,\n                myStream : action.stream,\n                recorder : makeNewRecorder(action.stream, action.dispatch)\n            };\n        }\n        case 'ORDER_SET': {\n            const { order : newOrder } = action;\n            const myOrderIndex = newOrder.findIndex((otherId) => myId === otherId);\n            const iAmInitiator = myOrderIndex === 0;\n            // If an id has been taken away from the order, remove the peers and streams\n            const [newPeers, newStreams] = newOrder.reduce((accumulator, id) => {\n                if (id === myId) return accumulator;\n                return [\n                    {\n                        ...accumulator[0],\n                        [id] : peers[id]\n                    },\n                    {\n                        ...accumulator[1],\n                        [id] : streams[id]\n                    }\n                ]\n            }, [{}, {}]);\n            return {\n                ...state,\n                iAmInitiator,\n                order   : newOrder,\n                peers   : newPeers,\n                streams : newStreams\n            };\n        }\n        case 'PEERS_ADD':\n            return {\n                ...state,\n                peers : {\n                    ...peers,\n                    [action.id] : action.peer\n                }\n            };\n        case 'SERVER_SET':\n            return {\n                ...state,\n                server : action.server\n            };\n        case 'STREAMS_ADD':\n            return {\n                ...state,\n                streams : {\n                    ...streams,\n                    [action.id] : action.stream\n                }\n            };\n        default: {\n            console.error('Unknown action:', action);\n            return state;\n        }\n    }\n};\n\nlet evilBoogiemanGlobalState = {};\nexport function getState() {\n    return evilBoogiemanGlobalState;\n}\n\nexport default function reduceAndSave(state, action) {\n    const newState = reducer(state, action);\n    evilBoogiemanGlobalState = newState;\n    return newState;\n}\n","import React, { createContext, useReducer } from 'react';\nimport reducer, { initialState } from '../state/reducer';\n\nconst Store = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    return (\n        <Context.Provider value={[state, dispatch]}>\n            {children}\n        </Context.Provider>\n    )\n};\n\nexport const Context = createContext(initialState);\nexport default Store;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Context } from '../Store';\n\n// Safari, what the hell.\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst audioCtx = new AudioContext();\n\nconst AudioVideoSetup = () => {\n    const [state, dispatch] = useContext(Context);\n    const { audioOutput, myStream, peers } = state;\n    const [devices, setDevices] = useState([]);\n    const [showSetup, setShowSetup] = useState(false);\n    const [audioInput, setAudioInput] = useState(null);\n    const [videoInput, setVideoInput] = useState(null);\n    const setAudioOutput = (deviceId) => {\n        dispatch({\n            type : 'AUDIO_OUTPUT_SET',\n            deviceId\n        });\n    }\n\n    const setStream = async () => {\n        const stream = await navigator.mediaDevices.getUserMedia({\n            audio : {\n                deviceId         : audioInput && {\n                    exact : audioInput\n                },\n                // These cause latency\n                autoGainControl  : { exact : false },\n                echoCancellation : false,\n                noiseSuppression : { exact : false },\n            },\n            video : {\n                deviceId : videoInput && {\n                    exact : videoInput\n                }\n            }\n        });\n        if (myStream) {\n            myStream.getTracks().forEach((track) => track.stop());\n            Object.values(peers).forEach((peer) => {\n                peer.removeStream(myStream)\n                peer.addStream(stream);\n            });\n        }\n        // Strangely, there is a delay when hearing the audio via the video element.\n        // But the delay is noticeably shorter when using the Web Audio API...\n        // (But only in Chrome?)\n        const source = audioCtx.createMediaStreamSource(stream);\n        // TODO: set output properly. See:\n        // https://stackoverflow.com/questions/41863094/how-to-select-destination-output-device-using-web-audio-api\n        source.connect(audioCtx.destination);\n        dispatch({\n            type : 'MY_STREAM_SET',\n            // Need to dispatch in the recorder ondataavailable event listener\n            dispatch,\n            stream\n        });\n    };\n\n    useEffect(() => {\n        // On Safari, enumerateDevices only works after getUserMedia is called.\n        // So wait for that to happen before populating the dropdowns.\n        // (Also, missing things even after it's called...)\n        if (myStream && showSetup) {\n            const findDevices = async () => {\n                const deviceList = await navigator.mediaDevices.enumerateDevices();\n                setDevices(deviceList);\n            };\n            findDevices();\n        }\n    }, [myStream, showSetup]);\n\n    useEffect(() => {\n        // Called on the first render\n        // (and any time audioInput or videoInput change)\n        setStream();\n    }, [audioInput, videoInput]);\n\n    const kinds = ['audioinput', 'audiooutput', 'videoinput'];\n    const kindLabels = ['Audio Input', 'Audio Output', 'Video Input'];\n    const selectedDevices = [\n        [audioInput, setAudioInput],\n        [audioOutput, setAudioOutput],\n        [videoInput, setVideoInput]\n    ];\n    // Sort the available devices into the three buckets\n    const devicesSorted = devices.reduce((accumulator, device) => {\n        const { deviceId, kind } = device;\n        const index = kinds.indexOf(kind);\n        return [\n            ...accumulator.slice(0, index),\n            {\n                ...accumulator[index],\n                [deviceId] : device,\n            },\n            ...accumulator.slice(index + 1)\n        ]\n    }, [{}, {}, {}]);\n\n    return (\n        <section className=\"av-setup\">\n            { showSetup ? <>\n                { devicesSorted.map((deviceMap, index) => {\n                    const devicesOfType = Object.values(deviceMap);\n                    if (devicesOfType.length === 0) return null;\n                    const label = kindLabels[index];\n                    const [selectedDeviceId, setSelectedDeviceId] = selectedDevices[index];\n                    return (\n                        <label key={label}>\n                            {label}\n                            <select\n                                onChange={(event) => setSelectedDeviceId(event.target.value)}\n                                value={selectedDeviceId || 'default'}\n                            >\n                                { devicesOfType.map(({ deviceId, label }) => (\n                                    <option key={deviceId} value={deviceId}>{label}</option>\n                                )) }\n                            </select>\n                        </label>\n                    );\n                }) }\n                <button onClick={() => setShowSetup(false)}>x</button>\n            </> :\n            <button onClick={() => setShowSetup(true)}>Audio/Video settings</button> }\n        </section>\n    );\n};\n\nexport default AudioVideoSetup;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Context } from '../Store';\nimport { CASCADE_STANDBY_DURATION, changeMode } from '../../state/actions/cascade';\nimport { CASCADE_RECORDING } from '../../state/modes';\n\nconst Countdown = () => {\n    // Counts down to zero from here\n    const countdownStart = 3;\n    const [, dispatch] = useContext(Context);\n    const [number, setNumber] = useState(countdownStart);\n    useEffect(() => {\n        if (number > 0) {\n            setTimeout(() => {\n                setNumber(number - 1);\n            }, CASCADE_STANDBY_DURATION / countdownStart);\n        } else {\n            changeMode(CASCADE_RECORDING, dispatch);\n        }\n    }, [number]);\n    return <span className=\"countdown\">{number}</span>\n};\n\nexport default Countdown;\n","import { useEffect, useRef } from 'react';\n\nexport default function usePrevious(value) {\n    const prevRef = useRef();\n    useEffect(() => {\n        prevRef.current = value;\n    }, [value]);\n    return prevRef.current;\n}\n","import React, { useCallback, useContext, useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport AudioVideoSetup from './AudioVideoSetup';\nimport Countdown from './Countdown';\nimport { Context } from '../Store';\nimport usePrevious from '../../state/use-previous';\nimport { CASCADE_DONE, CASCADE_RECORDING, CASCADE_STANDBY, READY } from '../../state/modes';\nimport { serverSend } from '../../state/actions/server';\n\nconst VideoSquare = ({ id, numColumns, stream }) => {\n    const [state, dispatch] = useContext(Context);\n    const { audioOutput, iAmInitiator, mode, myId, order } = state;\n    const isMe = id === myId;\n    const prevStream = usePrevious(stream);\n    const prevAudioOutput = usePrevious(audioOutput);\n\n    const videoRef = useCallback((node) => {\n        if (node) {\n            if (stream !== prevStream) {\n                if ('srcObject' in node) {\n                    node.srcObject = stream;\n                } else {\n                    node.src = URL.createObjectURL(stream);\n                }\n            }\n\n            if (audioOutput && audioOutput !== prevAudioOutput) {\n                // TODO: check if available, alert user if not\n                // (Firefox needs setting enabled)\n                // (Safari is ?)\n                node.setSinkId(audioOutput);\n            }\n        }\n    }, [audioOutput, stream]);\n\n    const dndRef = useRef(null);\n    const [{ isDragging }, connectDrag] = useDrag({\n        item    : { id, type : 'participant' },\n        canDrag : () => iAmInitiator && [READY, CASCADE_DONE].includes(mode),\n        collect : (monitor) => ({ isDragging : monitor.isDragging() })\n    });\n    const [, connectDrop] = useDrop({\n        accept : 'participant',\n        drop   : (item) => {\n            serverSend({\n                type   : 'ORDER_SET',\n                fromId : myId,\n                order,\n            });\n        },\n        hover  : ({ id : hoveredOverId }) => {\n            if (hoveredOverId !== id) {\n                const myIndex = order.indexOf(id);\n                const theirIndex = order.indexOf(hoveredOverId);\n                const newOrder = [...order];\n                newOrder[myIndex] = hoveredOverId;\n                newOrder[theirIndex] = id;\n                dispatch({\n                    type  : 'ORDER_SET',\n                    order : newOrder\n                });\n            }\n        }\n    });\n    connectDrag(dndRef);\n    connectDrop(dndRef);\n\n    const orderNumber = mode === CASCADE_STANDBY ? 1 : order.indexOf(id) + 1;\n    const row = Math.ceil(orderNumber / numColumns);\n    const numBeforeRow = (row - 1) * numColumns;\n    const col = orderNumber - numBeforeRow;\n    const gridStyle = {\n        gridColumn : `${col} / span 1`,\n        gridRow    : `${row} / span 1`,\n        opacity    : isDragging ? 0.5 : 1,\n    };\n    const orderNumberStyle = {\n        backgroundColor : mode === CASCADE_STANDBY ? 'yellow' : (\n            mode === CASCADE_RECORDING ? 'red' : 'green'\n        )\n    };\n\n    return (\n        <div ref={dndRef} className=\"video-draggable\" style={gridStyle}>\n            { stream && <video autoPlay muted={isMe} ref={videoRef} /> }\n            { isMe && <AudioVideoSetup /> }\n            { orderNumber > 0 &&\n                <span className=\"order-number\" style={orderNumberStyle}>{orderNumber}</span> }\n            { mode === CASCADE_STANDBY && isMe && iAmInitiator &&\n                <Countdown /> }\n        </div>\n    );\n};\n\nexport default VideoSquare;\n","import React from 'react';\n\nconst Welcome = ({ onClick }) => {\n    return <>\n        <div>Welcome. Let's make the connections.</div>\n        <div>First, enable your audio and video. Before you click the button, put on headphones so there's no feedback!</div>\n        <button onClick={onClick}>\n            Let's go!\n        </button>\n    </>;\n};\n\nexport default Welcome;\n","import React, { useContext, useState } from 'react';\nimport { Context } from './Store';\nimport VideoSquare from './VideoSquare';\nimport Welcome from './Welcome';\nimport { startCascade, stopCascade } from '../state/actions/cascade';\nimport { CASCADE_DONE, CASCADE_RECORDING, READY } from '../state/modes';\n\nconst GreenRoom = () => {\n    const [state, dispatch] = useContext(Context);\n    console.log('STATE', state);\n    const { files, iAmInitiator, mode, myId, myStream, streams } = state;\n    const [showWelcome, setShowWelcome] = useState(true);\n\n    if (showWelcome) {\n        return <Welcome onClick={() => setShowWelcome(false)} />;\n    }\n\n    const numParticipants = Object.values(streams).length + 1;\n    // Add a new row when the number of participants exceeds the perfect square\n    // (2-4 partcipants have two columns, 5-9 have three columns, 10-16 have four columns, etc)\n    const cols = Math.ceil(Math.sqrt(numParticipants));\n    const rows = Math.ceil(numParticipants / cols);\n    const colPct = 100 / cols;\n    const rowPct = 100 / rows;\n    const gridStyles = {\n        gridTemplateColumns : `repeat(${cols}, ${colPct}%)`,\n        gridTemplateRows    : `repeat(${cols}, ${rowPct}%)`,\n    };\n\n    return <>\n        <main className=\"video-grid\" style={gridStyles}>\n            <VideoSquare id={myId} numColumns={cols} stream={myStream} />\n            { Object.entries(streams).map(([id, stream]) =>\n                <VideoSquare key={id} id={id} numColumns={cols} stream={stream} />\n            ) }\n        </main>\n        <nav>\n            { [READY, CASCADE_DONE].includes(mode) && iAmInitiator && numParticipants > 1 &&\n                <button\n                    className=\"big-button\"\n                    onClick={() => startCascade(dispatch)}\n                >\n                    GO\n                </button> }\n            { mode === CASCADE_RECORDING && iAmInitiator &&\n                <button\n                    className=\"big-button\"\n                    onClick={() => stopCascade(dispatch)}\n                >\n                    STOP\n                </button> }\n        </nav>\n        <aside>\n            { files.map((blobURL, index) =>\n                <a\n                    key={blobURL}\n                    download={`cascade${index + 1}.webm`}\n                    href={blobURL}\n                >\n                    Download cascade {index + 1} video\n                </a>) }\n        </aside>\n    </>;\n};\n\nexport default GreenRoom;\n","import { useContext, useEffect } from 'react';\nimport { Context } from './Store';\nimport usePrevious from '../state/use-previous';\nimport { makeServer } from '../state/actions/server';\n\nconst ServerProvider = ({ children }) => {\n    const [state, dispatch] = useContext(Context);\n    const { myStream } = state;\n    const prevMyStream = usePrevious(myStream);\n    const params = new URLSearchParams(window.location.search);\n    const serverURL = params.get('server');\n    useEffect(() => {\n        // Start the server connection only when myStream is first initiated\n        if (myStream && !prevMyStream && serverURL) {\n            makeServer(serverURL, dispatch);\n        }\n    }, [myStream, prevMyStream, serverURL]);\n\n    if (!serverURL) {\n        return \"You have to have a server. Sorry, that's just the way it is.\";\n    }\n\n    return children;\n};\n\nexport default ServerProvider;\n","import React from 'react';\nimport { DndProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport GreenRoom from './GreenRoom';\nimport ServerProvider from './ServerProvider';\nimport Store from './Store';\nimport './App.css';\n\nconst App = () => {\n    // TODO: Splash to explain what it is, button to enter green room.\n    return (\n        <Store>\n            <ServerProvider>\n                <DndProvider backend={HTML5Backend}>\n                    <GreenRoom />\n                </DndProvider>\n            </ServerProvider>\n        </Store>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}