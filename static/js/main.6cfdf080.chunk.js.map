{"version":3,"sources":["state/actions/server.js","state/actions/peers.js","state/actions/cascade.js","state/actions/recording.js","state/reducer.js","components/Store.jsx","components/FileList.jsx","components/Navigation.jsx","components/VideoSquare/AudioVideoSetup.jsx","components/VideoSquare/Countdown.jsx","state/use-previous.js","components/VideoSquare/Video.jsx","components/VideoSquare/index.jsx","components/VideoGrid.jsx","components/Welcome.jsx","components/GreenRoom.jsx","components/ServerProvider.jsx","components/App.js","serviceWorker.js","index.js"],"names":["serverSend","sendAction","getState","server","send","JSON","stringify","makeServer","serverURL","dispatch","WebSocket","addEventListener","console","log","data","action","parse","type","changeMode","mode","newOrder","order","myId","oldOrder","peers","streams","length","forEach","id","makeNewPeer","reduce","accumulator","includes","concat","cleanStream","destroy","handleOrderSet","fromId","signal","handlePeerSignal","setInterval","initiator","peerId","myStream","sendStream","clone","peer","Peer","stream","_sendStreams","on","forId","theirStream","CASCADE_STANDBY","CASCADE_DONE","addStream","getUpstreamIds","slice","reverse","find","upstreamId","connectBlipListener","nextPeer","getNextPeer","addCascadedStream","toString","error","push","popStream","pop","removeStream","recorder","cascadeRecordingTime","beforeRecordLatency","makeRecorder","MediaRecorder","mimeType","files","blobURL","URL","createObjectURL","fileName","indexOf","a","Date","now","sendLatencyInfo","audioCtx","window","AudioContext","webkitAudioContext","analyzer","createAnalyser","fftSize","myAudioSource","myAudioDestination","freqResolution","sampleRate","timeResolution","Math","floor","freqArray","Uint8Array","frequencyBinCount","makeBlipStream","createMediaStreamSource","connect","destination","createMediaStreamDestination","blipStream","getVideoTracks","track","addTrack","endFreqBinIndex","listenToBlips","blippin","intervalId","getByteFrequencyData","maxEnergy","maxEnergyIndex","freqBinEnergy","index","clearInterval","CASCADE_RECORDING","iAmInitiator","READY","state","nextIndex","getTracks","stop","newMode","myIndex","getDownstreamIds","prevId","prevStream","setupCascade","start","cascadeModeSet","resetStreams","startCascade","disconnect","initialState","audioOutput","evilBoogiemanGlobalState","reduceAndSave","newState","deviceId","justPrevStream","newStreams","findIndex","otherId","newPeers","reducer","Context","createContext","Store","children","useReducer","Provider","value","FileList","useContext","map","key","download","href","Navigation","className","onClick","stopCascade","AudioVideoSetup","style","useState","devices","setDevices","showSetup","setShowSetup","audioInput","setAudioInput","videoInput","setVideoInput","useEffect","navigator","mediaDevices","enumerateDevices","deviceList","findDevices","getUserMedia","audio","exact","autoGainControl","echoCancellation","noiseSuppression","video","Object","values","setStream","kinds","kindLabels","selectedDevices","devicesSorted","device","kind","deviceMap","devicesOfType","label","selectedDeviceId","setSelectedDeviceId","onChange","event","target","Countdown","number","setNumber","setTimeout","newNumber","frequency","blipper","createOscillator","gainNode","createGain","gain","currentTime","sendBlip","END_FREQ","CASCADE_STANDBY_DURATION","usePrevious","prevRef","useRef","current","Video","isMe","setVideoAspectRatio","prevAudioOutput","videoRef","useCallback","node","videoWidth","videoHeight","srcObject","src","setSinkId","autoPlay","muted","ref","VideoSquare","col","orderNumber","numColumns","row","dndRef","useDrag","item","canDrag","collect","monitor","isDragging","connectDrag","useDrop","accept","drop","hover","hoveredOverId","theirIndex","connectDrop","gridColumn","gridRow","opacity","videoAspectRatio","left","setLeft","top","setTop","element","videoResizeObserver","ResizeObserver","entries","entry","contentRect","width","height","observe","showOrderNumber","orderNumberStyle","backgroundColor","settingsButtonStyle","right","VideoGrid","numParticipants","cols","ceil","sqrt","rows","colPct","rowPct","gridStyles","gridTemplateColumns","gridTemplateRows","getOrderProps","Welcome","GreenRoom","showWelcome","setShowWelcome","ServerProvider","prevMyStream","URLSearchParams","location","search","get","App","DndProvider","backend","HTML5Backend","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6cfdf080.chunk.js","sourcesContent":["import { changeMode } from './cascade';\nimport { handleOrderSet, handlePeerSignal } from './peers';\nimport { getState } from '../reducer';\n\nexport function serverSend(sendAction) {\n    const { server } = getState();\n    server.send(JSON.stringify(sendAction));\n}\n\nexport function makeServer(serverURL, dispatch) {\n    // We set the server connection here because\n    // we need access to dispatch in the event listeners.\n    const server = new WebSocket(serverURL);\n    server.addEventListener('open', () => console.log('opening socket'));\n    // TODO: handle failed connection\n    server.addEventListener('close', () => console.log('closing socket'));\n    server.addEventListener('error', () => console.log('socket error'));\n    server.addEventListener('message', ({ data }) => {\n        const action = JSON.parse(data);\n        console.log('ACTION (from server):', action);\n        // Some actions have side effects and should only happen once.\n        // (a single dispatch can call the reducer multiple times)\n        switch (action.type) {\n            case 'MODE_SET':\n                changeMode(action.mode, dispatch);\n                break;\n            case 'ORDER_SET':\n                handleOrderSet(action, dispatch);\n                break;\n            case 'PEER_SIGNAL':\n                handlePeerSignal(action, dispatch);\n                break;\n            case 'pong':\n                break;\n            default:\n                // Otherwise, messages from the server\n                // are simply actions for the reducer.\n                dispatch(action);\n        }\n    });\n    setInterval(() => {\n        // Keep the connection alive\n        serverSend({ type : 'ping' });\n    }, 30000);\n    dispatch({\n        type : 'SERVER_SET',\n        server\n    });\n}\n","import Peer from 'simple-peer';\nimport {\n    CASCADE_DONE,\n    CASCADE_STANDBY,\n    addCascadedStream,\n    changeMode,\n    cleanStream\n} from './cascade';\nimport { serverSend } from './server';\nimport { getState } from '../reducer';\n\nexport function handleOrderSet(action, dispatch) {\n    const { order : newOrder } = action;\n    const { myId, order : oldOrder, peers, streams } = getState();\n    dispatch(action);\n\n    // If receiving order for the first time,\n    // initialize a new peer for everyone else waiting\n    if (oldOrder.length === 0) {\n        newOrder.forEach((id) => {\n            if (id !== myId && !peers[id]) {\n                makeNewPeer(true, id, dispatch);\n            }\n        });\n    }\n\n    // If peers have been removed, clean up the connections\n    const removedPeers = oldOrder.reduce((accumulator, id) => {\n        if (newOrder.includes(id)) return accumulator;\n        return accumulator.concat(id);\n    }, []);\n    removedPeers.forEach((id) => {\n        cleanStream(streams[id]);\n        peers[id].destroy();\n    });\n}\n\nfunction makeNewPeer(initiator, peerId, dispatch) {\n    const { myId, myStream } = getState();\n    // Clone this because we'll stop the tracks during cascade,\n    // which would stop our view of ourself\n    const sendStream = myStream.clone();\n    const peer = new Peer({\n        initiator,\n        stream : sendStream\n    });\n    // Peer doesn't keep track of the sending streams.\n    // We're doing a bunch of stream cloning\n    // (because you can't send the same stream more than once :shrug:)\n    // so we need to keep track of the streams that were sent.\n    peer._sendStreams = [sendStream];\n\n    peer.on('signal', (signal) => {\n        serverSend({\n            type   : 'PEER_SIGNAL',\n            forId  : peerId,\n            fromId : myId,\n            signal\n        });\n    });\n\n    peer.on('stream', (theirStream) => {\n        const { mode } = getState();\n        if (mode === CASCADE_STANDBY) {\n            addCascadedStream(theirStream, dispatch);\n            return;\n        }\n        dispatch({\n            type   : 'STREAMS_ADD',\n            id     : peerId,\n            stream : theirStream\n        });\n        // After cascading, if this is sent from downstream,\n        // we need to reciprocate and reopen our stream as well\n        // (except for the next peer, which we're already streaming to)\n        if (mode === CASCADE_DONE && peer._sendStreams.length === 0) {\n            addStream(peer, myStream.clone());\n        }\n    });\n\n    // The peer data channel is currently only used\n    // for propagating mode changes down the cascade\n    peer.on('data', (data) => {\n        const { mode, type } = JSON.parse(data.toString());\n        if (type === 'MODE_SET') {\n            changeMode(mode, dispatch);\n            return;\n        }\n        console.error(`Unknown action \"${type}\" sent thru peer`);\n    });\n\n    dispatch({\n        type : 'PEERS_ADD',\n        id   : peerId,\n        peer\n    });\n    return peer;\n}\n\nexport function handlePeerSignal(action, dispatch) {\n    const { peers } = getState();\n    const { fromId, signal } = action;\n    const existingPeer = peers[fromId];\n    const peer = existingPeer || makeNewPeer(false, fromId, dispatch);\n    peer.signal(signal);\n}\n\nexport function addStream(peer, stream) {\n    peer.addStream(stream);\n    peer._sendStreams.push(stream);\n}\n\nexport function popStream(peer) {\n    const stream = peer._sendStreams.pop();\n    cleanStream(stream);\n    peer.removeStream(stream);\n    return stream;\n}\n","import { addStream, popStream } from './peers';\nimport {\n    connectBlipListener,\n    listenToBlips,\n    silenceAudioOutput,\n    startRecording,\n    stopRecording\n} from './recording';\nimport { serverSend } from './server';\nimport { getState } from '../reducer';\n\n// User is connecting audio/video, hasn't connected to server\nexport const SETUP = 0;\n// Connected to server, waiting for initiator to press GO\nexport const READY = 1;\n// Cascade has started but recording hasn't started yet.\n// For initiator, there's a short countdown.\n// For everyone else, it's just waiting on the stream to arrive.\nexport const CASCADE_STANDBY = 2;\n// Cascade in progress!\n// This will end for the initiator when they press the DONE button\n// and for everyone else when the stream ends.\nexport const CASCADE_RECORDING = 3;\n// After the cascade is finished, restarting connections needs to be handled differently.\n// Upstream peers should only send their video downstream after the downstream peers have finished.\nexport const CASCADE_DONE = 4;\n\nfunction getNextPeer(state) {\n    const { myId, order, peers } = getState();\n    const nextIndex = order.indexOf(myId) + 1;\n    const nextId = order[nextIndex];\n    return peers[nextId];\n}\n\nexport function cleanStream(stream) {\n    stream.getTracks().forEach((track) => track.stop());\n}\n\nfunction cascadeModeSet(mode) {\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        nextPeer.send(JSON.stringify({\n            type : 'MODE_SET',\n            mode\n        }));\n    }\n}\n\nexport function changeMode(newMode, dispatch) {\n    dispatch({\n        type : 'MODE_SET',\n        mode : newMode\n    });\n\n    switch (newMode) {\n        case CASCADE_STANDBY:\n            setupCascade();\n            listenToBlips(dispatch);\n            break;\n        case CASCADE_RECORDING:\n            startRecording();\n            break;\n        case CASCADE_DONE:\n            stopRecording();\n            cascadeModeSet(CASCADE_DONE);\n            resetStreams();\n            break;\n        default:\n    }\n}\n\nexport function startCascade(dispatch) {\n    const { myId } = getState();\n    // dispatch MODE_SET and broadcast via server\n    // (server will set lock on new participants)\n    const mode = CASCADE_STANDBY;\n    const action = {\n        type   : 'MODE_SET',\n        fromId : myId,\n        mode\n    };\n    serverSend(action);\n    changeMode(mode, dispatch);\n    silenceAudioOutput();\n}\n\nexport function getDownstreamIds() {\n    const { myId, order } = getState();\n    const myIndex = order.indexOf(myId);\n    return order.slice(myIndex + 1);\n}\n\nexport function getUpstreamIds() {\n    const { myId, order } = getState();\n    const myIndex = order.indexOf(myId);\n    return order.slice(0, myIndex);\n}\n\nfunction setupCascade() {\n    const { myId, order, peers, streams } = getState();\n\n    // Disconnect stream from all upstream peers\n    // and all downstream peers except the one right after\n    const disconnectIds = [\n        ...getUpstreamIds(),\n        ...getDownstreamIds().slice(1)\n    ];\n    disconnectIds.forEach((id) => {\n        const peer = peers[id];\n        // There should only be one stream per peer in this stage\n        popStream(peer);\n    });\n\n    // To start, send the stream from the previous peer\n    // to the next peer in the cascade.\n    // The rest of the streams will come with the peer stream event,\n    // which calls addCascadedStream()\n    const nextPeer = getNextPeer();\n    const myIndex = order.indexOf(myId);\n    const prevId = order[myIndex - 1];\n    const prevStream = streams[prevId];\n    if (prevStream && nextPeer) {\n        addStream(nextPeer, prevStream.clone());\n    }\n\n    // If the previous peer is the initiator,\n    // listen to blips to signal start recording\n    if (prevId === order[0]) {\n        connectBlipListener(prevStream);\n    }\n}\n\nexport function addCascadedStream(stream, dispatch) {\n    const { order, streams } = getState();\n\n    // Find the next upstream id from here that doesn't have a stream set\n    const upstreamIds = getUpstreamIds().slice(0, -1).reverse();\n    const id = upstreamIds.find((upstreamId) => !streams[upstreamId]);\n    dispatch({\n        type : 'STREAMS_ADD',\n        id,\n        stream,\n    });\n\n    // If the stream is from the initiator,\n    // listen to the blips to signal start recording\n    if (id === order[0]) {\n        connectBlipListener(stream);\n    }\n\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        addStream(nextPeer, stream);\n    }\n}\n\nexport function stopCascade(dispatch) {\n    changeMode(CASCADE_DONE, dispatch);\n}\n\nfunction resetStreams() {\n    const { myStream, peers } = getState();\n\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        // Remove the cascaded streams\n        while (nextPeer._sendStreams.length > 1) {\n            popStream(nextPeer);\n        }\n    }\n\n    // Send live video back to everyone upstream\n    // They will reciprocate if they're not already sending video\n    const beforeIds = getUpstreamIds();\n    beforeIds.forEach((id) => {\n        const peer = peers[id];\n        addStream(peer, myStream.clone());\n    });\n}\n","import { CASCADE_RECORDING, changeMode } from './cascade';\nimport { serverSend } from './server';\nimport { getState } from '../reducer';\n\nlet recorder;\nlet cascadeRecordingTime;\nlet beforeRecordLatency;\n\nexport function makeRecorder(stream, dispatch) {\n    // TODO: use specific codecs. check browser compatibility.\n    recorder = new MediaRecorder(stream, { mimeType : 'video/webm' });\n    recorder.addEventListener('dataavailable', ({ data }) => {\n        const { files, myId, order } = getState();\n        dispatch({\n            type     : 'FILES_ADD',\n            blobURL  : URL.createObjectURL(data),\n            fileName : `cascade${files.length + 1}_video${order.indexOf(myId) + 1}.webm`\n        });\n    });\n    recorder.addEventListener('start', async () => {\n        beforeRecordLatency = Date.now() - cascadeRecordingTime;\n        sendLatencyInfo();\n    });\n    return recorder;\n}\n\nexport function startRecording() {\n    cascadeRecordingTime = Date.now();\n    recorder.start();\n}\n\nexport function stopRecording() {\n    recorder.stop();\n}\n\nexport function sendLatencyInfo() {\n    const { myId } = getState();\n    let latencyInfo = {\n        type   : 'latency_info',\n        fromId : myId,\n        beforeRecordLatency,\n    };\n    serverSend(latencyInfo);\n}\n\n// All the Web Audio API stuff below is to precisely signal\n// when to start recording. When the initiator starts the cascade,\n// it silences its audio stream and sends a series of blips.\n// The start of the last blip signals recording start.\n// This is called in-band signaling.\n\n// Safari, what the hell.\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nexport const audioCtx = new AudioContext();\n\nconst analyzer = audioCtx.createAnalyser();\nanalyzer.fftSize = 1024;\nconst freqResolution = audioCtx.sampleRate / analyzer.fftSize;\nconst timeResolution = Math.floor(1 / freqResolution * 1000); // ms\nconst freqArray = new Uint8Array(analyzer.frequencyBinCount);\n\nlet myAudioSource;\nlet myAudioDestination;\nexport function makeBlipStream(stream) {\n    myAudioSource = audioCtx.createMediaStreamSource(stream);\n    // Play the unprocessed input\n    myAudioSource.connect(audioCtx.destination);\n\n    myAudioDestination = audioCtx.createMediaStreamDestination();\n    myAudioSource.connect(myAudioDestination);\n\n    const blipStream = myAudioDestination.stream;\n    // Add the video track(s) back to the blip'd audio stream\n    const videoTracks = stream.getVideoTracks();\n    videoTracks.forEach((track) => blipStream.addTrack(track.clone()));\n    return blipStream;\n}\n\nexport function silenceAudioOutput() {\n    myAudioSource.disconnect(myAudioDestination);\n}\n\nexport function sendBlip(frequency) {\n    const blipper = audioCtx.createOscillator();\n    blipper.frequency.value = frequency;\n\n    const gainNode = audioCtx.createGain();\n    gainNode.gain.value = 0.25;\n\n    blipper.connect(gainNode);\n    gainNode.connect(myAudioDestination);\n    gainNode.connect(audioCtx.destination);\n    gainNode.connect(analyzer);\n\n    blipper.start();\n    blipper.stop(audioCtx.currentTime + 0.2);\n}\n\nfunction reconnectAudioOutput() {\n    myAudioSource.connect(myAudioDestination);\n}\n\nexport function connectBlipListener(stream) {\n    const blipSource = audioCtx.createMediaStreamSource(stream);\n    blipSource.connect(analyzer);\n}\n\nexport const END_FREQ = 880;\nconst endFreqBinIndex = Math.floor(END_FREQ / freqResolution);\nexport function listenToBlips(dispatch) {\n    let blippin = false;\n    let isEndBlip = false;\n    const intervalId = setInterval(() => {\n        // Get the index of the highest-energy frequency bin\n        analyzer.getByteFrequencyData(freqArray);\n        let maxEnergy = 0;\n        const maxEnergyIndex = freqArray.reduce(\n            (accumulator, freqBinEnergy, index) => {\n                if (freqBinEnergy > maxEnergy) {\n                    maxEnergy = freqBinEnergy;\n                    return index;\n                }\n                return accumulator;\n            },\n            -1\n        );\n\n        // maxEnergyIndex === -1 means silence\n        if (maxEnergyIndex !== -1 && !blippin) {\n            blippin = true;\n            // const binLow = Math.floor(maxEnergyIndex * freqResolution);\n            // const binHigh = Math.floor((maxEnergyIndex + 1) * freqResolution);\n            // console.log(`max energy: ${binLow}-${binHigh} Hz`);\n            if (maxEnergyIndex === endFreqBinIndex) {\n                clearInterval(intervalId);\n                changeMode(CASCADE_RECORDING, dispatch);\n                const { iAmInitiator } = getState();\n                if (iAmInitiator) {\n                    reconnectAudioOutput();\n                }\n            }\n        }\n        if (maxEnergyIndex === -1 && blippin) {\n            blippin = false;\n        }\n    }, timeResolution);\n}\n","import { CASCADE_DONE, CASCADE_STANDBY, READY, SETUP } from './actions/cascade';\n\nexport const initialState = {\n    // This needs to be stored here so all video elements output sound to the same place.\n    audioOutput   : null,\n    // Blob URLs of the recorded myStream (not combined with other peers)\n    files         : [],\n    // The initiator is whoever is in the first spot.\n    // They have all the power. They get to rearrange the order of the cascade.\n    // And they press the big GO button.\n    iAmInitiator  : false,\n    mode          : SETUP,\n    // UUID generated by the server\n    myId          : null,\n    // MediaStream object containing audio/video\n    myStream      : null,\n    // The order of the participants - how the audios cascades\n    order         : [],\n    // Direct connections to other participants via WebRTC that provide the streams\n    // Keys are the server-generated IDs\n    peers         : {},\n    // WebSocket server connection to send the initial WebRTC signals (and a biiiit more after)\n    server        : null,\n    // MediaStream objects for remote peers\n    // Keys are the server-generated IDs\n    streams       : {}\n};\n\nfunction reducer(state, action) {\n    console.log('ACTION', action);\n    const { files, mode, myId, myStream, order, peers, streams } = state;\n    switch (action.type) {\n        case 'AUDIO_OUTPUT_SET':\n            return {\n                ...state,\n                audioOutput : action.deviceId\n            };\n        case 'FILES_ADD':\n            return {\n                ...state,\n                files : [\n                    ...files,\n                    [action.fileName, action.blobURL]\n                ]\n            };\n        case 'MODE_SET': {\n            const { mode : newMode } = action;\n            // When starting or ending the cascade, remove all streams except\n            // the prev one (they will be stopped shortly)\n            const myIndex = order.indexOf(myId);\n            const prevId = order[myIndex - 1];\n            const justPrevStream = prevId ?\n                { [prevId] : streams[prevId] } :\n                {};\n            const newStreams = newMode === CASCADE_STANDBY || newMode === CASCADE_DONE ?\n                justPrevStream :\n                streams;\n            return {\n                ...state,\n                mode    : newMode,\n                streams : newStreams\n            };\n        }\n        case 'MY_ID_SET':\n            return {\n                ...state,\n                myId : action.id\n            };\n        case 'MY_STREAM_SET': {\n            // Move from setup mode when myStream is first set\n            const newMode = myStream ? mode : READY;\n            return {\n                ...state,\n                mode     : newMode,\n                myStream : action.stream,\n            };\n        }\n        case 'ORDER_SET': {\n            const { order : newOrder } = action;\n            const myOrderIndex = newOrder.findIndex((otherId) => myId === otherId);\n            const iAmInitiator = myOrderIndex === 0;\n            // If an id has been taken away from the order, remove the peers and streams\n            const [newPeers, newStreams] = newOrder.reduce((accumulator, id) => {\n                if (id === myId) return accumulator;\n                return [\n                    {\n                        ...accumulator[0],\n                        [id] : peers[id]\n                    },\n                    {\n                        ...accumulator[1],\n                        [id] : streams[id]\n                    }\n                ]\n            }, [{}, {}]);\n            return {\n                ...state,\n                iAmInitiator,\n                order   : newOrder,\n                peers   : newPeers,\n                streams : newStreams\n            };\n        }\n        case 'PEERS_ADD':\n            return {\n                ...state,\n                peers : {\n                    ...peers,\n                    [action.id] : action.peer\n                }\n            };\n        case 'SERVER_SET':\n            return {\n                ...state,\n                server : action.server\n            };\n        case 'STREAMS_ADD':\n            return {\n                ...state,\n                streams : {\n                    ...streams,\n                    [action.id] : action.stream\n                }\n            };\n        default: {\n            console.error('Unknown action:', action);\n            return state;\n        }\n    }\n};\n\nlet evilBoogiemanGlobalState = {};\nexport function getState() {\n    return evilBoogiemanGlobalState;\n}\n\nexport default function reduceAndSave(state, action) {\n    const newState = reducer(state, action);\n    evilBoogiemanGlobalState = newState;\n    return newState;\n}\n","import React, { createContext, useReducer } from 'react';\nimport reducer, { initialState } from '../state/reducer';\n\nconst Store = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    return (\n        <Context.Provider value={[state, dispatch]}>\n            {children}\n        </Context.Provider>\n    )\n};\n\nexport const Context = createContext(initialState);\nexport default Store;\n","import React, { useContext } from 'react';\nimport { Context } from './Store';\n\nconst FileList = () => {\n    const [state] = useContext(Context);\n    const { files } = state;\n    return (\n        <aside>\n            { files.map(([fileName, blobURL], index) =>\n                <a\n                    key={blobURL}\n                    download={fileName}\n                    href={blobURL}\n                >\n                    Download your video for cascade {index + 1}\n                </a>) }\n        </aside>\n    );\n};\n\nexport default FileList;\n","import React, { useContext } from 'react';\nimport { Context } from './Store';\nimport {\n    CASCADE_DONE,\n    CASCADE_RECORDING,\n    READY,\n    startCascade,\n    stopCascade\n} from '../state/actions/cascade';\n\nconst Navigation = () => {\n    const [state, dispatch] = useContext(Context);\n    const { iAmInitiator, mode, order } = state;\n    return (\n        <nav>\n            { [READY, CASCADE_DONE].includes(mode) && iAmInitiator && order.length > 1 &&\n                <button\n                    className=\"big-button\"\n                    onClick={() => startCascade(dispatch)}\n                >\n                    GO\n                </button> }\n            { mode === CASCADE_RECORDING && iAmInitiator &&\n                <button\n                    className=\"big-button\"\n                    onClick={() => stopCascade(dispatch)}\n                >\n                    STOP\n                </button> }\n        </nav>\n    );\n};\n\nexport default Navigation;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Context } from '../Store';\nimport { addStream, popStream } from '../../state/actions/peers';\nimport { makeBlipStream, makeRecorder } from '../../state/actions/recording';\n\nconst AudioVideoSetup = ({ style }) => {\n    const [state, dispatch] = useContext(Context);\n    const { audioOutput, myStream, peers } = state;\n    const [devices, setDevices] = useState([]);\n    const [showSetup, setShowSetup] = useState(false);\n    const [audioInput, setAudioInput] = useState(null);\n    const [videoInput, setVideoInput] = useState(null);\n    const setAudioOutput = (deviceId) => {\n        dispatch({\n            type : 'AUDIO_OUTPUT_SET',\n            deviceId\n        });\n    }\n\n    useEffect(() => {\n        // On Safari, enumerateDevices only works after getUserMedia is called.\n        // So wait for that to happen before populating the dropdowns.\n        // (Also, missing things even after it's called...)\n        if (myStream && showSetup) {\n            const findDevices = async () => {\n                const deviceList = await navigator.mediaDevices.enumerateDevices();\n                setDevices(deviceList);\n            };\n            findDevices();\n        }\n    }, [myStream, showSetup]);\n\n    useEffect(() => {\n        // Called on the first render\n        // (and any time audioInput or videoInput change)\n        const setStream = async () => {\n            const stream = await navigator.mediaDevices.getUserMedia({\n                audio : {\n                    deviceId         : audioInput && { exact : audioInput },\n                    // These cause latency\n                    autoGainControl  : { exact : false },\n                    echoCancellation : false,\n                    noiseSuppression : { exact : false },\n                },\n                video : {\n                    deviceId : videoInput && { exact : videoInput }\n                }\n            });\n\n            // Record the unprocessed input\n            makeRecorder(stream, dispatch);\n\n            const sendStream = makeBlipStream(stream);\n            if (myStream) {\n                Object.values(peers).forEach((peer) => {\n                    popStream(peer);\n                    addStream(peer, sendStream);\n                });\n            }\n\n            dispatch({\n                type   : 'MY_STREAM_SET',\n                stream : sendStream\n            });\n        };\n        setStream();\n    }, [audioInput, videoInput]);\n\n    const kinds = ['audioinput', 'audiooutput', 'videoinput'];\n    const kindLabels = ['Audio Input', 'Audio Output', 'Video Input'];\n    const selectedDevices = [\n        [audioInput, setAudioInput],\n        [audioOutput, setAudioOutput],\n        [videoInput, setVideoInput]\n    ];\n    // Sort the available devices into the three buckets\n    const devicesSorted = devices.reduce((accumulator, device) => {\n        const { deviceId, kind } = device;\n        const index = kinds.indexOf(kind);\n        return [\n            ...accumulator.slice(0, index),\n            {\n                ...accumulator[index],\n                [deviceId] : device,\n            },\n            ...accumulator.slice(index + 1)\n        ]\n    }, [{}, {}, {}]);\n\n    return (\n        <section className=\"av-setup\" style={style}>\n            { showSetup ? <>\n                { devicesSorted.map((deviceMap, index) => {\n                    const devicesOfType = Object.values(deviceMap);\n                    if (devicesOfType.length === 0) return null;\n                    const label = kindLabels[index];\n                    const [selectedDeviceId, setSelectedDeviceId] = selectedDevices[index];\n                    return (\n                        <label key={label}>\n                            {label}\n                            <select\n                                onChange={(event) => setSelectedDeviceId(event.target.value)}\n                                value={selectedDeviceId || 'default'}\n                            >\n                                { devicesOfType.map(({ deviceId, label }) => (\n                                    <option key={deviceId} value={deviceId}>{label}</option>\n                                )) }\n                            </select>\n                        </label>\n                    );\n                }) }\n                <button onClick={() => setShowSetup(false)}>x</button>\n            </> :\n            <button onClick={() => setShowSetup(true)}>Audio/Video settings</button> }\n        </section>\n    );\n};\n\nexport default AudioVideoSetup;\n","import React, { useEffect, useState } from 'react';\nimport { sendBlip, END_FREQ } from '../../state/actions/recording';\n\nconst CASCADE_STANDBY_DURATION = 6000; // milliseconds\n\nconst Countdown = () => {\n    // Counts down to zero from here\n    const startCount = 3;\n    const [number, setNumber] = useState(startCount);\n    useEffect(() => {\n        if (number > 0) {\n            setTimeout(() => {\n                const newNumber = number - 1;\n                sendBlip(newNumber > 0 ? END_FREQ / 2 : END_FREQ);\n                setNumber(newNumber);\n            }, CASCADE_STANDBY_DURATION / startCount);\n        }\n    }, [number]);\n    return <span className=\"countdown\">{number}</span>\n};\n\nexport default Countdown;\n","import { useEffect, useRef } from 'react';\n\nexport default function usePrevious(value) {\n    const prevRef = useRef();\n    useEffect(() => {\n        prevRef.current = value;\n    }, [value]);\n    return prevRef.current;\n}\n","import React, { useCallback, useContext } from 'react';\nimport { Context } from '../Store';\nimport usePrevious from '../../state/use-previous';\n\nconst Video = ({ id, isMe, setVideoAspectRatio, stream }) => {\n    const [state] = useContext(Context);\n    const { audioOutput } = state;\n\n    const prevStream = usePrevious(stream);\n    const prevAudioOutput = usePrevious(audioOutput);\n    const videoRef = useCallback((node) => {\n        if (node) {\n            if (stream !== prevStream) {\n                node.addEventListener('loadedmetadata', ({ target }) => {\n                    setVideoAspectRatio(target.videoWidth / target.videoHeight);\n                });\n                if ('srcObject' in node) {\n                    node.srcObject = stream;\n                } else {\n                    node.src = URL.createObjectURL(stream);\n                }\n            }\n\n            if (audioOutput && audioOutput !== prevAudioOutput) {\n                // TODO: check if available, alert user if not\n                // (Firefox needs setting enabled)\n                // (Safari is ?)\n                node.setSinkId(audioOutput);\n            }\n        }\n    }, [audioOutput, stream]);\n\n    return stream ?\n        <video autoPlay muted={isMe} ref={videoRef} /> :\n        null;\n};\n\nexport default Video;\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport AudioVideoSetup from './AudioVideoSetup';\nimport Countdown from './Countdown';\nimport Video from './Video';\nimport { Context } from '../Store';\nimport {\n    CASCADE_DONE,\n    CASCADE_RECORDING,\n    CASCADE_STANDBY,\n    READY\n} from '../../state/actions/cascade';\nimport { serverSend } from '../../state/actions/server';\n\nconst VideoSquare = ({\n    col,\n    id,\n    isMe,\n    numColumns,\n    orderNumber,\n    row,\n    stream\n}) => {\n    const [state, dispatch] = useContext(Context);\n    const { iAmInitiator, mode, myId, order } = state;\n\n    const dndRef = useRef(null);\n    const [{ isDragging }, connectDrag] = useDrag({\n        item    : { id, type : 'participant' },\n        canDrag : () => iAmInitiator && [READY, CASCADE_DONE].includes(mode),\n        collect : (monitor) => ({ isDragging : monitor.isDragging() })\n    });\n    const [, connectDrop] = useDrop({\n        accept : 'participant',\n        drop   : (item) => {\n            serverSend({\n                type   : 'ORDER_SET',\n                fromId : myId,\n                order,\n            });\n        },\n        hover  : ({ id : hoveredOverId }) => {\n            if (hoveredOverId !== id) {\n                const myIndex = order.indexOf(id);\n                const theirIndex = order.indexOf(hoveredOverId);\n                const newOrder = [...order];\n                newOrder[myIndex] = hoveredOverId;\n                newOrder[theirIndex] = id;\n                dispatch({\n                    type  : 'ORDER_SET',\n                    order : newOrder\n                });\n            }\n        }\n    });\n    connectDrag(dndRef);\n    connectDrop(dndRef);\n\n    const style = {\n        gridColumn : `${col} / span 1`,\n        gridRow    : `${row} / span 1`,\n        opacity    : isDragging ? 0.5 : 1,\n    };\n\n    // This ridiculousness is to make the order number &\n    // settings button hover over the video\n    const [videoAspectRatio, setVideoAspectRatio] = useState(null);\n    const [left, setLeft] = useState(0);\n    const [top, setTop] = useState(0);\n    useEffect(() => {\n        const element = dndRef.current;\n        if (element && videoAspectRatio) {\n            const videoResizeObserver = new ResizeObserver((entries) => {\n                entries.forEach((entry) => {\n                    const { width, height } = entry.contentRect;\n                    // Try to fill height\n                    let videoHeight = height;\n                    let videoWidth = videoHeight * videoAspectRatio;\n                    // If width overflows, fill width\n                    if (videoWidth > width) {\n                        videoWidth = width;\n                        videoHeight = videoWidth / videoAspectRatio;\n                    }\n                    setLeft((width - videoWidth) / 2);\n                    setTop((height - videoHeight) / 2);\n                });\n            });\n            videoResizeObserver.observe(element);\n            return () => {\n                videoResizeObserver.disconnect();\n            };\n        }\n    }, [videoAspectRatio]);\n    const showOrderNumber = orderNumber > 0 && videoAspectRatio && dndRef.current;\n    const orderNumberStyle = {\n        backgroundColor : mode === CASCADE_STANDBY ? 'yellow' : (\n            mode === CASCADE_RECORDING ? 'red' : 'green'\n        ),\n        left            : `calc(${left}px + 1%)`,\n        top             : `calc(${top}px + 1%)`\n    };\n    const settingsButtonStyle = {\n        right : orderNumberStyle.left,\n        top   : orderNumberStyle.top\n    };\n\n    return (\n        <div ref={dndRef} className=\"video-draggable\" style={style}>\n            <Video id={id} isMe={isMe} setVideoAspectRatio={setVideoAspectRatio} stream={stream} />\n            { isMe && <AudioVideoSetup style={settingsButtonStyle} /> }\n            { showOrderNumber &&\n                <span className=\"order-number\" style={orderNumberStyle}>{orderNumber}</span> }\n            { mode === CASCADE_STANDBY && isMe && iAmInitiator &&\n                <Countdown /> }\n        </div>\n    );\n};\n\nexport default VideoSquare;\n","import React, { useContext } from 'react';\nimport { Context } from './Store';\nimport VideoSquare from './VideoSquare';\n\nconst VideoGrid = () => {\n    const [state] = useContext(Context);\n    const { myId, myStream, order, streams } = state;\n\n    const numParticipants = Object.values(streams).length + 1;\n    // Add a new row when the number of participants exceeds the perfect square\n    // (2-4 partcipants have two columns, 5-9 have three columns, 10-16 have four columns, etc)\n    const cols = Math.ceil(Math.sqrt(numParticipants));\n    const rows = Math.ceil(numParticipants / cols);\n    const colPct = 100 / cols;\n    const rowPct = 100 / rows;\n    const gridStyles = {\n        gridTemplateColumns : `repeat(${cols}, ${colPct}%)`,\n        gridTemplateRows    : `repeat(${cols}, ${rowPct}%)`,\n    };\n\n    const getOrderProps = (id) => {\n        const orderNumber = order.indexOf(id) + 1;\n        const row = Math.ceil(orderNumber / cols);\n        const numBeforeRow = (row - 1) * cols;\n        const col = orderNumber - numBeforeRow;\n        return {\n            col,\n            orderNumber,\n            row\n        };\n    };\n\n    return (\n        <main className=\"video-grid\" style={gridStyles}>\n            <VideoSquare id={myId} isMe stream={myStream} {...getOrderProps(myId)} />\n            { Object.entries(streams).map(([id, stream]) =>\n                <VideoSquare key={id} id={id} stream={stream} {...getOrderProps(id)} />\n            ) }\n        </main>\n    );\n};\n\nexport default VideoGrid;\n","import React from 'react';\n\nconst Welcome = ({ onClick }) => {\n    return <>\n        <div>Welcome. Let's make the connections.</div>\n        <div>First, enable your audio and video. Before you click the button, put on headphones so there's no feedback!</div>\n        <button onClick={onClick}>\n            Let's go!\n        </button>\n    </>;\n};\n\nexport default Welcome;\n","import React, { useContext, useState } from 'react';\nimport FileList from './FileList';\nimport Navigation from './Navigation';\nimport { Context } from './Store';\nimport VideoGrid from './VideoGrid';\nimport Welcome from './Welcome';\n\nconst GreenRoom = () => {\n    const [state] = useContext(Context);\n    console.log('STATE', state);\n\n    const [showWelcome, setShowWelcome] = useState(true);\n    if (showWelcome) {\n        return <Welcome onClick={() => setShowWelcome(false)} />;\n    }\n\n    return <>\n        <VideoGrid />\n        <Navigation />\n        <FileList />\n    </>;\n};\n\nexport default GreenRoom;\n","import { useContext, useEffect } from 'react';\nimport { Context } from './Store';\nimport usePrevious from '../state/use-previous';\nimport { makeServer } from '../state/actions/server';\n\nconst ServerProvider = ({ children }) => {\n    const [state, dispatch] = useContext(Context);\n    const { myStream } = state;\n    const prevMyStream = usePrevious(myStream);\n    const params = new URLSearchParams(window.location.search);\n    const serverURL = params.get('server');\n    useEffect(() => {\n        // Start the server connection only when myStream is first initiated\n        if (myStream && !prevMyStream && serverURL) {\n            makeServer(serverURL, dispatch);\n        }\n    }, [myStream, prevMyStream, serverURL]);\n\n    if (!serverURL) {\n        return \"You have to have a server. Sorry, that's just the way it is.\";\n    }\n\n    return children;\n};\n\nexport default ServerProvider;\n","import React from 'react';\nimport { DndProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport GreenRoom from './GreenRoom';\nimport ServerProvider from './ServerProvider';\nimport Store from './Store';\nimport './App.css';\n\nconst App = () => {\n    // TODO: Splash to explain what it is, button to enter green room.\n    return (\n        <Store>\n            <ServerProvider>\n                <DndProvider backend={HTML5Backend}>\n                    <GreenRoom />\n                </DndProvider>\n            </ServerProvider>\n        </Store>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}