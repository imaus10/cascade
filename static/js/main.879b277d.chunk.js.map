{"version":3,"sources":["state/server-actions.js","state/reducer.js","components/Store.jsx","components/VideoSquare/InputOutputSelect.jsx","components/VideoSquare/AudioVideoSetup.jsx","components/VideoSquare/CascadeNumber.jsx","components/VideoSquare/index.jsx","components/GreenRoom.jsx","components/ServerProvider.jsx","state/use-previous.js","components/App.js","serviceWorker.js","index.js"],"names":["sendToServer","server","data","send","JSON","stringify","initialState","iAmInitiator","myId","myStream","order","peers","streams","videoElements","reducer","state","action","console","log","type","id","oldStream","newStream","stream","Object","values","forEach","peer","removeStream","addStream","replacePeerStreams","fromId","newOrder","findIndex","otherId","dispatch","parse","forId","theirId","receiveSignal","signal","initiator","isNewPeer","keys","includes","Peer","on","theirStream","handleServerMessage","videoElement","error","Context","createContext","Store","children","useReducer","Provider","value","audioCtx","window","AudioContext","webkitAudioContext","InputOutputSelect","useContext","useState","devices","setDevices","showSetup","setShowSetup","audioInput","setAudioInput","audioOutput","setAudioOutput","videoInput","setVideoInput","setStream","a","getTracks","track","stop","navigator","mediaDevices","getUserMedia","audio","autoGainControl","exact","deviceId","echoCancellation","noiseSuppression","video","createMediaStreamSource","connect","destination","useEffect","enumerateDevices","deviceList","findDevices","nodes","length","setSinkId","kinds","kindLabels","selectedDevices","devicesSorted","reduce","accumulator","device","kind","index","indexOf","slice","map","deviceMap","devicesOfType","label","selectedDeviceId","setSelectedDeviceId","key","onChange","event","target","onClick","AudioVideoSetup","showWelcome","setShowWelcome","welcomeMessage","style","alignItems","display","flexDirection","bottom","justifyContent","position","CascadeNumber","orderNumber","backgroundColor","border","borderRadius","height","left","top","width","VideoSquare","isMe","numColumns","videoRef","useCallback","node","srcObject","src","URL","createObjectURL","dndRef","useRef","useDrag","item","canDrag","collect","monitor","isDragging","connectDrag","useDrop","accept","drop","hover","hoveredOverId","myIndex","theirIndex","connectDrop","row","Math","ceil","gridStyle","gridColumn","gridRow","opacity","ref","autoPlay","muted","GreenRoom","numParticipants","cols","sqrt","rows","colPct","rowPct","gridStyles","flex","gridTemplateColumns","gridTemplateRows","streamEntries","entries","className","ServerProvider","prevMyStream","prevRef","current","usePrevious","serverURL","URLSearchParams","location","search","get","WebSocket","addEventListener","App","DndProvider","backend","HTML5Backend","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.879b277d.chunk.js","sourcesContent":["import Peer from 'simple-peer';\n\nexport function handleServerMessage(state, action) {\n    const { myStream, peers, server } = state;\n    // Sending dispatch in the action is kind of a hack...\n    const { data, dispatch } = action;\n    const {\n        forId  : myId,\n        fromId : theirId,\n        order,\n        signal : receiveSignal,\n        type\n    } = JSON.parse(data);\n    if (type === 'id') {\n        dispatch({\n            type : 'MY_ID_SET',\n            id   : myId,\n        });\n    } else if (type === 'order') {\n        dispatch({\n            type : 'ORDER_SET',\n            order\n        });\n    } else if (type === 'signal') {\n        const initiator = receiveSignal === 'initiate';\n        const isNewPeer = !Object.keys(peers).includes(theirId);\n        const peer = isNewPeer ?\n            new Peer({\n                initiator,\n                stream : myStream,\n            }) :\n            peers[theirId];\n        if (isNewPeer) {\n            peer.on('signal', (signal) => {\n                sendToServer(server, {\n                    type   : 'signal',\n                    forId  : theirId,\n                    fromId : myId,\n                    signal\n                });\n            });\n            peer.on('stream', (theirStream) => {\n                dispatch({\n                    type   : 'STREAMS_ADD',\n                    id     : theirId,\n                    stream : theirStream\n                });\n            });\n        }\n\n        if (!initiator) {\n            peer.signal(receiveSignal);\n        }\n\n        if (isNewPeer) {\n            return {\n                ...state,\n                peers : {\n                    ...peers,\n                    [theirId] : peer\n                }\n            };\n        }\n    }\n\n    return state;\n}\n\nexport function sendToServer(server, data) {\n    server.send(JSON.stringify(data));\n}\n","import { handleServerMessage, sendToServer } from './server-actions';\n\nexport const initialState = {\n    // The initiator is whoever is in the first spot.\n    // They have all the power. They get to rearrange the order of the cascade.\n    // And they press the big GO button.\n    iAmInitiator  : false,\n    // UUID generated by the server\n    myId          : null,\n    // MediaStream object containing audio/video\n    myStream      : null,\n    // The order of the participants - how the audios cascades\n    order         : [],\n    // Direct connections to other participants via WebRTC that provide the streams\n    // Keys are the server-generated IDs\n    peers         : {},\n    // WebSocket server connection to send the initial WebRTC signals (and a biiiit more after)\n    server        : null,\n    // MediaStream objects for remote peers\n    // Keys are the server-generated IDs\n    streams       : {},\n    // These have to be stored to set audio output as the dropdown changes\n    videoElements : {}\n};\n\nfunction replacePeerStreams(state, action) {\n    const { myStream : oldStream, peers } = state;\n    const { stream : newStream } = action;\n    Object.values(peers).forEach((peer) => {\n        peer.removeStream(oldStream)\n        peer.addStream(newStream);\n    });\n}\n\n// This reducer is not quite a pure function and I'm not sorry about it.\n// The SERVER_MESSAGE action will sometimes not mutate state but just call peer.signal().\n// Basically I'm hijacking the reducer to get the current state\n// when a message is received from the server.\nexport default function reducer(state, action) {\n    console.log('ACTION', action);\n    const { myId, order, server, streams } = state;\n    switch (action.type) {\n        case 'MY_ID_SET':\n            return {\n                ...state,\n                myId : action.id\n            };\n        case 'MY_STREAM_SET': {\n            replacePeerStreams(state, action);\n            return {\n                ...state,\n                myStream : action.stream\n            };\n        }\n        case 'ORDER_SEND': {\n            sendToServer(server, {\n                type   : 'order',\n                fromId : myId,\n                order\n            });\n            return state;\n        }\n        case 'ORDER_SET': {\n            const { order : newOrder } = action;\n            const myOrderIndex = newOrder.findIndex((otherId) => myId === otherId);\n            const iAmInitiator = myOrderIndex === 0;\n            return {\n                ...state,\n                iAmInitiator,\n                order : newOrder\n            };\n        }\n        case 'SERVER_MESSAGE':\n            return handleServerMessage(state, action)\n        case 'SERVER_SET':\n            return {\n                ...state,\n                server : action.server\n            };\n        case 'STREAMS_ADD':\n            return {\n                ...state,\n                streams : {\n                    ...streams,\n                    // This ID matches the peer ID\n                    [action.id] : action.stream,\n                }\n            };\n        case 'VIDEO_ELEMENT_SET':\n            return {\n                ...state,\n                videoElements : {\n                    [action.id] : action.videoElement\n                }\n            };\n        default: {\n            console.error('Unknown action:', action);\n            return state;\n        }\n    }\n};\n","import React, { createContext, useReducer } from 'react';\nimport reducer, { initialState } from '../state/reducer';\n\nconst Store = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    return (\n        <Context.Provider value={[state, dispatch]}>\n            {children}\n        </Context.Provider>\n    )\n};\n\nexport const Context = createContext(initialState);\nexport default Store;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Context } from '../Store';\n\n// Safari, what the hell.\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst audioCtx = new AudioContext();\n\nconst InputOutputSelect = () => {\n    const [state, dispatch] = useContext(Context);\n    const { myStream, videoElements } = state;\n    const [devices, setDevices] = useState([]);\n    const [showSetup, setShowSetup] = useState(false);\n    const [audioInput, setAudioInput] = useState(null);\n    const [audioOutput, setAudioOutput] = useState(null);\n    const [videoInput, setVideoInput] = useState(null);\n\n    const setStream = async () => {\n        if (myStream) {\n            myStream.getTracks().forEach((track) => track.stop());\n        }\n        const stream = await navigator.mediaDevices.getUserMedia({\n            audio : {\n                autoGainControl  : { exact : false },\n                deviceId         : audioInput && {\n                    exact : audioInput\n                },\n                echoCancellation : false,\n                noiseSuppression : { exact : false },\n            },\n            video : {\n                deviceId : videoInput && {\n                    exact : videoInput\n                }\n            }\n        });\n        // Strangely, there is a delay when hearing the audio via the video element.\n        // But the delay is noticeably shorter when using the Web Audio API...\n        const source = audioCtx.createMediaStreamSource(stream);\n        // TODO: set output properly. See:\n        // https://stackoverflow.com/questions/41863094/how-to-select-destination-output-device-using-web-audio-api\n        source.connect(audioCtx.destination);\n        dispatch({\n            type : 'MY_STREAM_SET',\n            stream\n        });\n    };\n\n    useEffect(() => {\n        // On Safari, enumerateDevices only works after getUserMedia is called.\n        // So wait for that to happen before populating the dropdowns.\n        // (Also, missing things even after it's called...)\n        if (myStream && showSetup) {\n            const findDevices = async () => {\n                const deviceList = await navigator.mediaDevices.enumerateDevices();\n                setDevices(deviceList);\n            };\n            findDevices();\n        }\n    }, [myStream, showSetup]);\n\n    useEffect(() => {\n        // Called on the first render\n        // (and any time audioInput or videoInput change)\n        setStream();\n    }, [audioInput, videoInput]);\n\n    useEffect(() => {\n        const nodes = Object.values(videoElements);\n        if (nodes.length && audioOutput) {\n            nodes.setSinkId(audioOutput);\n        }\n    }, [audioOutput, videoElements]);\n\n    const kinds = ['audioinput', 'audiooutput', 'videoinput'];\n    const kindLabels = ['Audio Input', 'Audio Output', 'Video Input'];\n    const selectedDevices = [\n        [audioInput, setAudioInput],\n        [audioOutput, setAudioOutput],\n        [videoInput, setVideoInput]\n    ];\n    // Sort the available devices into the three buckets\n    const devicesSorted = devices.reduce((accumulator, device) => {\n        const { deviceId, kind } = device;\n        const index = kinds.indexOf(kind);\n        return [\n            ...accumulator.slice(0, index),\n            {\n                ...accumulator[index],\n                [deviceId] : device,\n            },\n            ...accumulator.slice(index + 1)\n        ]\n    }, [{}, {}, {}]);\n\n    return showSetup ? <>\n        { devicesSorted.map((deviceMap, index) => {\n            const devicesOfType = Object.values(deviceMap);\n            if (devicesOfType.length === 0) return null;\n            const label = kindLabels[index];\n            const [selectedDeviceId, setSelectedDeviceId] = selectedDevices[index];\n            return (\n                <label key={label}>\n                    {label}\n                    <select\n                        onChange={(event) => setSelectedDeviceId(event.target.value)}\n                        value={selectedDeviceId || 'default'}\n                    >\n                        { devicesOfType.map(({ deviceId, label }) => (\n                            <option key={deviceId} value={deviceId}>{label}</option>\n                        )) }\n                    </select>\n                </label>\n            );\n        }) }\n        <button onClick={() => setShowSetup(false)}>x</button>\n    </> :\n    <button onClick={() => setShowSetup(true)}>Audio/Video settings</button>;\n};\n\nexport default InputOutputSelect;\n","import React, { useState } from 'react';\nimport InputOutputSelect from './InputOutputSelect';\n\nconst AudioVideoSetup = () => {\n    const [showWelcome, setShowWelcome] = useState(true);\n\n    const welcomeMessage = <>\n        <div>Welcome. Let's make the connections.</div>\n        <div>First, enable your audio and video. Before you click the button, put on headphones so there's no feedback!</div>\n        <button onClick={() => setShowWelcome(false)}>\n            Let's go!\n        </button>\n    </>;\n\n    const afterWelcomeStyles = {\n        bottom         : 0,\n        justifyContent : 'space-between',\n        position       : 'absolute'\n    };\n    const style = {\n        alignItems    : 'center',\n        display       : 'flex',\n        flexDirection : showWelcome ? 'column' : 'row',\n        ...(showWelcome ? {} : afterWelcomeStyles)\n    };\n\n    return (\n        <section style={style}>\n            { showWelcome ?\n                welcomeMessage :\n                <InputOutputSelect /> }\n        </section>\n    );\n};\n\nexport default AudioVideoSetup;\n","import React, { useContext } from 'react';\nimport { Context } from '../Store';\n\nconst CascadeNumber = ({ orderNumber }) => {\n    const [state] = useContext(Context);\n    const { myId, stream } = state;\n    const numberStyle = {\n        alignItems      : 'center',\n        backgroundColor : 'white',\n        border          : '1px solid black',\n        borderRadius    : '50%',\n        display         : 'flex',\n        height          : '2rem',\n        justifyContent  : 'center',\n        left            : '1%',\n        position        : 'absolute',\n        top             : '2%',\n        width           : '2rem'\n    };\n    return stream && myId ? (\n        <span style={numberStyle}>{orderNumber}</span>\n    ) : null;\n};\n\nexport default CascadeNumber;\n","import React, { useCallback, useContext, useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport AudioVideoSetup from './AudioVideoSetup';\nimport CascadeNumber from './CascadeNumber';\nimport { Context } from '../Store';\n\nconst VideoSquare = ({ id, isMe, numColumns, stream }) => {\n    const [state, dispatch] = useContext(Context);\n    const { iAmInitiator, order } = state;\n\n    const videoRef = useCallback((node) => {\n        if (node) {\n            if ('srcObject' in node) {\n                node.srcObject = stream;\n            } else {\n                node.src = URL.createObjectURL(stream);\n            }\n            // The video element must be available elsewhere\n            // to set audio output via setSinkId().\n            dispatch({\n                type         : 'VIDEO_ELEMENT_SET',\n                id,\n                videoElement : node\n            });\n        }\n    }, [stream]);\n\n    const dndRef = useRef(null);\n    const [{ isDragging }, connectDrag] = useDrag({\n        item    : { id, type : 'participant' },\n        canDrag : () => iAmInitiator,\n        collect : (monitor) => ({ isDragging : monitor.isDragging() })\n    });\n    const [, connectDrop] = useDrop({\n        accept : 'participant',\n        drop   : (item) => {\n            dispatch({ type : 'ORDER_SEND' });\n        },\n        hover  : ({ id : hoveredOverId }) => {\n            if (hoveredOverId !== id) {\n                const myIndex = order.indexOf(id);\n                const theirIndex = order.indexOf(hoveredOverId);\n                const newOrder = [...order];\n                newOrder[myIndex] = hoveredOverId;\n                newOrder[theirIndex] = id;\n                dispatch({\n                    type  : 'ORDER_SET',\n                    order : newOrder\n                });\n            }\n        }\n    });\n    connectDrag(dndRef);\n    connectDrop(dndRef);\n\n    const orderNumber = order.findIndex((otherId) => id === otherId) + 1;\n    const row = Math.ceil(orderNumber / numColumns);\n    const numBeforeRow = (row - 1) * numColumns;\n    const col = orderNumber - numBeforeRow;\n    const gridStyle = {\n        gridColumn : `${col} / span 1`,\n        gridRow    : `${row} / span 1`,\n        opacity    : isDragging ? 0.5 : 1,\n        position   : 'relative'\n    };\n\n    return (\n        <div ref={dndRef} style={gridStyle}>\n            { stream && <video autoPlay muted={isMe} ref={videoRef} /> }\n            { isMe && <AudioVideoSetup /> }\n            <CascadeNumber orderNumber={orderNumber} />\n        </div>\n    );\n};\n\nexport default VideoSquare;\n","import React, { useContext } from 'react';\nimport { Context } from './Store';\nimport VideoSquare from './VideoSquare';\n\nconst GreenRoom = () => {\n    const [state] = useContext(Context);\n    console.log('STATE', state);\n    const { iAmInitiator, myId, myStream, order, streams } = state;\n\n    // Order comes from the server -\n    // but before connecting to the server, there is still 1 participant!\n    const numParticipants = order.length || 1;\n    // Add a new row when the number of participants exceeds the perfect square\n    // (2-4 partcipants have two columns, 5-9 have three columns, 10-16 have four columns, etc)\n    const cols = Math.ceil(Math.sqrt(numParticipants));\n    const rows = Math.ceil(numParticipants / cols);\n    const colPct = 100 / cols;\n    const rowPct = 100 / rows;\n    const gridStyles = {\n        display             : 'grid',\n        flex                : 1, // Fill the space above nav\n        gridTemplateColumns : `repeat(${cols}, ${colPct}%)`,\n        gridTemplateRows    : `repeat(${cols}, ${rowPct}%)`,\n    };\n\n    const streamEntries = Object.entries(streams);\n    return <>\n        <main style={gridStyles}>\n            <VideoSquare isMe id={myId} numColumns={cols} stream={myStream} />\n            { streamEntries.map(([id, stream]) => {\n                return <VideoSquare key={id} id={id} numColumns={cols} stream={stream} />;\n            }) }\n        </main>\n        <nav>\n            { iAmInitiator && streams.length > 0 &&\n                <button className=\"big-go-button\">GO</button> }\n        </nav>\n    </>;\n};\n\nexport default GreenRoom;\n","import { useContext, useEffect } from 'react';\nimport { Context } from './Store';\nimport usePrevious from '../state/use-previous';\n\nconst ServerProvider = ({ children }) => {\n    const [state, dispatch] = useContext(Context);\n    const { myStream } = state;\n    const prevMyStream = usePrevious(myStream);\n    const params = new URLSearchParams(window.location.search);\n    const serverURL = params.get('server');\n    useEffect(() => {\n        // Start the server connection only when myStream is first initiated\n        if (myStream && !prevMyStream && serverURL) {\n            // We set the server connection here because\n            // we need access to dispatch in the event listeners.\n            const server = new WebSocket(serverURL);\n            server.addEventListener('close', () => console.log('closing socket'));\n            server.addEventListener('error', () => console.log('socket error'));\n            server.addEventListener('open', () => console.log('opening socket'));\n            server.addEventListener('message', ({ data }) => {\n                dispatch({\n                    type : 'SERVER_MESSAGE',\n                    data,\n                    dispatch\n                });\n            });\n            dispatch({\n                type : 'SERVER_SET',\n                server\n            });\n            // TODO: handle failed connection\n        }\n    }, [myStream, prevMyStream, serverURL]);\n\n    if (!serverURL) {\n        return \"You have to have a server. Sorry, that's just the way it is.\";\n    }\n\n    return children;\n};\n\nexport default ServerProvider;\n","import { useEffect, useRef } from 'react';\n\nexport default function usePrevious(value) {\n    const prevRef = useRef();\n    useEffect(() => {\n        prevRef.current = value;\n    }, [value]);\n    return prevRef.current;\n}\n","import React from 'react';\nimport { DndProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport GreenRoom from './GreenRoom';\nimport ServerProvider from './ServerProvider';\nimport Store from './Store';\nimport './App.css';\n\nconst App = () => {\n    // TODO: Splash to explain what it is, button to enter green room.\n    return (\n        <Store>\n            <ServerProvider>\n                <DndProvider backend={HTML5Backend}>\n                    <GreenRoom />\n                </DndProvider>\n            </ServerProvider>\n        </Store>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}