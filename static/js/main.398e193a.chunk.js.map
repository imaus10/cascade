{"version":3,"sources":["state/modes.js","state/actions/server.js","state/actions/peers.js","state/actions/recording.js","state/actions/cascade.js","state/reducer.js","components/Store.jsx","components/VideoSquare/AudioVideoSetup.jsx","components/VideoSquare/Countdown.jsx","state/use-previous.js","components/VideoSquare/index.jsx","components/Welcome.jsx","components/GreenRoom.jsx","components/ServerProvider.jsx","components/App.js","serviceWorker.js","index.js"],"names":["READY","CASCADE_DONE","serverSend","sendAction","getState","server","send","JSON","stringify","makeServer","serverURL","dispatch","WebSocket","addEventListener","console","log","data","action","parse","type","changeMode","mode","newOrder","order","myId","oldOrder","peers","length","forEach","id","makeNewPeer","checkForNewPeers","fromId","signal","handlePeerSignal","startTime","forId","userId","serverLatenciesByUser","push","Date","now","addServerLatency","handleServerPingPong","setInterval","initiator","newId","myStream","peer","Peer","stream","clone","on","theirStream","streams","getUpstreamIds","slice","reverse","find","upstreamId","nextPeer","getNextPeer","addStream","setCascadeStreams","toString","error","state","nextIndex","indexOf","newMode","recorder","disconnectIds","myIndex","getDownstreamIds","getTracks","track","stop","removeTrack","prevId","prevStream","setupCascade","start","propagateMode","removeStream","resetStreams","makeNewRecorder","MediaRecorder","mimeType","file","URL","createObjectURL","initialState","audioOutput","files","iAmInitiator","evilBoogiemanGlobalState","reduceAndSave","newState","deviceId","concat","newStreams","findIndex","otherId","reduce","accumulator","newPeers","reducer","Context","createContext","Store","children","useReducer","Provider","value","audioCtx","window","AudioContext","webkitAudioContext","AudioVideoSetup","useContext","useState","devices","setDevices","showSetup","setShowSetup","audioInput","setAudioInput","videoInput","setVideoInput","setStream","a","navigator","mediaDevices","getUserMedia","audio","exact","autoGainControl","echoCancellation","noiseSuppression","video","Object","values","createMediaStreamSource","connect","destination","useEffect","enumerateDevices","deviceList","findDevices","kinds","kindLabels","selectedDevices","devicesSorted","device","kind","index","className","map","deviceMap","devicesOfType","label","selectedDeviceId","setSelectedDeviceId","key","onChange","event","target","onClick","Countdown","number","setNumber","setTimeout","CASCADE_STANDBY_DURATION","usePrevious","prevRef","useRef","current","VideoSquare","numColumns","isMe","prevAudioOutput","videoRef","useCallback","node","srcObject","src","setSinkId","dndRef","useDrag","item","canDrag","includes","collect","monitor","isDragging","connectDrag","useDrop","accept","drop","hover","hoveredOverId","theirIndex","connectDrop","orderNumber","row","Math","ceil","gridStyle","gridColumn","gridRow","opacity","orderNumberStyle","backgroundColor","ref","style","autoPlay","muted","Welcome","GreenRoom","showWelcome","setShowWelcome","numParticipants","cols","sqrt","rows","colPct","rowPct","gridStyles","gridTemplateColumns","gridTemplateRows","entries","startCascade","stopCascade","blobURL","download","href","ServerProvider","prevMyStream","URLSearchParams","location","search","get","App","DndProvider","backend","HTML5Backend","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.398e193a.chunk.js","sourcesContent":["// User is connecting audio/video, hasn't connected to server\nexport const SETUP = 0;\n// Connected to server, waiting for initiator to press GO\nexport const READY = 1;\n// Cascade has started but recording hasn't started yet.\n// For initiator, there's a short countdown.\n// For everyone else, it's just waiting on the stream to arrive.\nexport const CASCADE_STANDBY = 2;\n// Cascade in progress!\n// This will end for the initiator when they press the DONE button\n// and for everyone else when the stream ends.\nexport const CASCADE_RECORDING = 3;\n// After the cascade is finished, restarting connections needs to be handled differently.\n// Upstream peers should only send their video downstream after the downstream peers have finished.\nexport const CASCADE_DONE = 4;\n","import { changeMode } from './cascade';\nimport { checkForNewPeers, handlePeerSignal } from './peers';\nimport { handleServerPingPong } from './recording';\nimport { getState } from '../reducer';\n\nexport function serverSend(sendAction) {\n    const { server } = getState();\n    server.send(JSON.stringify(sendAction));\n}\n\nexport function makeServer(serverURL, dispatch) {\n    // We set the server connection here because\n    // we need access to dispatch in the event listeners.\n    const server = new WebSocket(serverURL);\n    server.addEventListener('open', () => console.log('opening socket'));\n    // TODO: handle failed connection\n    server.addEventListener('close', () => console.log('closing socket'));\n    server.addEventListener('error', () => console.log('socket error'));\n    server.addEventListener('message', ({ data }) => {\n        const action = JSON.parse(data);\n        console.log('ACTION (from server):', action);\n        // Some actions have side effects and should only happen once.\n        // (a single dispatch can call the reducer multiple times)\n        switch (action.type) {\n            case 'MODE_SET':\n                changeMode(action.mode, dispatch);\n                break;\n            case 'ORDER_SET':\n                checkForNewPeers(action, dispatch);\n                break;\n            case 'PEER_SIGNAL':\n                handlePeerSignal(action, dispatch);\n                break;\n            case 'ping':\n            case 'pong':\n                handleServerPingPong(action);\n                break;\n            default:\n                // Otherwise, messages from the server\n                // are simply actions for the reducer.\n                dispatch(action);\n        }\n    });\n    setInterval(() => {\n        // Keep the connection alive\n        serverSend({ type : 'ping' });\n    }, 30000);\n    dispatch({\n        type : 'SERVER_SET',\n        server\n    });\n}\n","import Peer from 'simple-peer';\nimport { changeMode, setCascadeStreams } from './cascade';\nimport { serverSend } from './server';\nimport { CASCADE_DONE, CASCADE_STANDBY } from '../modes';\nimport { getState } from '../reducer';\n\nexport function checkForNewPeers(action, dispatch) {\n    const { order : newOrder } = action;\n    const { myId, order : oldOrder, peers } = getState();\n    dispatch(action);\n    // If receiving order for the first time,\n    // initialize a new peer for everyone else waiting\n    if (oldOrder.length === 0) {\n        newOrder.forEach((id) => {\n            if (id !== myId && !peers[id]) {\n                makeNewPeer(true, id, dispatch);\n            }\n        });\n    }\n}\n\nfunction makeNewPeer(initiator, newId, dispatch) {\n    const { myId, myStream } = getState();\n    const peer = new Peer({\n        initiator,\n        stream : myStream.clone(),\n    });\n\n    peer.on('signal', (signal) => {\n        serverSend({\n            type   : 'PEER_SIGNAL',\n            forId  : newId,\n            fromId : myId,\n            signal\n        });\n    });\n\n    peer.on('stream', (theirStream) => {\n        const { mode } = getState();\n        if (mode === CASCADE_STANDBY) {\n            setCascadeStreams(theirStream, dispatch);\n        } else {\n            dispatch({\n                type   : 'STREAMS_ADD',\n                id     : newId,\n                stream : theirStream\n            });\n            // After cascading, if this is sent from downstream,\n            // we need to reciprocate and reopen our stream as well\n            if (mode === CASCADE_DONE && peer.streams.length === 0) {\n                peer.addStream(myStream.clone());\n            }\n        }\n    });\n\n    // The peer data channel is currently only used for sending\n    // pings to get an idea of the time it takes for a stream\n    // to reach the next person in the cascade\n    peer.on('data', (data) => {\n        // const { mode } = getState();\n        const { mode, type } = JSON.parse(data.toString());\n        if (type === 'MODE_SET') {\n            changeMode(mode, dispatch);\n            return;\n        }\n\n        console.error(`Unknown action \"${type}\" sent thru peer`);\n\n        // Send the ping right back\n        // if (type === 'ping') {\n        //     addPeerRelativeOneWayLatency(startTime)\n        //     peer.send(JSON.stringify({\n        //         type : 'pong',\n        //         startTime,\n        //     }));\n        // }\n        // if (type === 'pong') {\n        //     addPeerRoundTripLatency(startTime)\n        //     // Keep pinging until recording starts\n        //     if (mode === CASCADE_STANDBY) {\n        //         pingPeer(peer);\n        //     }\n        // }\n    });\n\n    dispatch({\n        type : 'PEERS_ADD',\n        id   : newId,\n        peer\n    });\n    return peer;\n}\n\nexport function handlePeerSignal(action, dispatch) {\n    const { peers } = getState();\n    const { fromId, signal } = action;\n    const existingPeer = peers[fromId];\n    const peer = existingPeer || makeNewPeer(false, fromId, dispatch);\n    peer.signal(signal);\n}\n\nexport function getNextPeer(state) {\n    const { myId, order, peers } = getState();\n    const nextIndex = order.indexOf(myId) + 1;\n    const nextId = order[nextIndex];\n    return peers[nextId];\n}\n\nexport function pingPeer(peer) {\n    peer.send(JSON.stringify({\n        type      : 'ping',\n        startTime : Date.now()\n    }));\n}\n","import { CASCADE_STANDBY_DURATION } from './cascade';\nimport { getNextPeer, pingPeer } from './peers';\nimport { serverSend } from './server';\nimport { CASCADE_STANDBY } from '../modes';\nimport { getState } from '../reducer';\n\nexport function makeNewRecorder(stream, dispatch) {\n    // TODO: use specific codecs. check browser compatibility.\n    const recorder = new MediaRecorder(stream, { mimeType : 'video/webm' });\n    recorder.addEventListener('dataavailable', ({ data }) => {\n        dispatch({\n            type : 'FILES_ADD',\n            file : URL.createObjectURL(data),\n        });\n    });\n    // recorder.addEventListener('start', () => {\n    //     const { iAmInitiator } = getState();\n    //     // For non-initiators, there could be an additional delay between\n    //     // receiving the stream and record start.\n    //     const startTime = iAmInitiator ? cascadeRecordingTime : cascadeReceiveTime;\n    //     beforeRecordLatency = Date.now() - startTime;\n    // });\n    // recorder.addEventListener('stop', () => {\n    //     sendLatencyInfo();\n    // });\n    return recorder;\n}\n\n// The time it takes for a ping to get back to its sender\nlet peerRoundTripLatencies = [];\nexport function addPeerRoundTripLatency(startTime) {\n    peerRoundTripLatencies.push(Date.now() - startTime);\n}\n\n// The difference between the time at the sender and the local time when it's received.\n// We can compare this value with an estimated one-way trip time\n// to see the time offset between the two machines (hopefully).\nlet peerRelativeOneWayLatencies = [];\nexport function addPeerRelativeOneWayLatency(remoteStartTime) {\n    peerRelativeOneWayLatencies.push(Date.now() - remoteStartTime);\n}\n\nlet serverLatenciesByUser = {};\nfunction addServerLatency(userId, startTime) {\n    serverLatenciesByUser[userId].push(Date.now() - startTime);\n}\nfunction resetServerLatencies() {\n    const { order } = getState();\n    order.slice(1).forEach((userId) => {\n        serverLatenciesByUser[userId] = [];\n    });\n}\n\n// The time CASCADE_STANDBY starts\nlet cascadeStandbyTime;\nexport function setCascadeStandbyTime() {\n    cascadeStandbyTime = Date.now();\n}\n\n// When the cascade stream is received\n// (not relevant for the initiator)\nlet cascadeReceiveTime;\nexport function setCascadeReceiveTime() {\n    cascadeReceiveTime = Date.now();\n}\n\n// The time CASCADE_RECORDING starts\nlet cascadeRecordingTime;\nexport function setCascadeRecordingTime() {\n    cascadeRecordingTime = Date.now();\n}\n\n// Right after the stream is sent, to see how long that part takes.\nlet cascadeSendTime;\nexport function setCascadeSendTime() {\n    cascadeSendTime = Date.now();\n}\n\nlet beforeRecordLatency;\n\n// This starts a series of pings that lasts from standby until recording starts\n// to get an idea of the latencies between each connection in the cascade.\n// We use it later to stitch together the video.\nexport function gatherLatencyInfo() {\n    const { iAmInitiator, myId } = getState();\n    const nextPeer = getNextPeer();\n    // Peer latencies\n    if (nextPeer) {\n        pingPeer(nextPeer);\n    }\n    // Server latencies - gathered only by initiator\n    // because they send the initial MODE_SET action\n    if (iAmInitiator) {\n        resetServerLatencies();\n        // This will broadcast to all other peers\n        // because forId is missing\n        serverSend({\n            type      : 'ping',\n            fromId    : myId,\n            startTime : Date.now()\n        });\n    }\n}\n\nexport function handleServerPingPong(action) {\n    const { fromId, startTime, type } = action;\n    const { mode, myId } = getState();\n\n    // If it's a regular keep-alive pong from the server\n    // just ignore it\n    if (!fromId) return;\n\n    switch (type) {\n        case 'ping':\n            serverSend({\n                type   : 'pong',\n                forId  : fromId,\n                fromId : myId,\n                startTime,\n            });\n            break;\n        case 'pong':\n            addServerLatency(fromId, startTime);\n            // Keep pinging until recording starts\n            if (mode === CASCADE_STANDBY) {\n                serverSend({\n                    type      : 'ping',\n                    forId     : fromId,\n                    fromId    : myId,\n                    startTime : Date.now()\n                });\n            }\n            break;\n        default:\n    }\n}\n\nexport function sendLatencyInfo() {\n    const { iAmInitiator, myId } = getState();\n\n    let latencyInfo = {\n        type   : 'latency_info',\n        fromId : myId,\n        beforeRecordLatency,\n    };\n\n    // No pongs at the end of the cascade\n    if (getNextPeer()) {\n        const peerRoundTrips = peerRoundTripLatencies.length;\n        const peerRoundTripAvg = avg(peerRoundTripLatencies);\n        const peerRoundTripStdDev = stddev(peerRoundTripLatencies, peerRoundTripAvg);\n        const sendLatency = cascadeSendTime - cascadeRecordingTime;\n        latencyInfo = {\n            ...latencyInfo,\n            peerRoundTrips,\n            peerRoundTripAvg,\n            peerRoundTripStdDev,\n            sendLatency\n        };\n    }\n\n    // No pings for initiator\n    if (!iAmInitiator) {\n        const peerOneWayTrips = peerRelativeOneWayLatencies.length;\n        const peerOneWayAvg = avg(peerRelativeOneWayLatencies);\n        const peerOneWayStdDev = stddev(peerRelativeOneWayLatencies, peerOneWayAvg);\n        const signalingLatency = cascadeReceiveTime - cascadeStandbyTime - CASCADE_STANDBY_DURATION;\n        latencyInfo = {\n            ...latencyInfo,\n            peerOneWayTrips,\n            peerOneWayAvg,\n            peerOneWayStdDev,\n            signalingLatency\n        };\n    } else {\n        Object.entries(serverLatenciesByUser).forEach(([fromId, serverLatencies]) => {\n            const serverRoundTrips = serverLatencies.length;\n            const serverRoundTripAvg = avg(serverLatencies);\n            const serverRoundTripStdDev = stddev(serverLatencies, serverRoundTripAvg);\n            serverSend({\n                type: 'latency_info',\n                fromId,\n                serverRoundTrips,\n                serverRoundTripAvg,\n                serverRoundTripStdDev\n            })\n        });\n    }\n\n    serverSend(latencyInfo);\n    peerRoundTripLatencies = [];\n    peerRelativeOneWayLatencies = [];\n}\n\nfunction avg(values) {\n    const sum = values.reduce((accumulator, value) => accumulator + value, 0);\n    return sum / values.length;\n}\n\nfunction stddev(values, mean) {\n    const sumOfSquares = values.reduce(\n        (accumulator, value) => accumulator + Math.pow(value - mean, 2),\n        0\n    );\n    return Math.sqrt(sumOfSquares / (values.length - 1));\n}\n","import { getNextPeer } from './peers';\nimport { serverSend } from './server';\nimport { CASCADE_DONE, CASCADE_RECORDING, CASCADE_STANDBY } from '../modes';\nimport { getState } from '../reducer';\n\nexport const CASCADE_STANDBY_DURATION = 6000; // milliseconds\n\nexport function startCascade(dispatch) {\n    const { myId } = getState();\n    // dispatch MODE_SET and broadcast via server\n    // (server will set lock on new participants)\n    const mode = CASCADE_STANDBY;\n    const action = {\n        type   : 'MODE_SET',\n        fromId : myId,\n        mode\n    };\n    serverSend(action);\n    changeMode(mode, dispatch);\n}\n\nexport function changeMode(newMode, dispatch) {\n    dispatch({\n        type : 'MODE_SET',\n        mode : newMode\n    });\n\n    const { recorder } = getState();\n\n    switch (newMode) {\n        case CASCADE_STANDBY:\n            setupCascade();\n            break;\n        case CASCADE_RECORDING:\n            recorder.start();\n            propagateMode(CASCADE_RECORDING);\n            break;\n        case CASCADE_DONE:\n            recorder.stop();\n            propagateMode(CASCADE_DONE);\n            resetStreams();\n            break;\n        default:\n    }\n}\n\nexport function getDownstreamIds() {\n    const { myId, order } = getState();\n    const myIndex = order.indexOf(myId);\n    return order.slice(myIndex + 1);\n}\n\nexport function getUpstreamIds() {\n    const { myId, order } = getState();\n    const myIndex = order.indexOf(myId);\n    return order.slice(0, myIndex);\n}\n\nfunction setupCascade() {\n    const { myId, order, peers, streams } = getState();\n\n    // Disconnect stream from all upstream peers\n    // and all downstream peers except the one right after\n    const disconnectIds = [\n        ...getUpstreamIds(),\n        ...getDownstreamIds().slice(1)\n    ];\n    console.log('disconnecting from:', disconnectIds);\n    disconnectIds.forEach((id) => {\n        const peer = peers[id];\n        const stream = peer.streams[0];\n        stream.getTracks().forEach((track) => {\n            track.stop();\n            peer.removeTrack(track, stream);\n        });\n    });\n\n    // To start, send the stream from the previous peer\n    // to the next peer in the cascade.\n    // The rest of the streams will come later with the peer stream event.\n    const nextPeer = getNextPeer();\n    const myIndex = order.indexOf(myId);\n    const prevId = order[myIndex - 1];\n    if (prevId && nextPeer) {\n        const prevStream = streams[prevId].clone();\n        nextPeer.addStream(prevStream);\n        console.log(`sending stream from prev ${prevId} to next ${order[myIndex + 1]}`);\n    }\n}\n\nexport function setCascadeStreams(stream, dispatch) {\n    const { streams } = getState();\n\n    // Find the next id that doesn't have a stream,\n    // going backwards starting from one before the previous peer\n    const upstreamIds = getUpstreamIds().slice(0, -1).reverse();\n    const id = upstreamIds.find((upstreamId) => !streams[upstreamId]);\n    dispatch({\n        type : 'STREAMS_ADD',\n        id,\n        stream,\n    });\n\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        nextPeer.addStream(stream);\n    }\n}\n\nfunction propagateMode(mode) {\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        nextPeer.send(JSON.stringify({\n            type : 'MODE_SET',\n            mode\n        }));\n    }\n}\n\nexport function stopCascade(dispatch) {\n    changeMode(CASCADE_DONE, dispatch);\n}\n\nfunction resetStreams() {\n    const { myStream, peers } = getState();\n\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        // Remove the cascaded streams\n        // The streams stay in the order they're added\n        nextPeer.streams.slice(1).forEach((stream) => {\n            stream.getTracks().forEach((track) => track.stop());\n            nextPeer.removeStream(stream);\n        });\n    }\n\n    // Send live video back to everyone upstream\n    // They will reciprocate if they're not already sending video\n    const beforeIds = getUpstreamIds();\n    beforeIds.forEach((id) => {\n        const peer = peers[id];\n        peer.addStream(myStream.clone());\n    });\n}\n","import { CASCADE_DONE, CASCADE_STANDBY, READY, SETUP } from './modes';\nimport { makeNewRecorder } from './actions/recording';\n\nexport const initialState = {\n    // This needs to be stored here so all video elements output sound to the same place.\n    audioOutput   : null,\n    // Blob URLs of the recorded myStream (not combined with other peers)\n    files         : [],\n    // The initiator is whoever is in the first spot.\n    // They have all the power. They get to rearrange the order of the cascade.\n    // And they press the big GO button.\n    iAmInitiator  : false,\n    mode          : SETUP,\n    // UUID generated by the server\n    myId          : null,\n    // MediaStream object containing audio/video\n    myStream      : null,\n    // The order of the participants - how the audios cascades\n    order         : [],\n    // Direct connections to other participants via WebRTC that provide the streams\n    // Keys are the server-generated IDs\n    peers         : {},\n    // Records myStream during cascade\n    recorder      : null,\n    // WebSocket server connection to send the initial WebRTC signals (and a biiiit more after)\n    server        : null,\n    // MediaStream objects for remote peers\n    // Keys are the server-generated IDs\n    streams       : {}\n};\n\nfunction reducer(state, action) {\n    console.log('ACTION', action);\n    const { files, mode, myId, myStream, order, peers, streams } = state;\n    switch (action.type) {\n        case 'AUDIO_OUTPUT_SET':\n            return {\n                ...state,\n                audioOutput : action.deviceId\n            };\n        case 'FILES_ADD':\n            return {\n                ...state,\n                files : files.concat(action.file)\n            };\n        case 'MODE_SET': {\n            const { mode : newMode } = action;\n            // When starting or ending the cascade, remove all streams except\n            // the prev one (they will be stopped shortly)\n            let newStreams = streams;\n            if (newMode === CASCADE_STANDBY || newMode === CASCADE_DONE) {\n                newStreams = {};\n                const myIndex = order.indexOf(myId);\n                const prevId = order[myIndex - 1];\n                if (prevId) {\n                    newStreams[prevId] = streams[prevId];\n                }\n            }\n            return {\n                ...state,\n                mode    : newMode,\n                streams : newStreams\n            };\n        }\n        case 'MY_ID_SET':\n            return {\n                ...state,\n                myId : action.id\n            };\n        case 'MY_STREAM_SET': {\n            // Move from setup mode when myStream is first set\n            const newMode = myStream ? mode : READY;\n            return {\n                ...state,\n                mode     : newMode,\n                myStream : action.stream,\n                recorder : makeNewRecorder(action.stream, action.dispatch)\n            };\n        }\n        case 'ORDER_SET': {\n            const { order : newOrder } = action;\n            const myOrderIndex = newOrder.findIndex((otherId) => myId === otherId);\n            const iAmInitiator = myOrderIndex === 0;\n            // If an id has been taken away from the order, remove the peers and streams\n            const [newPeers, newStreams] = newOrder.reduce((accumulator, id) => {\n                if (id === myId) return accumulator;\n                return [\n                    {\n                        ...accumulator[0],\n                        [id] : peers[id]\n                    },\n                    {\n                        ...accumulator[1],\n                        [id] : streams[id]\n                    }\n                ]\n            }, [{}, {}]);\n            return {\n                ...state,\n                iAmInitiator,\n                order   : newOrder,\n                peers   : newPeers,\n                streams : newStreams\n            };\n        }\n        case 'PEERS_ADD':\n            return {\n                ...state,\n                peers : {\n                    ...peers,\n                    [action.id] : action.peer\n                }\n            };\n        case 'SERVER_SET':\n            return {\n                ...state,\n                server : action.server\n            };\n        case 'STREAMS_ADD':\n            return {\n                ...state,\n                streams : {\n                    ...streams,\n                    [action.id] : action.stream\n                }\n            };\n        case 'STREAMS_REMOVE': {\n            const newStreams = { ...streams };\n            delete newStreams[action.id];\n            return {\n                ...state,\n                streams : newStreams\n            };\n        }\n        default: {\n            console.error('Unknown action:', action);\n            return state;\n        }\n    }\n};\n\nlet evilBoogiemanGlobalState = {};\nexport function getState() {\n    return evilBoogiemanGlobalState;\n}\n\nexport default function reduceAndSave(state, action) {\n    const newState = reducer(state, action);\n    evilBoogiemanGlobalState = newState;\n    return newState;\n}\n","import React, { createContext, useReducer } from 'react';\nimport reducer, { initialState } from '../state/reducer';\n\nconst Store = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    return (\n        <Context.Provider value={[state, dispatch]}>\n            {children}\n        </Context.Provider>\n    )\n};\n\nexport const Context = createContext(initialState);\nexport default Store;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Context } from '../Store';\n\n// Safari, what the hell.\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst audioCtx = new AudioContext();\n\nconst AudioVideoSetup = () => {\n    const [state, dispatch] = useContext(Context);\n    const { audioOutput, myStream, peers } = state;\n    const [devices, setDevices] = useState([]);\n    const [showSetup, setShowSetup] = useState(false);\n    const [audioInput, setAudioInput] = useState(null);\n    const [videoInput, setVideoInput] = useState(null);\n    const setAudioOutput = (deviceId) => {\n        dispatch({\n            type : 'AUDIO_OUTPUT_SET',\n            deviceId\n        });\n    }\n\n    const setStream = async () => {\n        const stream = await navigator.mediaDevices.getUserMedia({\n            audio : {\n                deviceId         : audioInput && {\n                    exact : audioInput\n                },\n                // These cause latency\n                autoGainControl  : { exact : false },\n                echoCancellation : false,\n                noiseSuppression : { exact : false },\n            },\n            video : {\n                deviceId : videoInput && {\n                    exact : videoInput\n                }\n            }\n        });\n        if (myStream) {\n            myStream.getTracks().forEach((track) => track.stop());\n            Object.values(peers).forEach((peer) => {\n                peer.removeStream(myStream)\n                peer.addStream(stream);\n            });\n        }\n        // Strangely, there is a delay when hearing the audio via the video element.\n        // But the delay is noticeably shorter when using the Web Audio API...\n        // (But only in Chrome?)\n        const source = audioCtx.createMediaStreamSource(stream);\n        // TODO: set output properly. See:\n        // https://stackoverflow.com/questions/41863094/how-to-select-destination-output-device-using-web-audio-api\n        source.connect(audioCtx.destination);\n        dispatch({\n            type : 'MY_STREAM_SET',\n            // Need to dispatch in the recorder ondataavailable event listener\n            dispatch,\n            stream\n        });\n    };\n\n    useEffect(() => {\n        // On Safari, enumerateDevices only works after getUserMedia is called.\n        // So wait for that to happen before populating the dropdowns.\n        // (Also, missing things even after it's called...)\n        if (myStream && showSetup) {\n            const findDevices = async () => {\n                const deviceList = await navigator.mediaDevices.enumerateDevices();\n                setDevices(deviceList);\n            };\n            findDevices();\n        }\n    }, [myStream, showSetup]);\n\n    useEffect(() => {\n        // Called on the first render\n        // (and any time audioInput or videoInput change)\n        setStream();\n    }, [audioInput, videoInput]);\n\n    const kinds = ['audioinput', 'audiooutput', 'videoinput'];\n    const kindLabels = ['Audio Input', 'Audio Output', 'Video Input'];\n    const selectedDevices = [\n        [audioInput, setAudioInput],\n        [audioOutput, setAudioOutput],\n        [videoInput, setVideoInput]\n    ];\n    // Sort the available devices into the three buckets\n    const devicesSorted = devices.reduce((accumulator, device) => {\n        const { deviceId, kind } = device;\n        const index = kinds.indexOf(kind);\n        return [\n            ...accumulator.slice(0, index),\n            {\n                ...accumulator[index],\n                [deviceId] : device,\n            },\n            ...accumulator.slice(index + 1)\n        ]\n    }, [{}, {}, {}]);\n\n    return (\n        <section className=\"av-setup\">\n            { showSetup ? <>\n                { devicesSorted.map((deviceMap, index) => {\n                    const devicesOfType = Object.values(deviceMap);\n                    if (devicesOfType.length === 0) return null;\n                    const label = kindLabels[index];\n                    const [selectedDeviceId, setSelectedDeviceId] = selectedDevices[index];\n                    return (\n                        <label key={label}>\n                            {label}\n                            <select\n                                onChange={(event) => setSelectedDeviceId(event.target.value)}\n                                value={selectedDeviceId || 'default'}\n                            >\n                                { devicesOfType.map(({ deviceId, label }) => (\n                                    <option key={deviceId} value={deviceId}>{label}</option>\n                                )) }\n                            </select>\n                        </label>\n                    );\n                }) }\n                <button onClick={() => setShowSetup(false)}>x</button>\n            </> :\n            <button onClick={() => setShowSetup(true)}>Audio/Video settings</button> }\n        </section>\n    );\n};\n\nexport default AudioVideoSetup;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Context } from '../Store';\nimport { CASCADE_STANDBY_DURATION, changeMode } from '../../state/actions/cascade';\nimport { CASCADE_RECORDING } from '../../state/modes';\n\nconst Countdown = () => {\n    // Counts down to zero from here\n    const countdownStart = 3;\n    const [, dispatch] = useContext(Context);\n    const [number, setNumber] = useState(countdownStart);\n    useEffect(() => {\n        if (number > 0) {\n            setTimeout(() => {\n                setNumber(number - 1);\n            }, CASCADE_STANDBY_DURATION / countdownStart);\n        } else {\n            changeMode(CASCADE_RECORDING, dispatch);\n        }\n    }, [number]);\n    return <span className=\"countdown\">{number}</span>\n};\n\nexport default Countdown;\n","import { useEffect, useRef } from 'react';\n\nexport default function usePrevious(value) {\n    const prevRef = useRef();\n    useEffect(() => {\n        prevRef.current = value;\n    }, [value]);\n    return prevRef.current;\n}\n","import React, { useCallback, useContext, useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport AudioVideoSetup from './AudioVideoSetup';\nimport Countdown from './Countdown';\nimport { Context } from '../Store';\nimport usePrevious from '../../state/use-previous';\nimport { CASCADE_DONE, CASCADE_RECORDING, CASCADE_STANDBY, READY } from '../../state/modes';\nimport { serverSend } from '../../state/actions/server';\n\nconst VideoSquare = ({ id, numColumns, stream }) => {\n    const [state, dispatch] = useContext(Context);\n    const { audioOutput, iAmInitiator, mode, myId, order } = state;\n    const isMe = id === myId;\n    const prevStream = usePrevious(stream);\n    const prevAudioOutput = usePrevious(audioOutput);\n\n    const videoRef = useCallback((node) => {\n        if (node) {\n            if (stream !== prevStream) {\n                if ('srcObject' in node) {\n                    node.srcObject = stream;\n                } else {\n                    node.src = URL.createObjectURL(stream);\n                }\n            }\n\n            if (audioOutput && audioOutput !== prevAudioOutput) {\n                // TODO: check if available, alert user if not\n                // (Firefox needs setting enabled)\n                // (Safari is ?)\n                node.setSinkId(audioOutput);\n            }\n        }\n    }, [audioOutput, stream]);\n\n    const dndRef = useRef(null);\n    const [{ isDragging }, connectDrag] = useDrag({\n        item    : { id, type : 'participant' },\n        canDrag : () => iAmInitiator && [READY, CASCADE_DONE].includes(mode),\n        collect : (monitor) => ({ isDragging : monitor.isDragging() })\n    });\n    const [, connectDrop] = useDrop({\n        accept : 'participant',\n        drop   : (item) => {\n            serverSend({\n                type   : 'ORDER_SET',\n                fromId : myId,\n                order,\n            });\n        },\n        hover  : ({ id : hoveredOverId }) => {\n            if (hoveredOverId !== id) {\n                const myIndex = order.indexOf(id);\n                const theirIndex = order.indexOf(hoveredOverId);\n                const newOrder = [...order];\n                newOrder[myIndex] = hoveredOverId;\n                newOrder[theirIndex] = id;\n                dispatch({\n                    type  : 'ORDER_SET',\n                    order : newOrder\n                });\n            }\n        }\n    });\n    connectDrag(dndRef);\n    connectDrop(dndRef);\n\n    const orderNumber = order.indexOf(id) + 1;\n    const row = Math.ceil(orderNumber / numColumns);\n    const numBeforeRow = (row - 1) * numColumns;\n    const col = orderNumber - numBeforeRow;\n    const gridStyle = {\n        gridColumn : `${col} / span 1`,\n        gridRow    : `${row} / span 1`,\n        opacity    : isDragging ? 0.5 : 1,\n    };\n    const orderNumberStyle = {\n        backgroundColor : mode === CASCADE_STANDBY ? 'yellow' : (\n            mode === CASCADE_RECORDING ? 'red' : 'green'\n        )\n    };\n\n    return (\n        <div ref={dndRef} className=\"video-draggable\" style={gridStyle}>\n            { stream && <video autoPlay muted={isMe} ref={videoRef} /> }\n            { isMe && <AudioVideoSetup /> }\n            { orderNumber > 0 &&\n                <span className=\"order-number\" style={orderNumberStyle}>{orderNumber}</span> }\n            { mode === CASCADE_STANDBY && isMe && iAmInitiator &&\n                <Countdown /> }\n        </div>\n    );\n};\n\nexport default VideoSquare;\n","import React from 'react';\n\nconst Welcome = ({ onClick }) => {\n    return <>\n        <div>Welcome. Let's make the connections.</div>\n        <div>First, enable your audio and video. Before you click the button, put on headphones so there's no feedback!</div>\n        <button onClick={onClick}>\n            Let's go!\n        </button>\n    </>;\n};\n\nexport default Welcome;\n","import React, { useContext, useState } from 'react';\nimport { Context } from './Store';\nimport VideoSquare from './VideoSquare';\nimport Welcome from './Welcome';\nimport { startCascade, stopCascade } from '../state/actions/cascade';\nimport { CASCADE_DONE, CASCADE_RECORDING, READY } from '../state/modes';\n\nconst GreenRoom = () => {\n    const [state, dispatch] = useContext(Context);\n    console.log('STATE', state);\n    const { files, iAmInitiator, mode, myId, myStream, streams } = state;\n    const [showWelcome, setShowWelcome] = useState(true);\n\n    if (showWelcome) {\n        return <Welcome onClick={() => setShowWelcome(false)} />;\n    }\n\n    const numParticipants = Object.values(streams).length + 1;\n    // Add a new row when the number of participants exceeds the perfect square\n    // (2-4 partcipants have two columns, 5-9 have three columns, 10-16 have four columns, etc)\n    const cols = Math.ceil(Math.sqrt(numParticipants));\n    const rows = Math.ceil(numParticipants / cols);\n    const colPct = 100 / cols;\n    const rowPct = 100 / rows;\n    const gridStyles = {\n        gridTemplateColumns : `repeat(${cols}, ${colPct}%)`,\n        gridTemplateRows    : `repeat(${cols}, ${rowPct}%)`,\n    };\n\n    return <>\n        <main className=\"video-grid\" style={gridStyles}>\n            <VideoSquare id={myId} numColumns={cols} stream={myStream} />\n            { Object.entries(streams).map(([id, stream]) =>\n                <VideoSquare key={id} id={id} numColumns={cols} stream={stream} />\n            ) }\n        </main>\n        <nav>\n            { [READY, CASCADE_DONE].includes(mode) && iAmInitiator && numParticipants > 1 &&\n                <button\n                    className=\"big-button\"\n                    onClick={() => startCascade(dispatch)}\n                >\n                    GO\n                </button> }\n            { mode === CASCADE_RECORDING && iAmInitiator &&\n                <button\n                    className=\"big-button\"\n                    onClick={() => stopCascade(dispatch)}\n                >\n                    STOP\n                </button> }\n        </nav>\n        <aside>\n            { files.map((blobURL, index) =>\n                <a\n                    key={blobURL}\n                    download={`cascade${index + 1}.webm`}\n                    href={blobURL}\n                >\n                    Download cascade {index + 1} video\n                </a>) }\n        </aside>\n    </>;\n};\n\nexport default GreenRoom;\n","import { useContext, useEffect } from 'react';\nimport { Context } from './Store';\nimport usePrevious from '../state/use-previous';\nimport { makeServer } from '../state/actions/server';\n\nconst ServerProvider = ({ children }) => {\n    const [state, dispatch] = useContext(Context);\n    const { myStream } = state;\n    const prevMyStream = usePrevious(myStream);\n    const params = new URLSearchParams(window.location.search);\n    const serverURL = params.get('server');\n    useEffect(() => {\n        // Start the server connection only when myStream is first initiated\n        if (myStream && !prevMyStream && serverURL) {\n            makeServer(serverURL, dispatch);\n        }\n    }, [myStream, prevMyStream, serverURL]);\n\n    if (!serverURL) {\n        return \"You have to have a server. Sorry, that's just the way it is.\";\n    }\n\n    return children;\n};\n\nexport default ServerProvider;\n","import React from 'react';\nimport { DndProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport GreenRoom from './GreenRoom';\nimport ServerProvider from './ServerProvider';\nimport Store from './Store';\nimport './App.css';\n\nconst App = () => {\n    // TODO: Splash to explain what it is, button to enter green room.\n    return (\n        <Store>\n            <ServerProvider>\n                <DndProvider backend={HTML5Backend}>\n                    <GreenRoom />\n                </DndProvider>\n            </ServerProvider>\n        </Store>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}