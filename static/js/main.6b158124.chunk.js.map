{"version":3,"sources":["state/modes.js","state/actions/cascade.js","state/actions/recording.js","state/actions/peers.js","state/actions/server.js","state/reducer.js","components/Store.jsx","components/VideoSquare/AudioVideoSetup.jsx","components/VideoSquare/Countdown.jsx","state/use-previous.js","components/VideoSquare/index.jsx","components/Welcome.jsx","components/GreenRoom.jsx","components/ServerProvider.jsx","components/App.js","serviceWorker.js","index.js"],"names":["READY","CASCADE_DONE","getNextPeer","state","getState","myId","order","peers","nextIndex","indexOf","cascadeModeSet","mode","nextPeer","send","JSON","stringify","type","changeMode","newMode","dispatch","recorder","streams","getUpstreamIds","myIndex","slice","getDownstreamIds","forEach","id","peer","stream","getTracks","track","stop","removeTrack","prevId","prevStream","clone","addStream","setupCascade","cascadeRecordingTime","Date","now","start","myStream","removeStream","resetStreams","streamReceivedTime","playLatency","beforeRecordLatency","receiveDelayAtRecordingStart","makeNewPeer","initiator","newId","Peer","on","signal","serverSend","forId","fromId","theirStream","reverse","find","upstreamId","addCascadedStream","isPrev","length","data","parse","toString","console","error","sendAction","server","makeServer","serverURL","WebSocket","addEventListener","log","action","newOrder","oldOrder","checkForNewPeers","handlePeerSignal","setInterval","setReceiveDelay","prevPeer","Promise","resolve","getStats","_pc","result","nomore","results","item","mediaType","isReceived","split","pop","googCurrentDelayMs","makeNewRecorder","MediaRecorder","mimeType","file","URL","createObjectURL","a","sendLatencyInfo","initialState","audioOutput","files","iAmInitiator","evilBoogiemanGlobalState","reduceAndSave","newState","deviceId","concat","newStreams","findIndex","otherId","reduce","accumulator","newPeers","reducer","Context","createContext","Store","children","useReducer","Provider","value","audioCtx","window","AudioContext","webkitAudioContext","AudioVideoSetup","useContext","useState","devices","setDevices","showSetup","setShowSetup","audioInput","setAudioInput","videoInput","setVideoInput","setStream","navigator","mediaDevices","getUserMedia","audio","exact","autoGainControl","echoCancellation","noiseSuppression","video","Object","values","createMediaStreamSource","connect","destination","useEffect","enumerateDevices","deviceList","findDevices","kinds","kindLabels","selectedDevices","devicesSorted","device","kind","index","className","map","deviceMap","devicesOfType","label","selectedDeviceId","setSelectedDeviceId","key","onChange","event","target","onClick","Countdown","number","setNumber","setTimeout","CASCADE_STANDBY_DURATION","usePrevious","prevRef","useRef","current","VideoSquare","numColumns","isMe","isFromPrevious","prevAudioOutput","videoRef","useCallback","node","srcObject","src","setSinkId","dndRef","useDrag","canDrag","includes","collect","monitor","isDragging","connectDrag","useDrop","accept","drop","hover","hoveredOverId","theirIndex","connectDrop","orderNumber","row","Math","ceil","gridStyle","gridColumn","gridRow","opacity","orderNumberStyle","backgroundColor","ref","style","autoPlay","muted","Welcome","GreenRoom","showWelcome","setShowWelcome","numParticipants","cols","sqrt","rows","colPct","rowPct","gridStyles","gridTemplateColumns","gridTemplateRows","entries","startCascade","stopCascade","blobURL","download","href","ServerProvider","prevMyStream","URLSearchParams","location","search","get","App","DndProvider","backend","HTML5Backend","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6b158124.chunk.js","sourcesContent":["// User is connecting audio/video, hasn't connected to server\nexport const SETUP = 0;\n// Connected to server, waiting for initiator to press GO\nexport const READY = 1;\n// Cascade has started but recording hasn't started yet.\n// For initiator, there's a short countdown.\n// For everyone else, it's just waiting on the stream to arrive.\nexport const CASCADE_STANDBY = 2;\n// Cascade in progress!\n// This will end for the initiator when they press the DONE button\n// and for everyone else when the stream ends.\nexport const CASCADE_RECORDING = 3;\n// After the cascade is finished, restarting connections needs to be handled differently.\n// Upstream peers should only send their video downstream after the downstream peers have finished.\nexport const CASCADE_DONE = 4;\n","import { setCascadeRecordingTime } from './recording';\nimport { serverSend } from './server';\nimport { CASCADE_DONE, CASCADE_RECORDING, CASCADE_STANDBY } from '../modes';\nimport { getState } from '../reducer';\n\nexport const CASCADE_STANDBY_DURATION = 6000; // milliseconds\n\nfunction getNextPeer(state) {\n    const { myId, order, peers } = getState();\n    const nextIndex = order.indexOf(myId) + 1;\n    const nextId = order[nextIndex];\n    return peers[nextId];\n}\n\nfunction cascadeModeSet(mode) {\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        nextPeer.send(JSON.stringify({\n            type : 'MODE_SET',\n            mode\n        }));\n    }\n}\n\nexport function changeMode(newMode, dispatch) {\n    dispatch({\n        type : 'MODE_SET',\n        mode : newMode\n    });\n\n    const { recorder } = getState();\n\n    switch (newMode) {\n        case CASCADE_STANDBY:\n            setupCascade();\n            break;\n        case CASCADE_RECORDING:\n            setCascadeRecordingTime();\n            recorder.start();\n            cascadeModeSet(CASCADE_RECORDING);\n            break;\n        case CASCADE_DONE:\n            recorder.stop();\n            cascadeModeSet(CASCADE_DONE);\n            resetStreams();\n            break;\n        default:\n    }\n}\n\nexport function startCascade(dispatch) {\n    const { myId } = getState();\n    // dispatch MODE_SET and broadcast via server\n    // (server will set lock on new participants)\n    const mode = CASCADE_STANDBY;\n    const action = {\n        type   : 'MODE_SET',\n        fromId : myId,\n        mode\n    };\n    serverSend(action);\n    changeMode(mode, dispatch);\n}\n\nexport function getDownstreamIds() {\n    const { myId, order } = getState();\n    const myIndex = order.indexOf(myId);\n    return order.slice(myIndex + 1);\n}\n\nexport function getUpstreamIds() {\n    const { myId, order } = getState();\n    const myIndex = order.indexOf(myId);\n    return order.slice(0, myIndex);\n}\n\nfunction setupCascade() {\n    const { myId, order, peers, streams } = getState();\n\n    // Disconnect stream from all upstream peers\n    // and all downstream peers except the one right after\n    const disconnectIds = [\n        ...getUpstreamIds(),\n        ...getDownstreamIds().slice(1)\n    ];\n    disconnectIds.forEach((id) => {\n        const peer = peers[id];\n        const stream = peer.streams[0];\n        stream.getTracks().forEach((track) => {\n            track.stop();\n            peer.removeTrack(track, stream);\n        });\n    });\n\n    // To start, send the stream from the previous peer\n    // to the next peer in the cascade.\n    // The rest of the streams will come with the peer stream event,\n    // which calls addCascadedStream()\n    const nextPeer = getNextPeer();\n    const myIndex = order.indexOf(myId);\n    const prevId = order[myIndex - 1];\n    if (prevId && nextPeer) {\n        const prevStream = streams[prevId].clone();\n        nextPeer.addStream(prevStream);\n    }\n}\n\nexport function addCascadedStream(stream, dispatch) {\n    const { streams } = getState();\n\n    // Find the next upstream id from here that doesn't have a stream set\n    const upstreamIds = getUpstreamIds().slice(0, -1).reverse();\n    const id = upstreamIds.find((upstreamId) => !streams[upstreamId]);\n    dispatch({\n        type : 'STREAMS_ADD',\n        id,\n        stream,\n    });\n\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        nextPeer.addStream(stream);\n    }\n}\n\nexport function stopCascade(dispatch) {\n    changeMode(CASCADE_DONE, dispatch);\n}\n\nfunction resetStreams() {\n    const { myStream, peers } = getState();\n\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        // Remove the cascaded streams\n        // The streams stay in the order they're added\n        nextPeer.streams.slice(1).forEach((stream) => {\n            stream.getTracks().forEach((track) => track.stop());\n            nextPeer.removeStream(stream);\n        });\n    }\n\n    // Send live video back to everyone upstream\n    // They will reciprocate if they're not already sending video\n    const beforeIds = getUpstreamIds();\n    beforeIds.forEach((id) => {\n        const peer = peers[id];\n        peer.addStream(myStream.clone());\n    });\n}\n","import getStats from 'getstats';\nimport { serverSend } from './server';\nimport { getState } from '../reducer';\n\nlet streamReceivedTime;\nexport function setStreamReceivedTime() {\n    streamReceivedTime = Date.now();\n}\nlet playLatency;\nexport function setPlayLatency() {\n    playLatency = Date.now() - streamReceivedTime;\n}\nlet cascadeRecordingTime;\nexport function setCascadeRecordingTime() {\n    cascadeRecordingTime = Date.now();\n}\nlet beforeRecordLatency;\nfunction setBeforeRecordLatency() {\n    beforeRecordLatency = Date.now() - cascadeRecordingTime\n}\nlet receiveDelayAtRecordingStart;\nfunction setReceiveDelay() {\n    const { myId, order, peers } = getState();\n    const prevId = order[order.indexOf(myId) - 1]\n    if (prevId) {\n        const prevPeer = peers[prevId];\n        return new Promise((resolve) => {\n            getStats(prevPeer._pc, (result) => {\n                result.nomore(); // Just one time\n                // This only works in Chrome.\n                // TODO: does firefox report the same info?\n                result.results.forEach((item) => {\n                    const { id, mediaType, type } = item;\n                    const isReceived = id.split('_').pop() === 'recv';\n                    if (type === 'ssrc' && mediaType === 'video' && isReceived) {\n                        receiveDelayAtRecordingStart = item.googCurrentDelayMs;\n                        resolve();\n                    }\n                });\n            }, 2000);\n        });\n    }\n}\n\nexport function makeNewRecorder(stream, dispatch) {\n    // TODO: use specific codecs. check browser compatibility.\n    const recorder = new MediaRecorder(stream, { mimeType : 'video/webm' });\n    recorder.addEventListener('dataavailable', ({ data }) => {\n        dispatch({\n            type : 'FILES_ADD',\n            file : URL.createObjectURL(data),\n        });\n    });\n    recorder.addEventListener('start', async () => {\n        setBeforeRecordLatency();\n        await setReceiveDelay();\n        sendLatencyInfo();\n    });\n    return recorder;\n}\n\nexport function sendLatencyInfo() {\n    const { myId } = getState();\n    let latencyInfo = {\n        type   : 'latency_info',\n        fromId : myId,\n        beforeRecordLatency,\n        playLatency,\n        receiveDelayAtRecordingStart,\n    };\n    serverSend(latencyInfo);\n}\n","import Peer from 'simple-peer';\nimport { changeMode, addCascadedStream } from './cascade';\nimport { setStreamReceivedTime } from './recording';\nimport { serverSend } from './server';\nimport { CASCADE_DONE, READY, CASCADE_STANDBY } from '../modes';\nimport { getState } from '../reducer';\n\nexport function checkForNewPeers(action, dispatch) {\n    const { order : newOrder } = action;\n    const { myId, order : oldOrder, peers } = getState();\n    dispatch(action);\n    // If receiving order for the first time,\n    // initialize a new peer for everyone else waiting\n    if (oldOrder.length === 0) {\n        newOrder.forEach((id) => {\n            if (id !== myId && !peers[id]) {\n                makeNewPeer(true, id, dispatch);\n            }\n        });\n    }\n}\n\nfunction makeNewPeer(initiator, newId, dispatch) {\n    const { myId, myStream } = getState();\n    const peer = new Peer({\n        initiator,\n        stream : myStream.clone()\n    });\n\n    peer.on('signal', (signal) => {\n        serverSend({\n            type   : 'PEER_SIGNAL',\n            forId  : newId,\n            fromId : myId,\n            signal\n        });\n    });\n\n    peer.on('stream', (theirStream) => {\n        const { mode, myId, order } = getState();\n        if (mode === CASCADE_STANDBY) {\n            addCascadedStream(theirStream, dispatch);\n        } else {\n            dispatch({\n                type   : 'STREAMS_ADD',\n                id     : newId,\n                stream : theirStream\n            });\n            // Mark when the previous stream is first received to measure the play latency\n            // (the time it takes from receiving the stream to viewing the first frame)\n            const isPrev = order.indexOf(newId) === order.indexOf(myId) - 1;\n            if (mode === READY && isPrev) {\n                setStreamReceivedTime();\n            }\n            // After cascading, if this is sent from downstream,\n            // we need to reciprocate and reopen our stream as well\n            if (mode === CASCADE_DONE && peer.streams.length === 0) {\n                peer.addStream(myStream.clone());\n            }\n        }\n    });\n\n    // The peer data channel is currently only used\n    // for propagating mode changes down the cascade\n    peer.on('data', (data) => {\n        const { mode, type } = JSON.parse(data.toString());\n        if (type === 'MODE_SET') {\n            changeMode(mode, dispatch);\n            return;\n        }\n        console.error(`Unknown action \"${type}\" sent thru peer`);\n    });\n\n    dispatch({\n        type : 'PEERS_ADD',\n        id   : newId,\n        peer\n    });\n    return peer;\n}\n\nexport function handlePeerSignal(action, dispatch) {\n    const { peers } = getState();\n    const { fromId, signal } = action;\n    const existingPeer = peers[fromId];\n    const peer = existingPeer || makeNewPeer(false, fromId, dispatch);\n    peer.signal(signal);\n}\n","import { changeMode } from './cascade';\nimport { checkForNewPeers, handlePeerSignal } from './peers';\nimport { getState } from '../reducer';\n\nexport function serverSend(sendAction) {\n    const { server } = getState();\n    server.send(JSON.stringify(sendAction));\n}\n\nexport function makeServer(serverURL, dispatch) {\n    // We set the server connection here because\n    // we need access to dispatch in the event listeners.\n    const server = new WebSocket(serverURL);\n    server.addEventListener('open', () => console.log('opening socket'));\n    // TODO: handle failed connection\n    server.addEventListener('close', () => console.log('closing socket'));\n    server.addEventListener('error', () => console.log('socket error'));\n    server.addEventListener('message', ({ data }) => {\n        const action = JSON.parse(data);\n        console.log('ACTION (from server):', action);\n        // Some actions have side effects and should only happen once.\n        // (a single dispatch can call the reducer multiple times)\n        switch (action.type) {\n            case 'MODE_SET':\n                changeMode(action.mode, dispatch);\n                break;\n            case 'ORDER_SET':\n                checkForNewPeers(action, dispatch);\n                break;\n            case 'PEER_SIGNAL':\n                handlePeerSignal(action, dispatch);\n                break;\n            case 'pong':\n                break;\n            default:\n                // Otherwise, messages from the server\n                // are simply actions for the reducer.\n                dispatch(action);\n        }\n    });\n    setInterval(() => {\n        // Keep the connection alive\n        serverSend({ type : 'ping' });\n    }, 30000);\n    dispatch({\n        type : 'SERVER_SET',\n        server\n    });\n}\n","import { CASCADE_DONE, CASCADE_STANDBY, READY, SETUP } from './modes';\nimport { makeNewRecorder } from './actions/recording';\n\nexport const initialState = {\n    // This needs to be stored here so all video elements output sound to the same place.\n    audioOutput   : null,\n    // Blob URLs of the recorded myStream (not combined with other peers)\n    files         : [],\n    // The initiator is whoever is in the first spot.\n    // They have all the power. They get to rearrange the order of the cascade.\n    // And they press the big GO button.\n    iAmInitiator  : false,\n    mode          : SETUP,\n    // UUID generated by the server\n    myId          : null,\n    // MediaStream object containing audio/video\n    myStream      : null,\n    // The order of the participants - how the audios cascades\n    order         : [],\n    // Direct connections to other participants via WebRTC that provide the streams\n    // Keys are the server-generated IDs\n    peers         : {},\n    // Records myStream during cascade\n    recorder      : null,\n    // WebSocket server connection to send the initial WebRTC signals (and a biiiit more after)\n    server        : null,\n    // MediaStream objects for remote peers\n    // Keys are the server-generated IDs\n    streams       : {}\n};\n\nfunction reducer(state, action) {\n    console.log('ACTION', action);\n    const { files, mode, myId, myStream, order, peers, streams } = state;\n    switch (action.type) {\n        case 'AUDIO_OUTPUT_SET':\n            return {\n                ...state,\n                audioOutput : action.deviceId\n            };\n        case 'FILES_ADD':\n            return {\n                ...state,\n                files : files.concat(action.file)\n            };\n        case 'MODE_SET': {\n            const { mode : newMode } = action;\n            // When starting or ending the cascade, remove all streams except\n            // the prev one (they will be stopped shortly)\n            let newStreams = streams;\n            if (newMode === CASCADE_STANDBY || newMode === CASCADE_DONE) {\n                newStreams = {};\n                const myIndex = order.indexOf(myId);\n                const prevId = order[myIndex - 1];\n                if (prevId) {\n                    newStreams[prevId] = streams[prevId];\n                }\n            }\n            return {\n                ...state,\n                mode    : newMode,\n                streams : newStreams\n            };\n        }\n        case 'MY_ID_SET':\n            return {\n                ...state,\n                myId : action.id\n            };\n        case 'MY_STREAM_SET': {\n            // Move from setup mode when myStream is first set\n            const newMode = myStream ? mode : READY;\n            return {\n                ...state,\n                mode     : newMode,\n                myStream : action.stream,\n                recorder : makeNewRecorder(action.stream, action.dispatch)\n            };\n        }\n        case 'ORDER_SET': {\n            const { order : newOrder } = action;\n            const myOrderIndex = newOrder.findIndex((otherId) => myId === otherId);\n            const iAmInitiator = myOrderIndex === 0;\n            // If an id has been taken away from the order, remove the peers and streams\n            const [newPeers, newStreams] = newOrder.reduce((accumulator, id) => {\n                if (id === myId) return accumulator;\n                return [\n                    {\n                        ...accumulator[0],\n                        [id] : peers[id]\n                    },\n                    {\n                        ...accumulator[1],\n                        [id] : streams[id]\n                    }\n                ]\n            }, [{}, {}]);\n            return {\n                ...state,\n                iAmInitiator,\n                order   : newOrder,\n                peers   : newPeers,\n                streams : newStreams\n            };\n        }\n        case 'PEERS_ADD':\n            return {\n                ...state,\n                peers : {\n                    ...peers,\n                    [action.id] : action.peer\n                }\n            };\n        case 'SERVER_SET':\n            return {\n                ...state,\n                server : action.server\n            };\n        case 'STREAMS_ADD':\n            return {\n                ...state,\n                streams : {\n                    ...streams,\n                    [action.id] : action.stream\n                }\n            };\n        case 'STREAMS_REMOVE': {\n            const newStreams = { ...streams };\n            delete newStreams[action.id];\n            return {\n                ...state,\n                streams : newStreams\n            };\n        }\n        default: {\n            console.error('Unknown action:', action);\n            return state;\n        }\n    }\n};\n\nlet evilBoogiemanGlobalState = {};\nexport function getState() {\n    return evilBoogiemanGlobalState;\n}\n\nexport default function reduceAndSave(state, action) {\n    const newState = reducer(state, action);\n    evilBoogiemanGlobalState = newState;\n    return newState;\n}\n","import React, { createContext, useReducer } from 'react';\nimport reducer, { initialState } from '../state/reducer';\n\nconst Store = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    return (\n        <Context.Provider value={[state, dispatch]}>\n            {children}\n        </Context.Provider>\n    )\n};\n\nexport const Context = createContext(initialState);\nexport default Store;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Context } from '../Store';\n\n// Safari, what the hell.\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst audioCtx = new AudioContext();\n\nconst AudioVideoSetup = () => {\n    const [state, dispatch] = useContext(Context);\n    const { audioOutput, myStream, peers } = state;\n    const [devices, setDevices] = useState([]);\n    const [showSetup, setShowSetup] = useState(false);\n    const [audioInput, setAudioInput] = useState(null);\n    const [videoInput, setVideoInput] = useState(null);\n    const setAudioOutput = (deviceId) => {\n        dispatch({\n            type : 'AUDIO_OUTPUT_SET',\n            deviceId\n        });\n    }\n\n    const setStream = async () => {\n        const stream = await navigator.mediaDevices.getUserMedia({\n            audio : {\n                deviceId         : audioInput && {\n                    exact : audioInput\n                },\n                // These cause latency\n                autoGainControl  : { exact : false },\n                echoCancellation : false,\n                noiseSuppression : { exact : false },\n            },\n            video : {\n                deviceId : videoInput && {\n                    exact : videoInput\n                }\n            }\n        });\n        if (myStream) {\n            myStream.getTracks().forEach((track) => track.stop());\n            Object.values(peers).forEach((peer) => {\n                peer.removeStream(myStream)\n                peer.addStream(stream);\n            });\n        }\n        // Strangely, there is a delay when hearing the audio via the video element.\n        // But the delay is noticeably shorter when using the Web Audio API...\n        // (But only in Chrome?)\n        const source = audioCtx.createMediaStreamSource(stream);\n        // TODO: set output properly. See:\n        // https://stackoverflow.com/questions/41863094/how-to-select-destination-output-device-using-web-audio-api\n        source.connect(audioCtx.destination);\n        dispatch({\n            type : 'MY_STREAM_SET',\n            // Need to dispatch in the recorder ondataavailable event listener\n            dispatch,\n            stream\n        });\n    };\n\n    useEffect(() => {\n        // On Safari, enumerateDevices only works after getUserMedia is called.\n        // So wait for that to happen before populating the dropdowns.\n        // (Also, missing things even after it's called...)\n        if (myStream && showSetup) {\n            const findDevices = async () => {\n                const deviceList = await navigator.mediaDevices.enumerateDevices();\n                setDevices(deviceList);\n            };\n            findDevices();\n        }\n    }, [myStream, showSetup]);\n\n    useEffect(() => {\n        // Called on the first render\n        // (and any time audioInput or videoInput change)\n        setStream();\n    }, [audioInput, videoInput]);\n\n    const kinds = ['audioinput', 'audiooutput', 'videoinput'];\n    const kindLabels = ['Audio Input', 'Audio Output', 'Video Input'];\n    const selectedDevices = [\n        [audioInput, setAudioInput],\n        [audioOutput, setAudioOutput],\n        [videoInput, setVideoInput]\n    ];\n    // Sort the available devices into the three buckets\n    const devicesSorted = devices.reduce((accumulator, device) => {\n        const { deviceId, kind } = device;\n        const index = kinds.indexOf(kind);\n        return [\n            ...accumulator.slice(0, index),\n            {\n                ...accumulator[index],\n                [deviceId] : device,\n            },\n            ...accumulator.slice(index + 1)\n        ]\n    }, [{}, {}, {}]);\n\n    return (\n        <section className=\"av-setup\">\n            { showSetup ? <>\n                { devicesSorted.map((deviceMap, index) => {\n                    const devicesOfType = Object.values(deviceMap);\n                    if (devicesOfType.length === 0) return null;\n                    const label = kindLabels[index];\n                    const [selectedDeviceId, setSelectedDeviceId] = selectedDevices[index];\n                    return (\n                        <label key={label}>\n                            {label}\n                            <select\n                                onChange={(event) => setSelectedDeviceId(event.target.value)}\n                                value={selectedDeviceId || 'default'}\n                            >\n                                { devicesOfType.map(({ deviceId, label }) => (\n                                    <option key={deviceId} value={deviceId}>{label}</option>\n                                )) }\n                            </select>\n                        </label>\n                    );\n                }) }\n                <button onClick={() => setShowSetup(false)}>x</button>\n            </> :\n            <button onClick={() => setShowSetup(true)}>Audio/Video settings</button> }\n        </section>\n    );\n};\n\nexport default AudioVideoSetup;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Context } from '../Store';\nimport { CASCADE_STANDBY_DURATION, changeMode } from '../../state/actions/cascade';\nimport { CASCADE_RECORDING } from '../../state/modes';\n\nconst Countdown = () => {\n    // Counts down to zero from here\n    const countdownStart = 3;\n    const [, dispatch] = useContext(Context);\n    const [number, setNumber] = useState(countdownStart);\n    useEffect(() => {\n        if (number > 0) {\n            setTimeout(() => {\n                setNumber(number - 1);\n            }, CASCADE_STANDBY_DURATION / countdownStart);\n        } else {\n            changeMode(CASCADE_RECORDING, dispatch);\n        }\n    }, [number]);\n    return <span className=\"countdown\">{number}</span>\n};\n\nexport default Countdown;\n","import { useEffect, useRef } from 'react';\n\nexport default function usePrevious(value) {\n    const prevRef = useRef();\n    useEffect(() => {\n        prevRef.current = value;\n    }, [value]);\n    return prevRef.current;\n}\n","import React, { useCallback, useContext, useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport AudioVideoSetup from './AudioVideoSetup';\nimport Countdown from './Countdown';\nimport { Context } from '../Store';\nimport usePrevious from '../../state/use-previous';\nimport { CASCADE_DONE, CASCADE_RECORDING, CASCADE_STANDBY, READY } from '../../state/modes';\nimport { setPlayLatency } from '../../state/actions/recording';\nimport { serverSend } from '../../state/actions/server';\n\nconst VideoSquare = ({ id, numColumns, stream }) => {\n    const [state, dispatch] = useContext(Context);\n    const { audioOutput, iAmInitiator, mode, myId, order } = state;\n    const isMe = id === myId;\n    const isFromPrevious = order.indexOf(id) === order.indexOf(myId) - 1;\n    const prevStream = usePrevious(stream);\n    const prevAudioOutput = usePrevious(audioOutput);\n\n    const videoRef = useCallback((node) => {\n        if (node) {\n            if (stream !== prevStream) {\n                if ('srcObject' in node) {\n                    node.srcObject = stream;\n                } else {\n                    node.src = URL.createObjectURL(stream);\n                }\n                // TODO: what if the order changes?\n                if (isFromPrevious) {\n                    node.addEventListener('play', () => {\n                        setPlayLatency();\n                    });\n                }\n            }\n\n            if (audioOutput && audioOutput !== prevAudioOutput) {\n                // TODO: check if available, alert user if not\n                // (Firefox needs setting enabled)\n                // (Safari is ?)\n                node.setSinkId(audioOutput);\n            }\n        }\n    }, [audioOutput, stream]);\n\n    const dndRef = useRef(null);\n    const [{ isDragging }, connectDrag] = useDrag({\n        item    : { id, type : 'participant' },\n        canDrag : () => iAmInitiator && [READY, CASCADE_DONE].includes(mode),\n        collect : (monitor) => ({ isDragging : monitor.isDragging() })\n    });\n    const [, connectDrop] = useDrop({\n        accept : 'participant',\n        drop   : (item) => {\n            serverSend({\n                type   : 'ORDER_SET',\n                fromId : myId,\n                order,\n            });\n        },\n        hover  : ({ id : hoveredOverId }) => {\n            if (hoveredOverId !== id) {\n                const myIndex = order.indexOf(id);\n                const theirIndex = order.indexOf(hoveredOverId);\n                const newOrder = [...order];\n                newOrder[myIndex] = hoveredOverId;\n                newOrder[theirIndex] = id;\n                dispatch({\n                    type  : 'ORDER_SET',\n                    order : newOrder\n                });\n            }\n        }\n    });\n    connectDrag(dndRef);\n    connectDrop(dndRef);\n\n    const orderNumber = order.indexOf(id) + 1;\n    const row = Math.ceil(orderNumber / numColumns);\n    const numBeforeRow = (row - 1) * numColumns;\n    const col = orderNumber - numBeforeRow;\n    const gridStyle = {\n        gridColumn : `${col} / span 1`,\n        gridRow    : `${row} / span 1`,\n        opacity    : isDragging ? 0.5 : 1,\n    };\n    const orderNumberStyle = {\n        backgroundColor : mode === CASCADE_STANDBY ? 'yellow' : (\n            mode === CASCADE_RECORDING ? 'red' : 'green'\n        )\n    };\n\n    return (\n        <div ref={dndRef} className=\"video-draggable\" style={gridStyle}>\n            { stream && <video autoPlay muted={isMe} ref={videoRef} /> }\n            { isMe && <AudioVideoSetup /> }\n            { orderNumber > 0 &&\n                <span className=\"order-number\" style={orderNumberStyle}>{orderNumber}</span> }\n            { mode === CASCADE_STANDBY && isMe && iAmInitiator &&\n                <Countdown /> }\n        </div>\n    );\n};\n\nexport default VideoSquare;\n","import React from 'react';\n\nconst Welcome = ({ onClick }) => {\n    return <>\n        <div>Welcome. Let's make the connections.</div>\n        <div>First, enable your audio and video. Before you click the button, put on headphones so there's no feedback!</div>\n        <button onClick={onClick}>\n            Let's go!\n        </button>\n    </>;\n};\n\nexport default Welcome;\n","import React, { useContext, useState } from 'react';\nimport { Context } from './Store';\nimport VideoSquare from './VideoSquare';\nimport Welcome from './Welcome';\nimport { startCascade, stopCascade } from '../state/actions/cascade';\nimport { CASCADE_DONE, CASCADE_RECORDING, READY } from '../state/modes';\n\nconst GreenRoom = () => {\n    const [state, dispatch] = useContext(Context);\n    console.log('STATE', state);\n    const { files, iAmInitiator, mode, myId, myStream, streams } = state;\n    const [showWelcome, setShowWelcome] = useState(true);\n\n    if (showWelcome) {\n        return <Welcome onClick={() => setShowWelcome(false)} />;\n    }\n\n    const numParticipants = Object.values(streams).length + 1;\n    // Add a new row when the number of participants exceeds the perfect square\n    // (2-4 partcipants have two columns, 5-9 have three columns, 10-16 have four columns, etc)\n    const cols = Math.ceil(Math.sqrt(numParticipants));\n    const rows = Math.ceil(numParticipants / cols);\n    const colPct = 100 / cols;\n    const rowPct = 100 / rows;\n    const gridStyles = {\n        gridTemplateColumns : `repeat(${cols}, ${colPct}%)`,\n        gridTemplateRows    : `repeat(${cols}, ${rowPct}%)`,\n    };\n\n    return <>\n        <main className=\"video-grid\" style={gridStyles}>\n            <VideoSquare id={myId} numColumns={cols} stream={myStream} />\n            { Object.entries(streams).map(([id, stream]) =>\n                <VideoSquare key={id} id={id} numColumns={cols} stream={stream} />\n            ) }\n        </main>\n        <nav>\n            { [READY, CASCADE_DONE].includes(mode) && iAmInitiator && numParticipants > 1 &&\n                <button\n                    className=\"big-button\"\n                    onClick={() => startCascade(dispatch)}\n                >\n                    GO\n                </button> }\n            { mode === CASCADE_RECORDING && iAmInitiator &&\n                <button\n                    className=\"big-button\"\n                    onClick={() => stopCascade(dispatch)}\n                >\n                    STOP\n                </button> }\n        </nav>\n        <aside>\n            { files.map((blobURL, index) =>\n                <a\n                    key={blobURL}\n                    download={`cascade${index + 1}.webm`}\n                    href={blobURL}\n                >\n                    Download cascade {index + 1} video\n                </a>) }\n        </aside>\n    </>;\n};\n\nexport default GreenRoom;\n","import { useContext, useEffect } from 'react';\nimport { Context } from './Store';\nimport usePrevious from '../state/use-previous';\nimport { makeServer } from '../state/actions/server';\n\nconst ServerProvider = ({ children }) => {\n    const [state, dispatch] = useContext(Context);\n    const { myStream } = state;\n    const prevMyStream = usePrevious(myStream);\n    const params = new URLSearchParams(window.location.search);\n    const serverURL = params.get('server');\n    useEffect(() => {\n        // Start the server connection only when myStream is first initiated\n        if (myStream && !prevMyStream && serverURL) {\n            makeServer(serverURL, dispatch);\n        }\n    }, [myStream, prevMyStream, serverURL]);\n\n    if (!serverURL) {\n        return \"You have to have a server. Sorry, that's just the way it is.\";\n    }\n\n    return children;\n};\n\nexport default ServerProvider;\n","import React from 'react';\nimport { DndProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport GreenRoom from './GreenRoom';\nimport ServerProvider from './ServerProvider';\nimport Store from './Store';\nimport './App.css';\n\nconst App = () => {\n    // TODO: Splash to explain what it is, button to enter green room.\n    return (\n        <Store>\n            <ServerProvider>\n                <DndProvider backend={HTML5Backend}>\n                    <GreenRoom />\n                </DndProvider>\n            </ServerProvider>\n        </Store>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}