{"version":3,"sources":["state/actions/server.js","state/actions/peers.js","state/actions/recording.js","state/actions/cascade.js","state/reducer.js","components/Store.jsx","components/FileList.jsx","components/Navigation.jsx","components/VideoSquare/AudioVideoSetup.jsx","components/VideoSquare/Countdown.jsx","state/use-previous.js","components/VideoSquare/Video.jsx","components/VideoSquare/index.jsx","components/VideoGrid.jsx","components/Welcome.jsx","components/GreenRoom.jsx","components/ServerProvider.jsx","components/App.js","serviceWorker.js","index.js"],"names":["serverSend","sendAction","getState","server","send","JSON","stringify","makeServer","serverURL","dispatch","WebSocket","addEventListener","console","log","data","action","parse","type","changeMode","mode","newOrder","order","myId","oldOrder","peers","streams","length","forEach","id","makeNewPeer","reduce","accumulator","includes","concat","cleanStream","destroy","handleOrderSet","fromId","signal","handlePeerSignal","setInterval","streamReceivedTimes","cascadeRecordingTime","beforeRecordLatency","playLatencies","makeNewRecorder","stream","recorder","MediaRecorder","mimeType","files","blobURL","URL","createObjectURL","fileName","indexOf","a","Date","now","sendLatencyInfo","prevIndex","prevId","playLatency","initiator","newId","myStream","myStreamClone","clone","peer","Peer","_sendStreams","on","forId","theirStream","CASCADE_STANDBY","getUpstreamIds","slice","reverse","find","upstreamId","nextPeer","getNextPeer","addStream","addCascadedStream","CASCADE_DONE","streamClone","toString","error","push","removeStream","READY","state","nextIndex","getTracks","track","stop","cascadeModeSet","newMode","myIndex","getDownstreamIds","pop","prevStream","setupCascade","start","resetStreams","initialState","audioOutput","iAmInitiator","evilBoogiemanGlobalState","reduceAndSave","newState","deviceId","justPrevStream","newStreams","findIndex","otherId","newPeers","reducer","Context","createContext","Store","children","useReducer","Provider","value","FileList","useContext","map","index","key","download","href","Navigation","className","onClick","startCascade","stopCascade","audioCtx","window","AudioContext","webkitAudioContext","AudioVideoSetup","style","useState","devices","setDevices","showSetup","setShowSetup","audioInput","setAudioInput","videoInput","setVideoInput","setStream","navigator","mediaDevices","getUserMedia","audio","exact","autoGainControl","echoCancellation","noiseSuppression","video","Object","values","createMediaStreamSource","connect","destination","useEffect","enumerateDevices","deviceList","findDevices","kinds","kindLabels","selectedDevices","devicesSorted","device","kind","deviceMap","devicesOfType","label","selectedDeviceId","setSelectedDeviceId","onChange","event","target","Countdown","number","setNumber","setTimeout","CASCADE_STANDBY_DURATION","usePrevious","prevRef","useRef","current","Video","isMe","setVideoAspectRatio","prevAudioOutput","videoRef","useCallback","node","videoWidth","videoHeight","srcObject","src","setPlayLatency","setSinkId","autoPlay","muted","ref","VideoSquare","col","orderNumber","numColumns","row","dndRef","useDrag","item","canDrag","collect","monitor","isDragging","connectDrag","useDrop","accept","drop","hover","hoveredOverId","theirIndex","connectDrop","gridColumn","gridRow","opacity","videoAspectRatio","left","setLeft","top","setTop","element","videoResizeObserver","ResizeObserver","entries","entry","contentRect","width","height","observe","disconnect","showOrderNumber","orderNumberStyle","backgroundColor","settingsButtonStyle","right","VideoGrid","numParticipants","cols","Math","ceil","sqrt","rows","colPct","rowPct","gridStyles","gridTemplateColumns","gridTemplateRows","getOrderProps","Welcome","GreenRoom","showWelcome","setShowWelcome","ServerProvider","prevMyStream","URLSearchParams","location","search","get","App","DndProvider","backend","HTML5Backend","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a60bfbd9.chunk.js","sourcesContent":["import { changeMode } from './cascade';\nimport { handleOrderSet, handlePeerSignal } from './peers';\nimport { getState } from '../reducer';\n\nexport function serverSend(sendAction) {\n    const { server } = getState();\n    server.send(JSON.stringify(sendAction));\n}\n\nexport function makeServer(serverURL, dispatch) {\n    // We set the server connection here because\n    // we need access to dispatch in the event listeners.\n    const server = new WebSocket(serverURL);\n    server.addEventListener('open', () => console.log('opening socket'));\n    // TODO: handle failed connection\n    server.addEventListener('close', () => console.log('closing socket'));\n    server.addEventListener('error', () => console.log('socket error'));\n    server.addEventListener('message', ({ data }) => {\n        const action = JSON.parse(data);\n        console.log('ACTION (from server):', action);\n        // Some actions have side effects and should only happen once.\n        // (a single dispatch can call the reducer multiple times)\n        switch (action.type) {\n            case 'MODE_SET':\n                changeMode(action.mode, dispatch);\n                break;\n            case 'ORDER_SET':\n                handleOrderSet(action, dispatch);\n                break;\n            case 'PEER_SIGNAL':\n                handlePeerSignal(action, dispatch);\n                break;\n            case 'pong':\n                break;\n            default:\n                // Otherwise, messages from the server\n                // are simply actions for the reducer.\n                dispatch(action);\n        }\n    });\n    setInterval(() => {\n        // Keep the connection alive\n        serverSend({ type : 'ping' });\n    }, 30000);\n    dispatch({\n        type : 'SERVER_SET',\n        server\n    });\n}\n","import Peer from 'simple-peer';\nimport {\n    CASCADE_DONE,\n    CASCADE_STANDBY,\n    addCascadedStream,\n    changeMode,\n    cleanStream\n } from './cascade';\nimport { setStreamReceivedTime } from './recording';\nimport { serverSend } from './server';\nimport { getState } from '../reducer';\n\nexport function handleOrderSet(action, dispatch) {\n    const { order : newOrder } = action;\n    const { myId, order : oldOrder, peers, streams } = getState();\n    dispatch(action);\n\n    // If receiving order for the first time,\n    // initialize a new peer for everyone else waiting\n    if (oldOrder.length === 0) {\n        newOrder.forEach((id) => {\n            if (id !== myId && !peers[id]) {\n                makeNewPeer(true, id, dispatch);\n            }\n        });\n    }\n\n    // If peers have been removed, clean up the connections\n    const removedPeers = oldOrder.reduce((accumulator, id) => {\n        if (newOrder.includes(id)) return accumulator;\n        return accumulator.concat(id);\n    }, []);\n    removedPeers.forEach((id) => {\n        cleanStream(streams[id]);\n        peers[id].destroy();\n    });\n}\n\nfunction makeNewPeer(initiator, newId, dispatch) {\n    const { myId, myStream } = getState();\n    // Clone this because we'll stop the tracks during cascade,\n    // which would stop our view of ourself\n    const myStreamClone = myStream.clone();\n    const peer = new Peer({\n        initiator,\n        stream : myStreamClone\n    });\n    // Peer doesn't keep track of the sending streams.\n    // We're doing a bunch of stream cloning\n    // (because you can't send the same stream more than once :shrug:)\n    // so we need to keep track of the streams that were sent.\n    peer._sendStreams = [myStreamClone];\n\n    peer.on('signal', (signal) => {\n        serverSend({\n            type   : 'PEER_SIGNAL',\n            forId  : newId,\n            fromId : myId,\n            signal\n        });\n    });\n\n    peer.on('stream', (theirStream) => {\n        const { mode } = getState();\n        if (mode === CASCADE_STANDBY) {\n            addCascadedStream(theirStream, dispatch);\n        } else {\n            // Mark when the stream is first received to measure the play latency\n            // (the time it takes from receiving the stream to viewing the first frame)\n            setStreamReceivedTime(newId);\n            dispatch({\n                type   : 'STREAMS_ADD',\n                id     : newId,\n                stream : theirStream\n            });\n            // After cascading, if this is sent from downstream,\n            // we need to reciprocate and reopen our stream as well\n            // (except for the next peer, which we're already streaming to)\n            if (mode === CASCADE_DONE && peer._sendStreams.length === 0) {\n                const streamClone = myStream.clone();\n                addStream(peer, streamClone);\n            }\n        }\n    });\n\n    // The peer data channel is currently only used\n    // for propagating mode changes down the cascade\n    peer.on('data', (data) => {\n        const { mode, type } = JSON.parse(data.toString());\n        if (type === 'MODE_SET') {\n            changeMode(mode, dispatch);\n            return;\n        }\n        console.error(`Unknown action \"${type}\" sent thru peer`);\n    });\n\n    dispatch({\n        type : 'PEERS_ADD',\n        id   : newId,\n        peer\n    });\n    return peer;\n}\n\nexport function handlePeerSignal(action, dispatch) {\n    const { peers } = getState();\n    const { fromId, signal } = action;\n    const existingPeer = peers[fromId];\n    const peer = existingPeer || makeNewPeer(false, fromId, dispatch);\n    peer.signal(signal);\n}\n\nexport function addStream(peer, stream) {\n    peer.addStream(stream);\n    peer._sendStreams.push(stream);\n}\n\nexport function removeStream(peer, stream) {\n    cleanStream(stream);\n    peer.removeStream(stream);\n}\n","import { serverSend } from './server';\nimport { getState } from '../reducer';\n\nconst streamReceivedTimes = {};\nexport function setStreamReceivedTime(id) {\n    streamReceivedTimes[id] = Date.now();\n}\nconst playLatencies = {};\nexport function setPlayLatency(id) {\n    playLatencies[id] = Date.now() - streamReceivedTimes[id];\n}\nlet cascadeRecordingTime;\nexport function setCascadeRecordingTime() {\n    cascadeRecordingTime = Date.now();\n}\nlet beforeRecordLatency;\nfunction setBeforeRecordLatency() {\n    beforeRecordLatency = Date.now() - cascadeRecordingTime;\n}\n\nexport function makeNewRecorder(stream, dispatch) {\n    // TODO: use specific codecs. check browser compatibility.\n    const recorder = new MediaRecorder(stream, { mimeType : 'video/webm' });\n    recorder.addEventListener('dataavailable', ({ data }) => {\n        const { files, myId, order } = getState();\n        dispatch({\n            type     : 'FILES_ADD',\n            blobURL  : URL.createObjectURL(data),\n            fileName : `cascade${files.length + 1}_video${order.indexOf(myId) + 1}.webm`\n        });\n    });\n    recorder.addEventListener('start', async () => {\n        setBeforeRecordLatency();\n        sendLatencyInfo();\n    });\n    return recorder;\n}\n\nexport function sendLatencyInfo() {\n    const { myId, order } = getState();\n    const prevIndex = order.indexOf(myId) - 1;\n    const prevId = order[prevIndex];\n    const playLatency = playLatencies[prevId];\n    let latencyInfo = {\n        type   : 'latency_info',\n        fromId : myId,\n        beforeRecordLatency,\n        playLatency,\n    };\n    serverSend(latencyInfo);\n}\n","import { addStream, removeStream } from './peers';\nimport { setCascadeRecordingTime } from './recording';\nimport { serverSend } from './server';\nimport { getState } from '../reducer';\n\n// User is connecting audio/video, hasn't connected to server\nexport const SETUP = 0;\n// Connected to server, waiting for initiator to press GO\nexport const READY = 1;\n// Cascade has started but recording hasn't started yet.\n// For initiator, there's a short countdown.\n// For everyone else, it's just waiting on the stream to arrive.\nexport const CASCADE_STANDBY = 2;\n// Cascade in progress!\n// This will end for the initiator when they press the DONE button\n// and for everyone else when the stream ends.\nexport const CASCADE_RECORDING = 3;\n// After the cascade is finished, restarting connections needs to be handled differently.\n// Upstream peers should only send their video downstream after the downstream peers have finished.\nexport const CASCADE_DONE = 4;\nexport const CASCADE_STANDBY_DURATION = 6000; // milliseconds\n\nfunction getNextPeer(state) {\n    const { myId, order, peers } = getState();\n    const nextIndex = order.indexOf(myId) + 1;\n    const nextId = order[nextIndex];\n    return peers[nextId];\n}\n\nexport function cleanStream(stream) {\n    stream.getTracks().forEach((track) => track.stop());\n}\n\nfunction cascadeModeSet(mode) {\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        nextPeer.send(JSON.stringify({\n            type : 'MODE_SET',\n            mode\n        }));\n    }\n}\n\nexport function changeMode(newMode, dispatch) {\n    dispatch({\n        type : 'MODE_SET',\n        mode : newMode\n    });\n\n    const { recorder } = getState();\n\n    switch (newMode) {\n        case CASCADE_STANDBY:\n            setupCascade();\n            break;\n        case CASCADE_RECORDING:\n            setCascadeRecordingTime();\n            recorder.start();\n            cascadeModeSet(CASCADE_RECORDING);\n            break;\n        case CASCADE_DONE:\n            recorder.stop();\n            cascadeModeSet(CASCADE_DONE);\n            resetStreams();\n            break;\n        default:\n    }\n}\n\nexport function startCascade(dispatch) {\n    const { myId } = getState();\n    // dispatch MODE_SET and broadcast via server\n    // (server will set lock on new participants)\n    const mode = CASCADE_STANDBY;\n    const action = {\n        type   : 'MODE_SET',\n        fromId : myId,\n        mode\n    };\n    serverSend(action);\n    changeMode(mode, dispatch);\n}\n\nexport function getDownstreamIds() {\n    const { myId, order } = getState();\n    const myIndex = order.indexOf(myId);\n    return order.slice(myIndex + 1);\n}\n\nexport function getUpstreamIds() {\n    const { myId, order } = getState();\n    const myIndex = order.indexOf(myId);\n    return order.slice(0, myIndex);\n}\n\nfunction setupCascade() {\n    const { myId, order, peers, streams } = getState();\n\n    // Disconnect stream from all upstream peers\n    // and all downstream peers except the one right after\n    const disconnectIds = [\n        ...getUpstreamIds(),\n        ...getDownstreamIds().slice(1)\n    ];\n    disconnectIds.forEach((id) => {\n        const peer = peers[id];\n        // There should only be one stream per peer in this stage\n        const stream = peer._sendStreams.pop();\n        removeStream(peer, stream);\n    });\n\n    // To start, send the stream from the previous peer\n    // to the next peer in the cascade.\n    // The rest of the streams will come with the peer stream event,\n    // which calls addCascadedStream()\n    const nextPeer = getNextPeer();\n    const myIndex = order.indexOf(myId);\n    const prevId = order[myIndex - 1];\n    if (prevId && nextPeer) {\n        const prevStream = streams[prevId];\n        addStream(nextPeer, prevStream.clone());\n    }\n}\n\nexport function addCascadedStream(stream, dispatch) {\n    const { streams } = getState();\n\n    // Find the next upstream id from here that doesn't have a stream set\n    const upstreamIds = getUpstreamIds().slice(0, -1).reverse();\n    const id = upstreamIds.find((upstreamId) => !streams[upstreamId]);\n    dispatch({\n        type : 'STREAMS_ADD',\n        id,\n        stream,\n    });\n\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        addStream(nextPeer, stream);\n    }\n}\n\nexport function stopCascade(dispatch) {\n    changeMode(CASCADE_DONE, dispatch);\n}\n\nfunction resetStreams() {\n    const { myStream, peers } = getState();\n\n    const nextPeer = getNextPeer();\n    if (nextPeer) {\n        // Remove the cascaded streams\n        while (nextPeer._sendStreams.length > 1) {\n            const stream = nextPeer._sendStreams.pop();\n            removeStream(nextPeer, stream);\n        }\n    }\n\n    // Send live video back to everyone upstream\n    // They will reciprocate if they're not already sending video\n    const beforeIds = getUpstreamIds();\n    beforeIds.forEach((id) => {\n        const peer = peers[id];\n        addStream(peer, myStream.clone());\n    });\n}\n","import { CASCADE_DONE, CASCADE_STANDBY, READY, SETUP } from './actions/cascade';\nimport { makeNewRecorder } from './actions/recording';\n\nexport const initialState = {\n    // This needs to be stored here so all video elements output sound to the same place.\n    audioOutput   : null,\n    // Blob URLs of the recorded myStream (not combined with other peers)\n    files         : [],\n    // The initiator is whoever is in the first spot.\n    // They have all the power. They get to rearrange the order of the cascade.\n    // And they press the big GO button.\n    iAmInitiator  : false,\n    mode          : SETUP,\n    // UUID generated by the server\n    myId          : null,\n    // MediaStream object containing audio/video\n    myStream      : null,\n    // The order of the participants - how the audios cascades\n    order         : [],\n    // Direct connections to other participants via WebRTC that provide the streams\n    // Keys are the server-generated IDs\n    peers         : {},\n    // Records myStream during cascade\n    recorder      : null,\n    // WebSocket server connection to send the initial WebRTC signals (and a biiiit more after)\n    server        : null,\n    // MediaStream objects for remote peers\n    // Keys are the server-generated IDs\n    streams       : {}\n};\n\nfunction reducer(state, action) {\n    console.log('ACTION', action);\n    const { files, mode, myId, myStream, order, peers, streams } = state;\n    switch (action.type) {\n        case 'AUDIO_OUTPUT_SET':\n            return {\n                ...state,\n                audioOutput : action.deviceId\n            };\n        case 'FILES_ADD':\n            return {\n                ...state,\n                files : [\n                    ...files,\n                    [action.fileName, action.blobURL]\n                ]\n            };\n        case 'MODE_SET': {\n            const { mode : newMode } = action;\n            // When starting or ending the cascade, remove all streams except\n            // the prev one (they will be stopped shortly)\n            const myIndex = order.indexOf(myId);\n            const prevId = order[myIndex - 1];\n            const justPrevStream = prevId ?\n                { [prevId] : streams[prevId] } :\n                {};\n            const newStreams = newMode === CASCADE_STANDBY || newMode === CASCADE_DONE ?\n                justPrevStream :\n                streams;\n            return {\n                ...state,\n                mode    : newMode,\n                streams : newStreams\n            };\n        }\n        case 'MY_ID_SET':\n            return {\n                ...state,\n                myId : action.id\n            };\n        case 'MY_STREAM_SET': {\n            // Move from setup mode when myStream is first set\n            const newMode = myStream ? mode : READY;\n            return {\n                ...state,\n                mode     : newMode,\n                myStream : action.stream,\n                recorder : makeNewRecorder(action.stream, action.dispatch)\n            };\n        }\n        case 'ORDER_SET': {\n            const { order : newOrder } = action;\n            const myOrderIndex = newOrder.findIndex((otherId) => myId === otherId);\n            const iAmInitiator = myOrderIndex === 0;\n            // If an id has been taken away from the order, remove the peers and streams\n            const [newPeers, newStreams] = newOrder.reduce((accumulator, id) => {\n                if (id === myId) return accumulator;\n                return [\n                    {\n                        ...accumulator[0],\n                        [id] : peers[id]\n                    },\n                    {\n                        ...accumulator[1],\n                        [id] : streams[id]\n                    }\n                ]\n            }, [{}, {}]);\n            return {\n                ...state,\n                iAmInitiator,\n                order   : newOrder,\n                peers   : newPeers,\n                streams : newStreams\n            };\n        }\n        case 'PEERS_ADD':\n            return {\n                ...state,\n                peers : {\n                    ...peers,\n                    [action.id] : action.peer\n                }\n            };\n        case 'SERVER_SET':\n            return {\n                ...state,\n                server : action.server\n            };\n        case 'STREAMS_ADD':\n            return {\n                ...state,\n                streams : {\n                    ...streams,\n                    [action.id] : action.stream\n                }\n            };\n        default: {\n            console.error('Unknown action:', action);\n            return state;\n        }\n    }\n};\n\nlet evilBoogiemanGlobalState = {};\nexport function getState() {\n    return evilBoogiemanGlobalState;\n}\n\nexport default function reduceAndSave(state, action) {\n    const newState = reducer(state, action);\n    evilBoogiemanGlobalState = newState;\n    return newState;\n}\n","import React, { createContext, useReducer } from 'react';\nimport reducer, { initialState } from '../state/reducer';\n\nconst Store = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    return (\n        <Context.Provider value={[state, dispatch]}>\n            {children}\n        </Context.Provider>\n    )\n};\n\nexport const Context = createContext(initialState);\nexport default Store;\n","import React, { useContext } from 'react';\nimport { Context } from './Store';\n\nconst FileList = () => {\n    const [state] = useContext(Context);\n    const { files } = state;\n    return (\n        <aside>\n            { files.map(([fileName, blobURL], index) =>\n                <a\n                    key={blobURL}\n                    download={fileName}\n                    href={blobURL}\n                >\n                    Download your video for cascade {index + 1}\n                </a>) }\n        </aside>\n    );\n};\n\nexport default FileList;\n","import React, { useContext } from 'react';\nimport { Context } from './Store';\nimport {\n    CASCADE_DONE,\n    CASCADE_RECORDING,\n    READY,\n    startCascade,\n    stopCascade\n} from '../state/actions/cascade';\n\nconst Navigation = () => {\n    const [state, dispatch] = useContext(Context);\n    const { iAmInitiator, mode, order } = state;\n    return (\n        <nav>\n            { [READY, CASCADE_DONE].includes(mode) && iAmInitiator && order.length > 1 &&\n                <button\n                    className=\"big-button\"\n                    onClick={() => startCascade(dispatch)}\n                >\n                    GO\n                </button> }\n            { mode === CASCADE_RECORDING && iAmInitiator &&\n                <button\n                    className=\"big-button\"\n                    onClick={() => stopCascade(dispatch)}\n                >\n                    STOP\n                </button> }\n        </nav>\n    );\n};\n\nexport default Navigation;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Context } from '../Store';\n\n// Safari, what the hell.\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst audioCtx = new AudioContext();\n\nconst AudioVideoSetup = ({ style }) => {\n    const [state, dispatch] = useContext(Context);\n    const { audioOutput, myStream, peers } = state;\n    const [devices, setDevices] = useState([]);\n    const [showSetup, setShowSetup] = useState(false);\n    const [audioInput, setAudioInput] = useState(null);\n    const [videoInput, setVideoInput] = useState(null);\n    const setAudioOutput = (deviceId) => {\n        dispatch({\n            type : 'AUDIO_OUTPUT_SET',\n            deviceId\n        });\n    }\n\n    const setStream = async () => {\n        const stream = await navigator.mediaDevices.getUserMedia({\n            audio : {\n                deviceId         : audioInput && {\n                    exact : audioInput\n                },\n                // These cause latency\n                autoGainControl  : { exact : false },\n                echoCancellation : false,\n                noiseSuppression : { exact : false },\n            },\n            video : {\n                deviceId : videoInput && {\n                    exact : videoInput\n                }\n            }\n        });\n        if (myStream) {\n            myStream.getTracks().forEach((track) => track.stop());\n            Object.values(peers).forEach((peer) => {\n                peer.removeStream(myStream)\n                peer.addStream(stream);\n            });\n        }\n        // Strangely, there is a delay when hearing the audio via the video element.\n        // But the delay is noticeably shorter when using the Web Audio API...\n        // (But only in Chrome?)\n        const source = audioCtx.createMediaStreamSource(stream);\n        // TODO: set output properly. See:\n        // https://stackoverflow.com/questions/41863094/how-to-select-destination-output-device-using-web-audio-api\n        source.connect(audioCtx.destination);\n        dispatch({\n            type : 'MY_STREAM_SET',\n            // Need to dispatch in the recorder ondataavailable event listener\n            dispatch,\n            stream\n        });\n    };\n\n    useEffect(() => {\n        // On Safari, enumerateDevices only works after getUserMedia is called.\n        // So wait for that to happen before populating the dropdowns.\n        // (Also, missing things even after it's called...)\n        if (myStream && showSetup) {\n            const findDevices = async () => {\n                const deviceList = await navigator.mediaDevices.enumerateDevices();\n                setDevices(deviceList);\n            };\n            findDevices();\n        }\n    }, [myStream, showSetup]);\n\n    useEffect(() => {\n        // Called on the first render\n        // (and any time audioInput or videoInput change)\n        setStream();\n    }, [audioInput, videoInput]);\n\n    const kinds = ['audioinput', 'audiooutput', 'videoinput'];\n    const kindLabels = ['Audio Input', 'Audio Output', 'Video Input'];\n    const selectedDevices = [\n        [audioInput, setAudioInput],\n        [audioOutput, setAudioOutput],\n        [videoInput, setVideoInput]\n    ];\n    // Sort the available devices into the three buckets\n    const devicesSorted = devices.reduce((accumulator, device) => {\n        const { deviceId, kind } = device;\n        const index = kinds.indexOf(kind);\n        return [\n            ...accumulator.slice(0, index),\n            {\n                ...accumulator[index],\n                [deviceId] : device,\n            },\n            ...accumulator.slice(index + 1)\n        ]\n    }, [{}, {}, {}]);\n\n    return (\n        <section className=\"av-setup\" style={style}>\n            { showSetup ? <>\n                { devicesSorted.map((deviceMap, index) => {\n                    const devicesOfType = Object.values(deviceMap);\n                    if (devicesOfType.length === 0) return null;\n                    const label = kindLabels[index];\n                    const [selectedDeviceId, setSelectedDeviceId] = selectedDevices[index];\n                    return (\n                        <label key={label}>\n                            {label}\n                            <select\n                                onChange={(event) => setSelectedDeviceId(event.target.value)}\n                                value={selectedDeviceId || 'default'}\n                            >\n                                { devicesOfType.map(({ deviceId, label }) => (\n                                    <option key={deviceId} value={deviceId}>{label}</option>\n                                )) }\n                            </select>\n                        </label>\n                    );\n                }) }\n                <button onClick={() => setShowSetup(false)}>x</button>\n            </> :\n            <button onClick={() => setShowSetup(true)}>Audio/Video settings</button> }\n        </section>\n    );\n};\n\nexport default AudioVideoSetup;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Context } from '../Store';\nimport {\n    CASCADE_RECORDING,\n    CASCADE_STANDBY_DURATION,\n    changeMode\n} from '../../state/actions/cascade';\n\nconst Countdown = () => {\n    // Counts down to zero from here\n    const countdownStart = 3;\n    const [, dispatch] = useContext(Context);\n    const [number, setNumber] = useState(countdownStart);\n    useEffect(() => {\n        if (number > 0) {\n            setTimeout(() => {\n                setNumber(number - 1);\n            }, CASCADE_STANDBY_DURATION / countdownStart);\n        } else {\n            changeMode(CASCADE_RECORDING, dispatch);\n        }\n    }, [number]);\n    return <span className=\"countdown\">{number}</span>\n};\n\nexport default Countdown;\n","import { useEffect, useRef } from 'react';\n\nexport default function usePrevious(value) {\n    const prevRef = useRef();\n    useEffect(() => {\n        prevRef.current = value;\n    }, [value]);\n    return prevRef.current;\n}\n","import React, { useCallback, useContext } from 'react';\nimport { Context } from '../Store';\nimport usePrevious from '../../state/use-previous';\nimport { setPlayLatency } from '../../state/actions/recording';\n\nconst Video = ({ id, isMe, setVideoAspectRatio, stream }) => {\n    const [state] = useContext(Context);\n    const { audioOutput } = state;\n\n    const prevStream = usePrevious(stream);\n    const prevAudioOutput = usePrevious(audioOutput);\n    const videoRef = useCallback((node) => {\n        if (node) {\n            if (stream !== prevStream) {\n                node.addEventListener('loadedmetadata', ({ target }) => {\n                    setVideoAspectRatio(target.videoWidth / target.videoHeight);\n                });\n                if ('srcObject' in node) {\n                    node.srcObject = stream;\n                } else {\n                    node.src = URL.createObjectURL(stream);\n                }\n                if (!isMe) {\n                    node.addEventListener('play', () => {\n                        setPlayLatency(id);\n                    });\n                }\n            }\n\n            if (audioOutput && audioOutput !== prevAudioOutput) {\n                // TODO: check if available, alert user if not\n                // (Firefox needs setting enabled)\n                // (Safari is ?)\n                node.setSinkId(audioOutput);\n            }\n        }\n    }, [audioOutput, stream]);\n\n    return stream ?\n        <video autoPlay muted={isMe} ref={videoRef} /> :\n        null;\n};\n\nexport default Video;\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport AudioVideoSetup from './AudioVideoSetup';\nimport Countdown from './Countdown';\nimport Video from './Video';\nimport { Context } from '../Store';\nimport {\n    CASCADE_DONE,\n    CASCADE_RECORDING,\n    CASCADE_STANDBY,\n    READY\n} from '../../state/actions/cascade';\nimport { serverSend } from '../../state/actions/server';\n\nconst VideoSquare = ({\n    col,\n    id,\n    isMe,\n    numColumns,\n    orderNumber,\n    row,\n    stream\n}) => {\n    const [state, dispatch] = useContext(Context);\n    const { iAmInitiator, mode, myId, order } = state;\n\n    const dndRef = useRef(null);\n    const [{ isDragging }, connectDrag] = useDrag({\n        item    : { id, type : 'participant' },\n        canDrag : () => iAmInitiator && [READY, CASCADE_DONE].includes(mode),\n        collect : (monitor) => ({ isDragging : monitor.isDragging() })\n    });\n    const [, connectDrop] = useDrop({\n        accept : 'participant',\n        drop   : (item) => {\n            serverSend({\n                type   : 'ORDER_SET',\n                fromId : myId,\n                order,\n            });\n        },\n        hover  : ({ id : hoveredOverId }) => {\n            if (hoveredOverId !== id) {\n                const myIndex = order.indexOf(id);\n                const theirIndex = order.indexOf(hoveredOverId);\n                const newOrder = [...order];\n                newOrder[myIndex] = hoveredOverId;\n                newOrder[theirIndex] = id;\n                dispatch({\n                    type  : 'ORDER_SET',\n                    order : newOrder\n                });\n            }\n        }\n    });\n    connectDrag(dndRef);\n    connectDrop(dndRef);\n\n    const style = {\n        gridColumn : `${col} / span 1`,\n        gridRow    : `${row} / span 1`,\n        opacity    : isDragging ? 0.5 : 1,\n    };\n\n    const [videoAspectRatio, setVideoAspectRatio] = useState(null);\n    const [left, setLeft] = useState(0);\n    const [top, setTop] = useState(0);\n    useEffect(() => {\n        const element = dndRef.current;\n        if (element && videoAspectRatio) {\n            const videoResizeObserver = new ResizeObserver((entries) => {\n                entries.forEach((entry) => {\n                    const { width, height } = entry.contentRect;\n                    // Try to fill height\n                    let videoHeight = height;\n                    let videoWidth = videoHeight * videoAspectRatio;\n                    // If width overflows, fill width\n                    if (videoWidth > width) {\n                        videoWidth = width;\n                        videoHeight = videoWidth / videoAspectRatio;\n                    }\n                    setLeft((width - videoWidth) / 2);\n                    setTop((height - videoHeight) / 2);\n                });\n            });\n            videoResizeObserver.observe(element);\n            return () => {\n                videoResizeObserver.disconnect();\n            };\n        }\n    }, [videoAspectRatio]);\n    const showOrderNumber = orderNumber > 0 && videoAspectRatio && dndRef.current;\n    const orderNumberStyle = {\n        backgroundColor : mode === CASCADE_STANDBY ? 'yellow' : (\n            mode === CASCADE_RECORDING ? 'red' : 'green'\n        ),\n        left            : `calc(${left}px + 1%)`,\n        top             : `calc(${top}px + 1%)`\n    };\n    const settingsButtonStyle = {\n        right : orderNumberStyle.left,\n        top   : orderNumberStyle.top\n    };\n\n    return (\n        <div ref={dndRef} className=\"video-draggable\" style={style}>\n            <Video id={id} isMe={isMe} setVideoAspectRatio={setVideoAspectRatio} stream={stream} />\n            { isMe && <AudioVideoSetup style={settingsButtonStyle} /> }\n            { showOrderNumber &&\n                <span className=\"order-number\" style={orderNumberStyle}>{orderNumber}</span> }\n            { mode === CASCADE_STANDBY && isMe && iAmInitiator &&\n                <Countdown /> }\n        </div>\n    );\n};\n\nexport default VideoSquare;\n","import React, { useContext } from 'react';\nimport { Context } from './Store';\nimport VideoSquare from './VideoSquare';\n\nconst VideoGrid = () => {\n    const [state] = useContext(Context);\n    const { myId, myStream, order, streams } = state;\n\n    const numParticipants = Object.values(streams).length + 1;\n    // Add a new row when the number of participants exceeds the perfect square\n    // (2-4 partcipants have two columns, 5-9 have three columns, 10-16 have four columns, etc)\n    const cols = Math.ceil(Math.sqrt(numParticipants));\n    const rows = Math.ceil(numParticipants / cols);\n    const colPct = 100 / cols;\n    const rowPct = 100 / rows;\n    const gridStyles = {\n        gridTemplateColumns : `repeat(${cols}, ${colPct}%)`,\n        gridTemplateRows    : `repeat(${cols}, ${rowPct}%)`,\n    };\n\n    const getOrderProps = (id) => {\n        const orderNumber = order.indexOf(id) + 1;\n        const row = Math.ceil(orderNumber / cols);\n        const numBeforeRow = (row - 1) * cols;\n        const col = orderNumber - numBeforeRow;\n        return {\n            col,\n            orderNumber,\n            row\n        };\n    };\n\n    return (\n        <main className=\"video-grid\" style={gridStyles}>\n            <VideoSquare id={myId} isMe stream={myStream} {...getOrderProps(myId)} />\n            { Object.entries(streams).map(([id, stream]) =>\n                <VideoSquare key={id} id={id} stream={stream} {...getOrderProps(id)} />\n            ) }\n        </main>\n    );\n};\n\nexport default VideoGrid;\n","import React from 'react';\n\nconst Welcome = ({ onClick }) => {\n    return <>\n        <div>Welcome. Let's make the connections.</div>\n        <div>First, enable your audio and video. Before you click the button, put on headphones so there's no feedback!</div>\n        <button onClick={onClick}>\n            Let's go!\n        </button>\n    </>;\n};\n\nexport default Welcome;\n","import React, { useContext, useState } from 'react';\nimport FileList from './FileList';\nimport Navigation from './Navigation';\nimport { Context } from './Store';\nimport VideoGrid from './VideoGrid';\nimport Welcome from './Welcome';\n\nconst GreenRoom = () => {\n    const [state] = useContext(Context);\n    console.log('STATE', state);\n\n    const [showWelcome, setShowWelcome] = useState(true);\n    if (showWelcome) {\n        return <Welcome onClick={() => setShowWelcome(false)} />;\n    }\n\n    return <>\n        <VideoGrid />\n        <Navigation />\n        <FileList />\n    </>;\n};\n\nexport default GreenRoom;\n","import { useContext, useEffect } from 'react';\nimport { Context } from './Store';\nimport usePrevious from '../state/use-previous';\nimport { makeServer } from '../state/actions/server';\n\nconst ServerProvider = ({ children }) => {\n    const [state, dispatch] = useContext(Context);\n    const { myStream } = state;\n    const prevMyStream = usePrevious(myStream);\n    const params = new URLSearchParams(window.location.search);\n    const serverURL = params.get('server');\n    useEffect(() => {\n        // Start the server connection only when myStream is first initiated\n        if (myStream && !prevMyStream && serverURL) {\n            makeServer(serverURL, dispatch);\n        }\n    }, [myStream, prevMyStream, serverURL]);\n\n    if (!serverURL) {\n        return \"You have to have a server. Sorry, that's just the way it is.\";\n    }\n\n    return children;\n};\n\nexport default ServerProvider;\n","import React from 'react';\nimport { DndProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport GreenRoom from './GreenRoom';\nimport ServerProvider from './ServerProvider';\nimport Store from './Store';\nimport './App.css';\n\nconst App = () => {\n    // TODO: Splash to explain what it is, button to enter green room.\n    return (\n        <Store>\n            <ServerProvider>\n                <DndProvider backend={HTML5Backend}>\n                    <GreenRoom />\n                </DndProvider>\n            </ServerProvider>\n        </Store>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}