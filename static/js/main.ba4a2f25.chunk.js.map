{"version":3,"sources":["state/reducer.js","components/Store.jsx","components/InputOutputSelect.jsx","components/AudioVideoSetup.jsx","components/VideoSquare.jsx","components/GreenRoom.jsx","state/use-previous.js","components/App.js","serviceWorker.js","index.js"],"names":["initialState","myStream","peers","signalServer","streams","videoElement","reducer","state","action","console","log","type","oldStream","newStream","stream","Object","values","forEach","peer","removeStream","addStream","replacePeerStreams","data","dispatch","JSON","parse","myId","forId","theirId","fromId","receiveSignal","signal","initiator","isNewPeer","keys","includes","Peer","on","send","stringify","theirStream","id","handleSignal","error","Context","createContext","Store","children","useReducer","Provider","value","InputOutputSelect","useContext","useState","devices","setDevices","showSetup","setShowSetup","audioInput","setAudioInput","audioOutput","setAudioOutput","videoInput","setVideoInput","setStream","a","getTracks","track","stop","navigator","mediaDevices","getUserMedia","audio","deviceId","exact","video","useEffect","enumerateDevices","deviceList","findDevices","setSinkId","kinds","kindLabels","selectedDevices","devicesSorted","reduce","accumulator","device","kind","index","indexOf","slice","className","map","deviceMap","label","selectedDeviceId","setSelectedDeviceId","key","onChange","event","target","onClick","AudioVideoSetup","showWelcome","setShowWelcome","welcomeMessage","style","alignItems","display","flexDirection","VideoSquare","videoRef","useCallback","node","srcObject","src","URL","createObjectURL","autoPlay","ref","GreenRoom","prevMyStream","prevRef","useRef","current","usePrevious","serverURL","URLSearchParams","window","location","search","get","WebSocket","addEventListener","entries","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ba4a2f25.chunk.js","sourcesContent":["import Peer from 'simple-peer';\n\nexport const initialState = {\n    myStream     : null,\n    peers        : {},\n    signalServer : null,\n    streams      : {},\n    videoElement : null\n};\n\nfunction replacePeerStreams(state, action) {\n    const { myStream : oldStream, peers } = state;\n    const { stream : newStream } = action;\n    Object.values(peers).forEach((peer) => {\n        peer.removeStream(oldStream)\n        peer.addStream(newStream);\n    });\n}\n\nfunction handleSignal(state, action) {\n    const { myStream, peers, signalServer } = state;\n    // Sending dispatch in the action is kind of a hack...\n    const { data, dispatch } = action;\n    const {\n        forId  : myId,\n        fromId : theirId,\n        signal : receiveSignal\n    } = JSON.parse(data);\n    const initiator = receiveSignal === 'initiate';\n    const isNewPeer = !Object.keys(peers).includes(theirId);\n    const peer = isNewPeer ?\n        new Peer({\n            initiator,\n            stream : myStream,\n        }) :\n        peers[theirId];\n    if (isNewPeer) {\n        console.log(`making new peer ${theirId} (initiator = ${initiator})`);\n        peer.on('signal', (signal) => {\n            console.log(`sending signal to ${theirId}`, signal);\n            signalServer.send(JSON.stringify({\n                forId  : theirId,\n                fromId : myId,\n                signal\n            }));\n        });\n        peer.on('stream', (theirStream) => {\n            dispatch({\n                type   : 'STREAMS_ADD',\n                id     : theirId,\n                stream : theirStream\n            });\n        });\n    }\n    if (!initiator) {\n        console.log(`receiving signal from ${theirId}`);\n        peer.signal(receiveSignal);\n    }\n\n    if (isNewPeer) {\n        return {\n            ...state,\n            peers : {\n                ...peers,\n                [theirId] : peer\n            }\n        };\n    }\n    return state;\n}\n\n// This reducer is not quite a pure function and I'm not sorry about it.\n// The PEER_SIGNAL action will sometimes not mutate state but just call peer.signal().\n// Basically I'm hijacking the reducer to get the current state\n// when a message is received from the server.\nexport default function reducer(state, action) {\n    console.log('ACTION', action);\n    const { streams } = state;\n    switch (action.type) {\n        case 'MY_STREAM_SET': {\n            replacePeerStreams(state, action);\n            return {\n                ...state,\n                myStream : action.stream\n            };\n        }\n        case 'PEER_SIGNAL':\n            return handleSignal(state, action)\n        case 'SIGNAL_SERVER_SET':\n            return {\n                ...state,\n                signalServer : action.signalServer\n            };\n        case 'STREAMS_ADD':\n            return {\n                ...state,\n                streams : {\n                    ...streams,\n                    // This ID matches the peer ID\n                    [action.id] : action.stream,\n                }\n            };\n        case 'VIDEO_ELEMENT_SET':\n            return {\n                ...state,\n                videoElement : action.videoElement\n            };\n        default: {\n            console.error('Unknown action:', action);\n            return state;\n        }\n    }\n};\n","import React, { createContext, useReducer } from 'react';\nimport reducer, { initialState } from '../state/reducer';\n\nconst Store = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    return (\n        <Context.Provider value={[state, dispatch]}>\n            {children}\n        </Context.Provider>\n    )\n};\n\nexport const Context = createContext(initialState);\nexport default Store;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Context } from './Store';\n\nconst InputOutputSelect = () => {\n    const [state, dispatch] = useContext(Context);\n    const { myStream, videoElement } = state;\n    const [devices, setDevices] = useState([]);\n    const [showSetup, setShowSetup] = useState(true);\n    const [audioInput, setAudioInput] = useState(null);\n    const [audioOutput, setAudioOutput] = useState(null);\n    const [videoInput, setVideoInput] = useState(null);\n\n    const setStream = async () => {\n        if (myStream) {\n            myStream.getTracks().forEach((track) => track.stop());\n        }\n        const stream = await navigator.mediaDevices.getUserMedia({\n            audio : {\n                deviceId : audioInput && {\n                    exact : audioInput\n                }\n            },\n            video : {\n                deviceId : videoInput && {\n                    exact : videoInput\n                }\n            }\n        });\n        dispatch({\n            type : 'MY_STREAM_SET',\n            stream\n        });\n    };\n\n    useEffect(() => {\n        const findDevices = async () => {\n            const deviceList = await navigator.mediaDevices.enumerateDevices();\n            setDevices(deviceList);\n        };\n        findDevices();\n    }, []);\n\n    useEffect(() => {\n        // Called on the first render\n        // (and any time audioInput or videoInput change)\n        setStream();\n    }, [audioInput, videoInput]);\n\n    useEffect(() => {\n        if (videoElement && audioOutput) {\n            videoElement.setSinkId(audioOutput);\n        }\n    }, [audioOutput, videoElement]);\n\n    const kinds = ['audioinput', 'audiooutput', 'videoinput'];\n    const kindLabels = ['Audio Input', 'Audio Output', 'Video Input'];\n    const selectedDevices = [\n        [audioInput, setAudioInput],\n        [audioOutput, setAudioOutput],\n        [videoInput, setVideoInput]\n    ];\n    // Sort the available devices into the three buckets\n    const devicesSorted = devices.reduce((accumulator, device) => {\n        const { deviceId, kind } = device;\n        const index = kinds.indexOf(kind);\n        return [\n            ...accumulator.slice(0, index),\n            {\n                ...accumulator[index],\n                [deviceId] : device,\n            },\n            ...accumulator.slice(index + 1)\n        ]\n    }, [{}, {}, {}]);\n\n    return (\n        <div className=\"io-settings\">\n            { showSetup ? <>\n                { devicesSorted.map((deviceMap, index) => {\n                    const label = kindLabels[index];\n                    const [selectedDeviceId, setSelectedDeviceId] = selectedDevices[index];\n                    return (\n                        <label key={label}>\n                            {label}\n                            <select\n                                onChange={(event) => setSelectedDeviceId(event.target.value)}\n                                value={selectedDeviceId || 'default'}\n                            >\n                                { Object.values(deviceMap).map(({ deviceId, label }) => (\n                                    <option key={deviceId} value={deviceId}>{label}</option>\n                                )) }\n                            </select>\n                        </label>\n                    );\n                }) }\n                <button onClick={() => setShowSetup(false)}>x</button>\n            </> :\n            <button onClick={() => setShowSetup(true)}>Audio/Video settings</button> }\n        </div>\n    );\n};\n\nexport default InputOutputSelect;\n","import React, { useState } from 'react';\nimport InputOutputSelect from './InputOutputSelect';\n\nconst AudioVideoSetup = () => {\n    const [showWelcome, setShowWelcome] = useState(true);\n\n    const welcomeMessage = <>\n        <div>Welcome. Let's make the connections.</div>\n        <div>First, enable your audio and video. Before you click the button, put on headphones so there's no feedback!</div>\n        <button onClick={() => setShowWelcome(false)}>\n            Let's go!\n        </button>\n    </>;\n\n    const style = {\n        alignItems    : 'center',\n        display       : 'flex',\n        flexDirection : showWelcome ? 'column' : 'row'\n    };\n\n    return (\n        <section style={style}>\n            { showWelcome ?\n                welcomeMessage :\n                <InputOutputSelect /> }\n        </section>\n    );\n};\n\nexport default AudioVideoSetup;\n","import React, { useCallback, useContext } from 'react';\nimport { Context } from './Store';\n\nconst VideoSquare = ({ stream }) => {\n    const [, dispatch] = useContext(Context);\n    const videoRef = useCallback((node) => {\n        if (node) {\n            if ('srcObject' in node) {\n                node.srcObject = stream;\n            } else {\n                node.src = URL.createObjectURL(stream);\n            }\n            // The video element must be available elsewhere\n            // to set audio output via setSinkId().\n            dispatch({\n                type         : 'VIDEO_ELEMENT_SET',\n                videoElement : node\n            });\n        }\n    }, [stream]);\n    return stream && <video autoPlay ref={videoRef} />;\n};\n\nexport default VideoSquare;\n","import React, { useContext, useEffect } from 'react';\nimport AudioVideoSetup from './AudioVideoSetup';\nimport { Context } from './Store';\nimport VideoSquare from './VideoSquare';\nimport './GreenRoom.css';\nimport usePrevious from '../state/use-previous';\n\nconst GreenRoom = () => {\n    const [state, dispatch] = useContext(Context);\n    console.log('STATE', state);\n    const { myStream, streams } = state;\n    const prevMyStream = usePrevious(myStream);\n\n    const params = new URLSearchParams(window.location.search);\n    const serverURL = params.get('signalServer');\n    useEffect(() => {\n        // Start the server connection only when myStream is first initiated\n        if (myStream && !prevMyStream && serverURL) {\n            // We set the server connection here because\n            // we need access to dispatch in the event listeners.\n            const signalServer = new WebSocket(serverURL);\n            signalServer.addEventListener('close', () => console.log('closing socket'));\n            signalServer.addEventListener('error', () => console.log('socket error'));\n            signalServer.addEventListener('open', () => console.log('opening socket'));\n            signalServer.addEventListener('message', ({ data }) => {\n                console.log('message from server:', data);\n                dispatch({\n                    type : 'PEER_SIGNAL',\n                    data,\n                    dispatch\n                });\n            });\n            dispatch({\n                type : 'SIGNAL_SERVER_SET',\n                signalServer\n            });\n            // TODO: handle failed connection\n        }\n    }, [myStream, prevMyStream, serverURL]);\n\n    if (!serverURL) {\n        return \"You have to have a server. Sorry, that's just the way it is.\";\n    }\n\n    return (\n        <div className=\"videos\">\n            <div className=\"my-stream\">\n                { myStream && <VideoSquare stream={myStream} /> }\n                <AudioVideoSetup />\n            </div>\n            { Object.entries(streams).map(([id, stream]) => {\n                return <VideoSquare key={id} stream={stream} />;\n            }) }\n        </div>\n    );\n};\n\nexport default GreenRoom;\n","import { useEffect, useRef } from 'react';\n\nexport default function usePrevious(value) {\n    const prevRef = useRef();\n    useEffect(() => {\n        prevRef.current = value;\n    }, [value]);\n    return prevRef.current;\n}\n","import React from 'react';\nimport GreenRoom from './GreenRoom';\nimport Store from './Store';\nimport './App.css';\n\nconst App = () => {\n    // TODO: Splash to explain what it is, button to enter green room.\n    return (\n        <Store>\n            <GreenRoom />\n        </Store>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}